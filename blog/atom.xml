<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://rascal-mpl.org/blog</id>
    <title>The Rascal Meta Programming Language Blog</title>
    <updated>2017-03-01T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://rascal-mpl.org/blog"/>
    <subtitle>The Rascal Meta Programming Language Blog</subtitle>
    <icon>https://rascal-mpl.org/images/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[What is ValLang?]]></title>
        <id>/2017/03/01/what-is-vallang</id>
        <link href="https://rascal-mpl.org/blog/2017/03/01/what-is-vallang"/>
        <updated>2017-03-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Vallang () is a highly integrated and mostly-closed collection of mutually recursive fundamental data-types on the Java Virtual Machine:]]></summary>
        <content type="html"><![CDATA[<p><strong>Vallang</strong> (<a href="https://github.com/usethesource/vallang" target="_blank" rel="noopener noreferrer">https://github.com/usethesource/vallang</a>) is a highly integrated and mostly-closed collection of mutually recursive fundamental data-types on the Java Virtual Machine:</p><ul><li>locations represented by URIs: <code>|java+class://java/lang/String|</code> and <code>|file:///tmp/HelloWorld.java|</code></li><li>integers of arbitrary size: <code>1,2,3, 134812345123841234</code></li><li>reals of arbitrary size, precision and scale: <code>1., 1.0, 1e10</code></li><li>rational numbers: <code>1r1, 1r7</code></li><li>unicode strings: <code>"hello üåê"</code></li><li>lists: <code>[1,2, 1.0, "hello üåê"]</code>, <code>[]</code></li><li>sets: <code>{1,2, 1.0, "hello üåê"}</code>, <code>{}</code></li><li>maps: <code>(1:0, "a":"b")</code>, <code>()</code></li><li>n-ary tuples with named fields: <code>&lt;1,2,"a",1.0&gt;</code>, <code>&lt;&gt;</code></li><li>n-ary relations (represented as sets of n-ary tuples): <code>{&lt;1,2,"a",1.0&gt;, &lt;&gt;}</code></li><li>tree nodes: <code>"myNode"(1,2,3)</code></li><li>many-sorted algebraic terms, acting as typed tree nodes: <code>myNode(1,2,3)</code>.</li><li>keyword fields or properties to tree nodes and algebraic data-types: <code>"myNode"(name="Winston")</code>, <code>myNode(age=12)</code></li></ul><p>Operations on these data-types are too many to list here. A selection is listed below, but you should expect the features to be pretty low level; i.e. directly accessing and manipulating the data rather than providing analysis algorithms. Algorithms in the library are added only if programming them below the abstraction layer of <strong>vallang</strong> provides a major efficiency benefit or it can factors out highly common client code into a reusable feature. More on this design decision later. </p><ul><li>relational calculus operators such as transitive (reflexive) closure, query and projections, compositions and joins</li><li>generic tree traversal and primitives for implementing pattern matching</li></ul><p><strong>Vallang</strong> has a type system based on type systems in functional programming, but note that each value has a most specific dynamic type associated always at run-time. More on the design of the type system below, but here is a list of <strong>vallang</strong> types:</p><ul><li><code>void</code> - the bottom type with no values</li><li><code>value</code> - the top type for all values</li><li><code>loc</code> - the type for URI locations</li><li><code>int</code>, <code>real</code>, <code>rat</code> are all sub-types of the aggregate type <code>num</code></li><li><code>tuple[t1,...,tn]</code> and <code>tuple[t1 l1, ..., tn ln]</code> to represent tuples of fixed but arbitrary arity</li><li><code>list[t]</code>, <code>set[t]</code>, <code>map[t1,t2]</code> as incomparable alternative collection types.</li><li><code>node</code> for trees</li><li>user-defined many-sorted mutually recursive algebraic data-types, acting as grammars for instances of tree nodes: <code>data MyADT = myNode(int a, int b, int c, int age=...)</code></li><li>alias types for short-handed type equivalences</li><li><code>rel[t1, ..., tn]</code> is an alias for <code>set[tuple[t1,...tn]]</code></li><li>open type parameters with upper bounds, <code>&amp;T &lt;: node</code>, can be used to type parameterize composite types (used in type aliases) and to construct higher-order abstract algebraic datatypes.</li></ul><p>Sub-typing is <em>co-variant</em> for the container types <code>list</code>, <code>map</code>, <code>set</code> and <code>tuple</code>. Otherwise these rules define the entire type system:</p><ul><li><code>value</code> is a strict supertype of all other types other than itself</li><li><code>node</code> is the common supertype of all algebraic data-types</li><li>each algebraic constructor is a strict sub-type of its abstract sort</li><li><code>void</code> is the sub-type of all types</li><li><code>num</code> is the supertype of <code>rat</code>, <code>int</code> and <code>real</code></li><li>an alias <code>alias X = Y</code> is a type equivalence</li><li>constructor types are sub-types if they have the same name and arity, and they are comparable in their argument types. <ul><li>Within a single abstract sort no two alternative constructors may be sub-types of each other. </li></ul></li></ul><p>There exists an extension mechanism for adding type kinds and their associated value kinds to the <strong>vallang</strong> system. Rascal, for example, uses this to represent functions and co-routines at run-time. The extension mechanism works by declaring a bi-directional transformation between the extensions and a symbolic representation of choice (chosen freely from the core representation mechanisms of <strong>vallang</strong>). This bidirectional mapping is mostly used when serializing and deserializing values (see below).</p><p>The types of <strong>vallang</strong> in Java are represented by a Composite design pattern with maximally shared instances of (the otherwise opaque) abstract class <code>Type</code>. These types expose fast implementations of sub-type and type equivalence for implementing fast pattern matching. </p><p>The values of <strong>vallang</strong> are all instances of <code>IValue</code> and sub-interfaces thereof. For every kind of value there is an interface, e.g. <code>ISet</code>, <code>IList</code>, <code>ITuple</code> and <code>IConstructor</code> but they are not type-parametrized because Java's type system can not represent the aforementioned co-variant sub-typing rules we require. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-does-vallang-exist">Why does Vallang exist?<a class="hash-link" href="#why-does-vallang-exist" title="Direct link to heading">‚Äã</a></h2><p><strong>vallang</strong> is a <a href="http://www.usethesource.io" target="_blank" rel="noopener noreferrer">UseTheSource</a> project recently renamed from <strong>rascal-values</strong>, which was known earlier as <strong>pdb.values</strong>. </p><p>The project started as a part of the <a href="http://homepages.cwi.nl/~jurgenv/papers/OOPSLA-2009.pdf" target="_blank" rel="noopener noreferrer">IDE metatooling platform</a> in 2007 as a <em>generic library for representing symbolic facts about source code</em>, for use in the construction of IDE services in Eclipse, then it continued to form the basis of the run-time system for <a href="http://www.rascal-mpl.org" target="_blank" rel="noopener noreferrer">Rascal</a> starting 2009, and finally was renamed to <strong>vallang</strong> to serve a wider scope.</p><p>We designed of <strong>vallang</strong> based on experience with and studying the <a href="http://www.meta-environment.org/Meta-Environment/ATerms.html" target="_blank" rel="noopener noreferrer">ATerm library</a> and <a href="http://www.meta-environment.org/Meta-Environment/WebHome.html" target="_blank" rel="noopener noreferrer">ASF+SDF</a>, but also by learning from RSF (Rigi Standard Format), Rscript and GXL and S-expressions. Perhaps JSON and YAML have also had a minor influence.</p><blockquote><p>The main purpose of <strong>vallang</strong> is to provide a flexible and fully typed collection of <em>symbolic</em> representations of data, specifically "ready" to represent facts about software systems but amenable to basically any form of symbolic data analysis purposes.</p></blockquote><p>This purpose aligns with the mission of the <a href="http://www.rascalmpl.org" target="_blank" rel="noopener noreferrer">Rascal metaprogramming language</a> which is made to <em>analyze</em> and <em>manipulate</em> exactly such symbolic representations. Therefore <strong>vallang</strong> is the run-time environment for both interpreted and compiled Rascal programs. </p><p>Note that while <strong>vallang</strong> is a great fit for symbolic data analysis, it is currently not the best fit for numerical data analysis as it features only a uniform symbolic represetation of numbers of arbitrary precision and size (ints, reals, rationals). In other words, the numbers and collections of numbers in <strong>vallang</strong> are optimized for storage size, clarity and equational reasoning rather than optimal computational efficiency. This also means that indirect numerical encodings of data (i.e. using numerical vectors and matrices), which are often used in symbolic analyses to optimize computational efficiency are not the right strategy when using <strong>vallang</strong>: it's better to stick with a more direct symbolic representation and let <strong>vallang</strong> maintainers optimize them. </p><p>Next to the maintainers of Rascal, the main users of <strong>vallang</strong> are currently programmers who write data acquisition and (de)serialisation adapters for the Rascal ecosystem:</p><ul><li>connecting open-compiler front-ends to Rascal</li><li>providing external data-sources such as SQL and MongoDB databases</li><li>connecting reusable interaction and visualization front-ends to Rascal</li></ul><blockquote><p>Nevertheless <strong>vallang</strong> is a generic and Rascal-independent library which may serve as the run-time system for other programming languages or analysis systems, such as term rewriting systems, relational calculus systems, constraint solvers, model checkers, model transformations, etc.</p></blockquote><p>The latter perspective is the reason for the re-branding of <strong>rascal-values</strong> to <strong>vallang</strong>. You might consider <strong>vallang</strong> as a functional replacement for ECore, an alternative to the ATerm library on the JVM, or an alternative to JSON-based noSQL in-memory database systems, or a way of implementing graph databases. </p><p>Finally, <strong>vallang</strong> is a JVM library because that is where we needed it for Rascal and the Eclipse IDE Metatooling Platform. We hope other JVM programmers will also benefit from it and we have no plans of porting it at the moment to any other technological space. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-are-the-main-design-considerations-of-vallang">What are the main design considerations of Vallang?<a class="hash-link" href="#what-are-the-main-design-considerations-of-vallang" title="Direct link to heading">‚Äã</a></h2><h4 class="anchor anchorWithStickyNavbar_LWe7" id="vallang-values-are-symbolic-and-immutable">Vallang values are symbolic and immutable.<a class="hash-link" href="#vallang-values-are-symbolic-and-immutable" title="Direct link to heading">‚Äã</a></h4><p>We think software analysis is complex enough to be confusing to even the most experienced programmers. Manipulating huge stores of hierarchical and relational data about softwar easily goes wrong; trivial bugs due to aliasing and sharing data between different stages of an analysis or transformation can take weeks to resolve, or worse: will never even be diagnosed. </p><p>Since our goal is to provide many more variants of all kind of software analyses, we wish to focus on the interesting algorithmic details rather than the trivial mistakes we make. Therefore, <strong>vallang</strong> values are <em>immutable</em>. Sharing of values or parts of values is allowed under-the-hood but is not observable. The library is implemented using persistent and/or maximally shared data structures for reasons of efficiency. </p><p>Users of <strong>vallang</strong> freely share references to their data to other parts of an analysis because they know the data can not change due to an unforeseen interaction. We also believe that the immutable values can be shared freely between threads on the JVM, but there are not enough tests yet to make such a bold claim with full confidence. </p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="vallang-values-are-generated-via-the-abstractfactory-design-pattern-and-do-not-leak-implementation-representations">Vallang values are generated via the AbstractFactory design pattern and do not leak implementation representations<a class="hash-link" href="#vallang-values-are-generated-via-the-abstractfactory-design-pattern-and-do-not-leak-implementation-representations" title="Direct link to heading">‚Äã</a></h4><p>The reason is that client code <em>must</em> abstract from the implementation details to arrive at the mathematical precision of symbolic reasoning which <strong>vallang</strong> should provide.</p><p>This also serves a maintenance and evolution purpose for implementations of the library. We can plug in a new implementation of the library without affecting client code.</p><p>Note that for efficiency reasons values produced from different implementations of an abstract value factory (different implementations of <code>IValueFactory</code>) are not required to interact correctly.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="vallang-values-uniquely-deserializeserialize-fromto-a-standard-and-simple-expression-language">Vallang values uniquely deserialize/serialize from/to a standard and simple expression language<a class="hash-link" href="#vallang-values-uniquely-deserializeserialize-fromto-a-standard-and-simple-expression-language" title="Direct link to heading">‚Äã</a></h4><p>The general rule is that for any two JVM object reference <code>o</code> and <code>p</code> to any <strong>vallang</strong> object the following rule holds: <code>o.toString().equals(p.toString) &lt;==&gt; o.equals(p)</code></p><p>We currently random test this rule and it sometimes fails due to a deprecated feature called "annotations" which we are removing to make the above contract true.</p><p>The intended effects of the toString/equals contract of <strong>vallang</strong> are the following:</p><ul><li>What-you-see-is-what-you-get: debugging values by printing them means that you get as a programmer full disclosure about the meaning of the object</li><li>Structural equality and equational reasoning: the context in which values are created can not have any influence on their identity</li><li>Sharing is safe</li><li>Serialisation and deserialisation is never lossy</li><li>The sub-type relation for types of values coincides exactly with sublanguage concept of the set of sentences for all values of the given types. </li></ul><p>The latter point is one of the main reasons why <strong>vallang</strong> is called a <strong>lang</strong>uage. The result of <code>anyValue.toString()</code> is a members of a precisely defined textual languages. The full textual language is generated from the <code>value</code> type, and sub-languages are generated from the respective sub-types. <code>void</code> is the empty language. In this manner the types of <strong>vallang</strong> act like non-terminals of a precise context-free grammar. The <strong>vallang</strong> language as defined above is a strict sub-language of the <code>Expression</code> sub-language of Rascal.</p><p>The other reason why <strong>vallang</strong> is names as a language is because the implementations of the <code>IValue</code> interface and its sub-interfaces are seen as a closed combinator language for computations on the values, and their implementations are interpreters for this language. </p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="vallang-values-always-know-their-most-precise-concrete-ad-hoc-run-time-type">Vallang values always know their most-precise concrete ad-hoc run-time type<a class="hash-link" href="#vallang-values-always-know-their-most-precise-concrete-ad-hoc-run-time-type" title="Direct link to heading">‚Äã</a></h4><ul><li>This is nice for debugging purposes, the types are descriptions of values and if matching or equality checking fails then the type abstraction usually explains why without having to go into reading the entire value.</li><li>Types may be computed lazily or eagerly, cashed or not. This is not functionally observable but it may affect run-time efficiency</li><li>Having precise run-time types for every (nested) value, and having efficient access to this, is a prerequisite for building fast and type-safe rank-2 polymorphic higher order functional computations. Or in functional terms: you need this to make folds and maps work on heterogenous recursive and open data-types. Or in simpler terms: using this we can build statically type-safe data traversal and daya transformation features into Rascal. </li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="vallang-values-include-both-trees-and-relations">Vallang values include both trees and relations<a class="hash-link" href="#vallang-values-include-both-trees-and-relations" title="Direct link to heading">‚Äã</a></h4><p>Even though both trees and relations are generic enought to represent any data, sometimes a graph or table is more natural than a tree and sometimes the other way around. </p><ul><li>trees are nice for abstract and concrete syntax representations</li><li>trees are nice for abstract symbolic domains, such as terms for constraint variables and binary constraints</li><li>relations are nice for graph-like unstructred data, such as project dependencies, call graphs, etc.</li><li>relations are nice for access to external data stored in spreadsheets and databases</li><li>trees are nice for access to web data stored in HTML, XML, JSON formats etc.</li><li>trees are good for transformation purposes, where we parse something, rewrite it and unparse it again</li><li>relations are good for analysis purposes, where we extract facts, elaborate on them and finally report the result.</li></ul><p>Rascal is a language which can be used to easily switch between different representations of the same information, using pattern matching, querying, comprehensions, etc. From <strong>vallang</strong> you should not expect any help in this regard: the choice of representation for any information is a key design decision for the user of <strong>vallang</strong>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="who-contributed-to-vallang">Who contributed to Vallang?<a class="hash-link" href="#who-contributed-to-vallang" title="Direct link to heading">‚Äã</a></h2><ul><li>Robert M. Fuhrer (IBM TJ Watson)</li><li>Jurgen J. Vinju (IBM TJ Watson and Centrum Wiskunde &amp; Informatica)</li><li>Arnold Lankamp (Centrum Wiskunde &amp; Informatica)</li><li>Michael Steindorfer (Centrum Wiskunde &amp; Informatica and TU Delft)</li><li>Davy Landman (Centrum Wiskunde &amp; Informatica and SWAT.engineering)</li><li>Paul Klint (Centrum Wiskunde &amp; Informatica)</li></ul><p>and occasional contributions from others please see <a href="https://github.com/usethesource/rascal-value/graphs/contributors" target="_blank" rel="noopener noreferrer">github's factual overview</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-in-the-near-future-for-vallang">What is in the near future for Vallang?<a class="hash-link" href="#what-is-in-the-near-future-for-vallang" title="Direct link to heading">‚Äã</a></h2><ol><li>Removal of the "annotations" feature, which is completely replaces by the "keyword fields" feature. The main differences between these features are:<ul><li>While they both offer extensibility to the set of names and typed fields of nodes and constructors, annotations can never influence <code>equals()</code> while keyword fields always do. </li><li>Syntactically the notation for keyword fields is more compact: <code>f()[@myAnno=1]</code> versus <code>f(myField=1)</code></li></ul></li><li>Further integration of the capabilities of <a href="http://www.usethesource.io/projects/capsule" target="_blank" rel="noopener noreferrer">Capsule</a> for persistent and optimized immutable collections under the hood of <code>IMap</code>, <code>ISet</code>, <code>IRelationAlgebra</code>:<ul><li>Reflexive relations with two indices (for both columns)</li><li>Heterogeneous collections of numbers (unboxing down to primitive types to safe space)</li><li>Smooth and incremental transitions from map to multimap representations</li></ul></li><li><code>IBag</code>, the <code>bag[&amp;T]</code> type</li></ol>]]></content>
        <author>
            <name>Jurgen Vinju</name>
            <uri>http://homepages.cwi.nl/~jurgenv</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Navigating the WordPress Plugin Landscape]]></title>
        <id>/2016/05/16/navigating-the-wordpress-plugin-landscape</id>
        <link href="https://rascal-mpl.org/blog/2016/05/16/navigating-the-wordpress-plugin-landscape"/>
        <updated>2016-05-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Helping PHP developers using Rascal-based code analysis.]]></summary>
        <content type="html"><![CDATA[<p>Helping PHP developers using Rascal-based code analysis.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">@inproceedings{hillsicpc2016,</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  author = "Mark Hills",</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  title = "Navigating the WordPress Plugin Landscape",</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  fulltext = "http://www.cs.ecu.edu/hillsma/publications/icpc-plugins-2016.pdf",</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  booktitle = "Proceedings of the 2015 {IEEE} 23rd International Conference on Program</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">               Comprehension"</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  year = 2016,</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  location = Austin,</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  month = may,</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>WordPress includes a plugin mechanism that allows user-provided code to be executed in response to specific system events and input/output requests. The large number of extension points provided by WordPress makes it challenging for new plugin developers to understand which extension points they should use, while the thousands of existing plugins make it hard to find existing extension point handler implementations for use as examples when creating a new plugin. In this paper, we present a lightweight analysis, supplemented with information mined from source comments and the webpages hosted by WordPress for each plugin, that guides developers to the right extension points and to existing implementations of handlers for these extension points. We also present empirical information about how plugins are used in practice, providing guidance to both tool and prospective plugin developers.</p>]]></content>
        <author>
            <name>Mark Hills</name>
            <uri>http://www.cs.ecu.edu/hillsma/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Performance Modeling of Maximal Sharing - Experience Report]]></title>
        <id>/2016/03/12/performance-modeling-of-maximal-sharing</id>
        <link href="https://rascal-mpl.org/blog/2016/03/12/performance-modeling-of-maximal-sharing"/>
        <updated>2016-03-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This paper won a Best Paper award at ICPE 2016 in Delft.]]></summary>
        <content type="html"><![CDATA[<p>This paper won a Best Paper award at ICPE 2016 in Delft. </p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">@inproceedings{icpe2016-steindorfer,</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"> author = {Michael Steindorfer and Jurgen J. Vinju.},</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"> title = {Performance Modeling of Maximal Sharing},</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"> booktitle = {7th ACM/SPEC International Conference on Performance Engineering (ICPE)},</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"> year = 2016,</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"> fulltext = "http://homepages.cwi.nl/~jurgenv/papers/ICPE16.pdf"</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>It is noticeably hard to predict the effect of optimization strategies in Java without implementing them. ‚ÄúMaximal sharing‚Äù (a.k.a. ‚Äúhash-consing‚Äù) is one of these strategies that may have great benefit in terms of time and space, or may have detrimental overhead. It all depends on the redundancy of data and the use of equality. We used a combination of new techniques to predict the impact of maximal sharing on existing code: Object Re- dundancy Profiling (ORP) to model the effect on memory when sharing all immutable objects, and Equals-Call Profil- ing (ECP) to reason about how removing redundancy impacts runtime performance. With comparatively low effort, using the MAximal SHaring Oracle (MASHO), a prototype pro- filer based on ORP and ECP, we can uncover optimization opportunities that otherwise would remain hidden. We report on the experience of applying MASHO to real and complex case: we conclude that ORP and ECP combined can accurately predict gains and losses of maximal sharing, and also that (by isolating variables) a cheap predictive model can sometimes provide more accurate information than an expensive experiment can.</p>]]></content>
        <author>
            <name>Micheal Steindorfer</name>
            <uri>https://github.com/msteindorfer</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Empirical analysis of the relationship between CC and SLOC]]></title>
        <id>/2016/01/01/empirical-analysis-of-the-relationship-between-CC-and-SLOC</id>
        <link href="https://rascal-mpl.org/blog/2016/01/01/empirical-analysis-of-the-relationship-between-CC-and-SLOC"/>
        <updated>2016-01-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Check out these two related articles on the empirical relation between the CC and SLOC source code metrics.]]></summary>
        <content type="html"><![CDATA[<p>Check out these two related articles on the empirical relation between the CC and SLOC source code metrics.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">@ARTICLE{jsep2015-landman,</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  author = { Davy Landman and Alexander Serebrenik and Eric Bouwers and Jurgen J. Vinju },</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  title = { {Empirical analysis of the relationship between CC and SLOC in a large corpus of Java methods and C functions} },</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  journal = { Journal of Software: Evolution and Process },</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  year = { 2015 },</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  doi = { 10.1002/smr.1760 },</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  fulltext  = "http://homepages.cwi.nl/~landman/docs/Landman2015-ccsloc-jsep2015-preprint.pdf",</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  datalink = { http://homepages.cwi.nl/~landman/jsep2015/ },</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">}</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">@INPROCEEDINGS{Landman2014,</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  author = { Davy Landman and Alexander Serebrenik and Jurgen J. Vinju },</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  title = { {Empirical analysis of the relationship between CC and SLOC in a large corpus of Java methods} },</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  booktitle = { 30th IEEE International Conference on Software Maintenance and</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  Evolution, ICSME 2014 },</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  year = { 2014 },</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  datalink = { http://homepages.cwi.nl/~landman/icsme2014/ },</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  fulltext= "http://homepages.cwi.nl/~landman/docs/Landman2014-ccsloc-icsme2014-preprint.pdf"</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Measuring the internal quality of source code is one of the traditional
goals of making software development into an engineering discipline.
Cyclomatic Complexity (CC) is an often used source code quality metric, next
to Source Lines of Code (SLOC). However, the use of the CC metric is
challenged by the repeated claim that CC is redundant with respect to SLOC
due to strong linear correlation.</p><p>We conducted an extensive literature study of the CC/SLOC correlation results.
Next, we tested correlation on large Java (17.6 M methods) and C (6.3 M
functions) corpora. Our results show that linear correlation between SLOC and CC
is only moderate as caused by increasingly high variance. We further observe
that aggregating CC and SLOC as well as performing a power transform improves
the correlation.</p><p>Our conclusion is that the observed linear correlation between CC and SLOC
of Java methods or C functions is not strong enough to conclude that CC is
redundant with SLOC. This conclusion contradicts earlier claims from
literature, but concurs with the widely accepted practice of measuring of CC
next to SLOC.</p>]]></content>
        <author>
            <name>Davy Landman</name>
            <uri>https://homepages.cwi.nl/~landman/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Optimizing Hash Tries]]></title>
        <id>/2015/10/30/optimizing-hash-tries</id>
        <link href="https://rascal-mpl.org/blog/2015/10/30/optimizing-hash-tries"/>
        <updated>2015-10-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hash-tries are the data-structure under Rascal's sets, maps and relations. These papers explain how they work and how we make them lean and fast on the JVM. Others have blogged about these results as well. The code can be found in the Capsule project.]]></summary>
        <content type="html"><![CDATA[<p>Hash-tries are the data-structure under Rascal's sets, maps and relations. These papers explain how they work and how we make them lean and fast on the JVM. <a href="https://blog.acolyer.org/2015/11/27/hamt/" target="_blank" rel="noopener noreferrer">Others</a> have blogged about these results as well. The code can be found in the <a href="http://www.usethesource.io/projects/capsule" target="_blank" rel="noopener noreferrer">Capsule project</a>.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">@inproceedings{oopsla2015,</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  title = {Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM Collections}</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  author = {Michael Steindorder and Jurgen J. Vinju}.</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  year = 2015,</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  booktitle = {Proceedings of the Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA)},</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  editor = {Patrick Eugster},</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  fulltext = "http://michael.steindorfer.name/publications/oopsla15.pdf",</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">}</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">@inproceedings{gpce14,</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"> author = {Steindorfer, Michael J. and Vinju, Jurgen J.},</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"> title = {Code Specialization for Memory Efficient Hash Tries},</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"> booktitle = {Proceedings of the 2014 International Conference on Generative Programming: Concepts and Experiences},</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"> series = {GPCE 2014},</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"> year = {2014},</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"> pages = {11--14},</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"> numpages = {4},</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"> doi = {10.1145/2658761.2658763},</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"> publisher = {ACM},</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"> fulltext = "http://michael.steindorfer.name/publications/gpce14.pdf"</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">} </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The data structures under-pinning collection API (e.g. lists, sets, maps) in the standard libraries of programming languages are used intensively in many applications. The standard libraries of recent Java Virtual Machine languages, such as Clojure or Scala, contain scalable and well-performing immutable collection data structures that are implemented as Hash-Array Mapped Tries (HAMTs). HAMTs already feature efficient lookup, insert, and delete operations, however due to their tree-based nature their memory footprints and the runtime performance of iteration and equality checking lag behind array-based counterparts. This particularly prohibits their application in programs which process larger data sets. In this paper, we propose changes to the HAMT design that increase the overall performance of immutable sets and maps. The resulting general purpose design increases cache locality and features a canonical representation. It outperforms Scala‚Äôs and Clojure‚Äôs data structure implementations in terms of memory footprint and runtime efficiency of iteration (1.3‚Äì 6.7 x) and equality checking (3‚Äì25.4 x).</p>]]></content>
        <author>
            <name>Jurgen Vinju</name>
            <uri>http://homepages.cwi.nl/~jurgenv</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[From imperative programming to functional programming]]></title>
        <id>/2015/03/02/from-imperative-to-functional</id>
        <link href="https://rascal-mpl.org/blog/2015/03/02/from-imperative-to-functional"/>
        <updated>2015-03-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Rascal features immutable data, but at the same time a number of language constructs which are a lot like "traditional" structured imperative programming: while, if, etc. Without going into the full power of these constructs in Rascal (featuring lexically scoped backtracking, for example) in this post we go into how in the same language we can program imperatively and functionally at the same time.]]></summary>
        <content type="html"><![CDATA[<p>Rascal features immutable data, but at the same time a number of language constructs which are a lot like "traditional" structured imperative programming: <code>while</code>, <code>if</code>, etc. Without going into the full power of these constructs in Rascal (featuring lexically scoped backtracking, for example) in this post we go into how <em>in the same language</em> we can program imperatively and functionally at the same time.</p><p>The reason Rascal features these two styles is that we want to make it easy for programmers who are used to the imperative paradigm to step into the language. More importantly, we want to make it easy to type classical textbook examples of program analysis and transformations pseudocode rather directly into Rascal syntax. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="a-story-about-even-numbers">A story about even numbers<a class="hash-link" href="#a-story-about-even-numbers" title="Direct link to heading">‚Äã</a></h3><p>Let's write a function that generates all the even numbers in a list up to a certain maximum. We will do it in a few alternative
ways: from very imperative to very declarative and some steps in between.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">list[int] even0(int max) {</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  list[int] result = [];</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  for (int i &lt;- [0..max])</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    if (i % 2 == 0)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      result += i;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  return result;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now lets remove the temporary type declarations:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">list[int] even1(int max) {</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  result = [];</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  for (i &lt;- [0..max])</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    if (i % 2 == 0)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      result += i;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  return result;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>To make the code shorter, we can inline the condition in the for loop:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">list[int] even2(int max) {</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  result = [];</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  for (i &lt;- [0..max], i % 2 == 0)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    result += i;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  return result;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In fact, for loops may produce lists as values, using the append statement:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">list[int] even3(int max) {</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  result = for (i &lt;- [0..max], i % 2 == 0)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    append i;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  return result;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>So now, the result temporary is not necessary anymore:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">list[int] even4(int max) {</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  return for (i &lt;- [0..max], i % 2 == 0)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">           append i;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This code is actually very close to a list comprehension already:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">list[int] even5(int max) {</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  return [ i | i &lt;- [0..max], i % 2 == 0];</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And now we can just define even using an expression only:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">list[int] even6(int max) = [i | i &lt;- [0..max], i % 2 == 0];</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Or, perhaps we like a set instead of a list:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">set[int] even7(int max) = {i | i &lt;- [0..max], i % 2 == 0};</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-just-happened">What just happened?<a class="hash-link" href="#what-just-happened" title="Direct link to heading">‚Äã</a></h3><p>In summary:</p><ul><li>We went from 5 lines of code to 1</li><li>We went from 3 control flow constructs (for, if, return) to 0</li><li>We introduced a list comprehension</li><li>All expressions have remained equal</li><li>Intermediate temporary variables dissappeared</li></ul><p>What did not happen is any magic. The code still executes the same "algorithm" if you will. The functional programming style in Rascal can be seen as a shorter notation for a more bloated use of imperative control flow constructs.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-usefulness-of-imperative-control-flow-constructs">The usefulness of imperative control flow constructs<a class="hash-link" href="#the-usefulness-of-imperative-control-flow-constructs" title="Direct link to heading">‚Äã</a></h3><p>Up front, Rascal's control flow constructs are more powerful than general purpose programming languages control flow constructs. They feature lexically scoped backtracking, lists of conditions, etc.</p><p>Even without those advanced features, it is sometimes very handy to split a computation in parts without having to introduce another function abstraction. While exploring a new algorithm, temporary variables can be printed and inspected at debug time, etc.</p><p>In Rascal, people often use imperative control flow to <em>explore</em> solutions or <em>copy</em> them from text books, and when they are happy with the algorithm they try and improve the formulation by finding the right functional abstractions. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-benefit-of-functional-abstraction-over-imperative-control-flow">The benefit of functional abstraction over imperative control flow<a class="hash-link" href="#the-benefit-of-functional-abstraction-over-imperative-control-flow" title="Direct link to heading">‚Äã</a></h3><p>The real benefits, above brevity and elegance, of the functional style over the imperative style are reusability and extensibility. Smaller functional abstractions are easier to reuse and easier to override. Also, using Rascal's dynamic dispatch using pattern matching (a.k.a. term rewriting) adding new options to algebraic data types can be complemented with adding new cases for functions. In the imperative style such an extension would imply editing existing code, while in the functional style this would not be necessary. See also this other <a href="http://www.rascal-mpl.org/from-functions-to-term-rewriting-and-back" target="_blank" rel="noopener noreferrer">post</a>.</p>]]></content>
        <author>
            <name>Jurgen Vinju</name>
            <uri>http://homepages.cwi.nl/~jurgenv</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Language Interaction Design of Concrete Syntax]]></title>
        <id>/2013/08/02/the-language-interaction-design-of-concrete-syntax</id>
        <link href="https://rascal-mpl.org/blog/2013/08/02/the-language-interaction-design-of-concrete-syntax"/>
        <updated>2013-08-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This post dives into some of the design decisions regarding the manipulation of parse trees and abstract syntax trees in Rascal using concrete syntax notation.]]></summary>
        <content type="html"><![CDATA[<p>This post dives into some of the design decisions regarding the manipulation of parse trees and abstract syntax trees in Rascal using <em>concrete syntax</em> notation. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="definitions">Definitions<a class="hash-link" href="#definitions" title="Direct link to heading">‚Äã</a></h2><p>What we call <em>concrete syntax</em> is a notation for syntax trees that is embedded into the expression notation of meta programming languages. This notation should be equal, or mostly equal, to the surface syntax of the language that is represented by the syntax trees, <em>and the expressions are still syntactically and statically checked for correctness</em>. As far as notations for syntax trees go, concrete syntax is a clear winner. Let's compare some expressions representing a piece of C code.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="concrete-syntax">Concrete syntax<a class="hash-link" href="#concrete-syntax" title="Direct link to heading">‚Äã</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">if (a &amp;&amp; b) { </span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  println("a and b"); </span><br></span><span class="token-line" style="color:#000000"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="lisp-s-expressions">Lisp S-expressions<a class="hash-link" href="#lisp-s-expressions" title="Direct link to heading">‚Äã</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">(if ((and (id "a") (id "b")) </span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    (block </span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      ((call (id "println") (args (strconst "a and b")))</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    )</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="xml">XML<a class="hash-link" href="#xml" title="Direct link to heading">‚Äã</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">&lt;if&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  &lt;and&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    &lt;id&gt;a&lt;/id&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    &lt;id&gt;b&lt;/id&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  &lt;/and&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  &lt;block&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    &lt;call&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      &lt;id&gt;println&lt;/id&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      &lt;args&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        &lt;strconst&gt;a and b&lt;/strconst&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">      &lt;/args&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    &lt;/call&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  &lt;/block&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">&lt;/if&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="yamljson">YAML/JSON<a class="hash-link" href="#yamljson" title="Direct link to heading">‚Äã</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">if:</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  - and:</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">     - id: a</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">     - id: b</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  - block:</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">     - call:</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        - id: println</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        - args:</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">          - strconst: a and b </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>For the degenerate case of a single node with no children, of course any abstract notation wins. As soon as we have nesting, even marginally interesting code snippets, however, concrete syntax wins by landslide in terms of brevity and cognitive overload.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="meta-variables">Meta Variables<a class="hash-link" href="#meta-variables" title="Direct link to heading">‚Äã</a></h2><p>The above examples showed only literal program fragments. One distinguishing feature, however, of concrete syntax is ...</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="history">History<a class="hash-link" href="#history" title="Direct link to heading">‚Äã</a></h2><p>The concrete syntax feature appeared first, as far as I know and please correct me if I am wrong, in the early 1980's in experimental meta programming systems and  algebraic specification systems. There was a concept of <em>mix fix</em> operator syntax where algebraic operators would not only be exclusively prefix, postfix or infix, but all at the same time. This would allow, for example, to define readable algebraic operators with arity larger than two such as <code>if _ then _ else _</code>. Some systems started to use BNF to define mix fix functions, and concrete syntax was born. In extreme cases, such as ASF+SDF any context-free grammar rule was allowed to be an operator, while in other systems more restrictions could apply. </p><p>If you are interested in what this all looked like, also in the years after that, the following is a list of names of systems that used or use mixfix operators or concrete syntax in some form or another:</p><ul><li>ASF+SDF</li><li>TXL</li><li>StrategoXT</li><li>Maude</li><li>ELAN</li><li>OBJ</li><li>Smarttools</li><li>Repleo</li><li>SugarJ</li><li>K</li></ul><p>People that I know by heart who published on the concrete syntax feature are Annika Aasa, Kent Petersson, Dan Synek, Chris Verhoef, Paul Klint, Eelco Visser, Peter Borovansky, Jan Rekers, Martin Bravenboer, Rob Vermaas, Radu Mereuta, Dorel Lucanu, Jeroen Arnoldus, and yours truly. There must be more.</p><p>Concrete syntax should not be confused with string or file templates, such as found in PHP-like template expanders. The difference is that such templates are flat strings that are not statically checked or parsed. With concrete syntax you can not write a pattern that will never match, and you can not write a pattern that will construct a syntactically incorrect output.</p><p>Concrete syntax is also strongly related to the older concept of <em>syntax macros</em> (1970's). The similarity is that with syntax macros the user can also define the syntax of functions. The difference is that syntax macros are always expanded into the host language, while with concrete syntax the objects can be manipulated in an arbitrary way, often not to expand into the host language but rather to output a transformed output form.  </p><p>So, concrete syntax is not new or novel in any way. It is a good idea nevertheless, and it comes with interesting language usability trade-offs.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="quotes">Quotes<a class="hash-link" href="#quotes" title="Direct link to heading">‚Äã</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="types">Types<a class="hash-link" href="#types" title="Direct link to heading">‚Äã</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="rascal">Rascal<a class="hash-link" href="#rascal" title="Direct link to heading">‚Äã</a></h2>]]></content>
        <author>
            <name>Jurgen Vinju</name>
            <uri>http://homepages.cwi.nl/~jurgenv</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A DSL in 36 lines of code]]></title>
        <id>/2013/07/29/dsl-in-36-lines-of-code</id>
        <link href="https://rascal-mpl.org/blog/2013/07/29/dsl-in-36-lines-of-code"/>
        <updated>2013-07-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[One of the goals of Rascal is to allow the definition of Domain-Specific Languages.]]></summary>
        <content type="html"><![CDATA[<p>One of the goals of Rascal is to allow the definition of <a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener noreferrer">Domain-Specific Languages</a>.
In this small post we give a flavor of how you can use Rascal to define the syntax of a DSL, a simple semantic check and how to compile the DSL to Java.</p><p>The following example shows how to define a simple DSL for state machines. It includes a parser, a check for unreachable states and a compiler to Java code. </p><p>The grammar of the DSL is defined using Rascal's grammar formalism which is fully integrated in the language.
Shown below is the syntax definition of a simple state machine language, inspired by  Martin Fowler's example language for <a href="http://www.informit.com/articles/article.aspx?p=1592379" target="_blank" rel="noopener noreferrer">gothic security</a>.</p><div class="language-rascal codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rascal codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">module</span><span class="token plain"> Syntax</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">extend</span><span class="token plain"> lang::std::Layout;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">extend</span><span class="token plain"> lang::std::Id;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">start</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">syntax</span><span class="token plain"> Machine = machine: State+ states;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">syntax</span><span class="token plain"> State = @Foldable state: "state" Id name Trans* out;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">syntax</span><span class="token plain"> Trans = trans: Id event ":" Id to;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>A state machine consists of a number of named state declarations, where each state contains transitions to other states (identified by name) when a certain event happens.
The grammar reuses identifier syntax and whitespace convention from the standard library.
Each non-terminal defines a <em>type</em>. Parse trees are typed values like any other value in Rascal.
As a result, you can write functions that process such trees.
An example would be a semantic check on state machines, such as finding all unreachable states: </p><div class="language-rascal codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rascal codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">module</span><span class="token plain"> Analyze</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">import</span><span class="token plain"> Syntax;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">set</span><span class="token plain">[Id] unreachable(Machine m) {</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  r = { &lt;q1,q2&gt; | (State)`state &lt;Id q1&gt; &lt;Trans* ts&gt;` &lt;- m.states, </span><br></span><span class="token-line" style="color:#000000"><span class="token plain">                  (Trans)`&lt;Id _&gt;: &lt;Id q2&gt;` &lt;- ts }+;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  qs = [ q.name | q &amp;- m.states ];</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><span class="token keyword" style="color:rgb(0, 0, 255)">return</span><span class="token plain"> { q | q &lt;- qs, q </span><span class="token keyword" style="color:rgb(0, 0, 255)">notin</span><span class="token plain"> r[qs[0]] };</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>To check for unreachable states, we first create a binary relation between states using a comprehension.
This comprehension uses <em>concrete syntax</em> matching to find a state's transitions.
The pattern between backticks is written in the object language, which in this case is the statemachine language defined in the grammar above (Note the embedded syntax highlighting!).
The variables <code>q1</code> and <code>ts</code> in between <code>&lt;</code> and <code>&gt;</code> are bound for each state that is found in the machine <code>m</code>.
A similar pattern is used to find the target state <code>q2</code> is found in each transition in <code>ts</code>.
The post-fix <code>+</code> then computes the transitive closure of the relation. </p><p>The relation <code>r</code> is based on the transitions in a state machine.
This means that it does not include declared (final) states which have no outgoing transitions.
We collect the names of all defined states in <code>qs</code> , again using a comprehension. </p><p>The initial state is (conventionally) defined to be the state that is declared first.
An unreachable state is then defined as a state that is not in the right image of the initial state in the transitive closure of the transition relation.
This is exactly what is described by the last comprehension!
The notation <code>r[x]</code>, where <code>r</code> is a relation  is short hand for <code>{ y | &lt;x, y&gt; &lt;- r }</code>.</p><p>There are various ways of compiling a DSL to target code in Rascal. The simplest is using string templates and generate code in a general purpose language. The following snippet shows the generation of a Java while loop to execute a state machine.</p><div class="language-rascal codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rascal codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">module</span><span class="token plain"> Compile</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">import</span><span class="token plain"> Syntax;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">str</span><span class="token plain"> compile(Machine m) =</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  "</span><span class="token keyword" style="color:rgb(0, 0, 255)">while</span><span class="token plain"> (</span><span class="token keyword" style="color:rgb(0, 0, 255)">true</span><span class="token plain">) {</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  '  event = input.next();</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  '  </span><span class="token keyword" style="color:rgb(0, 0, 255)">switch</span><span class="token plain"> (current) { </span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  '    &lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">for</span><span class="token plain"> (q &lt;- m.states) {&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  '    </span><span class="token keyword" style="color:rgb(0, 0, 255)">case</span><span class="token plain"> \"&lt;q.name&gt;\":</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  '      &lt;</span><span class="token keyword" style="color:rgb(0, 0, 255)">for</span><span class="token plain"> (t &lt;- q.out) {&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  '      </span><span class="token keyword" style="color:rgb(0, 0, 255)">if</span><span class="token plain"> (event.equals(\"&lt;t.event&gt;\"))</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  '        current = \"&lt;t.to&gt;\";</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  '      &lt;}&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  '      </span><span class="token keyword" style="color:rgb(0, 0, 255)">break</span><span class="token plain">;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  '    &lt;}&gt;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  '  }</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  '}"; </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>String templates allow arbitrary Rascal values and control-flow constructs to be interpolated in string literals. Note how this code does not use concrete matching, but instead uses the labels defined in the grammar (i.e., <code>states</code>, <code>out</code>, <code>event</code>, and <code>to</code>).</p><p>And that's it! A complete DSL in 36 lines of code. Of course, the parser and the <code>unreachable</code> and <code>compile</code> functions can be connected to the IDE. This provides custom syntax highlighting, error-marking and automatic building in state machine editors.</p>]]></content>
        <author>
            <name>Tijs van der Storm</name>
            <uri>https://homepages.cwi.nl/~storm/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[From functions to term rewriting and back in Rascal]]></title>
        <id>/2013/05/15/from-functions-to-term-rewriting-and-back</id>
        <link href="https://rascal-mpl.org/blog/2013/05/15/from-functions-to-term-rewriting-and-back"/>
        <updated>2013-05-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Here's a nifty design element from Rascal that I personally like: functions are actually rewrite rules. The bottom line here is that pattern matching drives dynamic dispatch which results in openly extensible meta programs.]]></summary>
        <content type="html"><![CDATA[<p>Here's a nifty design element from Rascal that I personally like: functions are actually rewrite rules. The bottom line here is that pattern matching drives dynamic dispatch which results in openly extensible meta programs.</p><p>The design choice seems obvious for people who have been programming in ASF+SDF, Stratego and TXL who argue that rewrite rules and strategies were actually just functions.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="complete-functions">Complete functions<a class="hash-link" href="#complete-functions" title="Direct link to heading">‚Äã</a></h2><p>In Rascal we write functions in a Java/C/C# like syntax:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">int fac(int n) {</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  if (n == 0)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    return 1;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  else</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    return n * f(n - 1);</span><br></span><span class="token-line" style="color:#000000"><span class="token plain"> }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Or slightly shorter and more elegant we could write:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">int f(int n) = n == 0 ? 1 : n * f(n - 1);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In fact, function definitions are just rewrite rules with a funny syntax, the <code>int n</code> is actually a pattern that matches integers only and binds them to the variable <code>n</code>. This means we can write more concrete patterns and separate the case distinction:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">int f(0) = 1;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">default int f(int n) = n * f(n - 1);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The default keyword here indicates to try this alternative only after the other ones, which is obligatory here since Rascal's rules are statically mutually non-overlapping.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="functions-with-normal-forms">Functions with normal forms<a class="hash-link" href="#functions-with-normal-forms" title="Direct link to heading">‚Äã</a></h2><p>So far we have written a function which is total, i.e. it has to provide a result for all elements of the parameter types. To make this more rewriting-like, where we have normal forms, consider the interaction with constructor functions in the following example:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">data Bool</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  = t()</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  | f()</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  | and(Bool l, Bool r)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  |   or(Bool l, Bool r)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  ;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><br></span><span class="token-line" style="color:#000000"><span class="token plain">Bool and(f(), Bool _) = f();</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">Bool and(t(), Bool b) = b;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Here we see the <code>and</code> function defined for two cases, where the first argument matches either <code>t()</code> or <code>f()</code>. It is not defined for any other cases, for example the first argument could be an <code>or(t(),t())</code>, so in this sense it is partial. However, the data definition provides a <code>default</code> case for the and function, namely to construct the <code>and</code> term.</p><p>For those of us who are used to rewrite rules, we see rules that are labeled by the sort of the terms that are being rewritten.
Here are some example expressions executed in the console:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">rascal&gt;and(t(),t())</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">Bool: t();</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">rascal&gt;and(f(),t())</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">Bool: f();</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">rascal&gt;and(or(t(),t()),t())</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">Bool: and(or(t(),t()),t())</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="modularity-by-open-extensibility">Modularity by open extensibility<a class="hash-link" href="#modularity-by-open-extensibility" title="Direct link to heading">‚Äã</a></h2><p>The key benefit of being able to use pattern matching for dynamic dispatch, is extensibility. Suppose we add "maybe" to our logical language in a separate module. This is possible since data signatures are extensible:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">data Bool = maybe();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now we need to reconsider the semantics of the <code>and</code> function, and without changing the original definitions for <code>and</code> we simply type these extensions to implement three-valued logic:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">Bool and(maybe(), maybe()) = maybe()</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">Bool and(maybe(), true()) = maybe()</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">Bool and(maybe(), false()) = false()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="pattern-matching-galore">Pattern matching galore<a class="hash-link" href="#pattern-matching-galore" title="Direct link to heading">‚Äã</a></h2><p>In Rascal we have a powerful pattern matching operator suite, including:</p><ul><li>list matching (associative), for example: <code>[*_, elem, _*, elem, _*]</code></li><li>set matching (commutative, associative, idempotent), for example: <code>f({e,*other, f({e,*nested})})</code></li><li>deep matching (recursive), as in <code>/t()</code> </li><li>negative matching, as in <code>!and(_,_)</code></li><li>non-linear matching (see above list matching example)</li><li>etc.</li></ul><p>These operators may occur in the parameter positions of function definitions, just as they can in switch, visit, {list,set,map} comprehensions, loops, conditionals, etc. As such they give a very broad means to the programmer on how to dispatch between cases. This is only limited by the rule that patterns needs to be mutually exclusive for a certain function.</p><p>Here is a function to remove double elements from a list, term rewriting style:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">list[value] dup([*value a, value e, *value b, e, *value c]) = dup([*a, e, *b, *c])</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">default list[value] dup(list[value] l) = l;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And here is the same function but type parametrized:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">list[&amp;T] dup([*&amp;T a, &amp;T e, *&amp;T b, e, *&amp;T c]) = dup([*a, e, *b, *c])</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">default list[&amp;T] dup(list[&amp;T] l) = l</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="from-unlabeled-to-labeled-rules">From unlabeled to labeled rules<a class="hash-link" href="#from-unlabeled-to-labeled-rules" title="Direct link to heading">‚Äã</a></h2><p>The big issue with rewrite rules is that they are applied automatically and this is sometimes cumbersome. Functions do not have this issue. Perhaps we should not have defined the boolean semantics so directly, and have wrapped it in a function:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">data Bool</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  = t()</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  | f()</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  | and(Bool l, Bool r)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  | or(Bool l, Bool r)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  ;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">  </span><br></span><span class="token-line" style="color:#000000"><span class="token plain">Bool eval(and(f(), Bool _)) = f();</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">Bool eval(and(t(), Bool b)) = b;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This reads as labeled rules, we have two rules called "eval" that could be applied but will never be applied automatically unless somebody calls them as a function.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">rascal&gt;eval(and(f(),t()))</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">Bool: f()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Or, if we wish to apply this rule bottom-up through an entire boolean expression:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">rascal&gt;visit (and(and(f(),t()),t())) { case Bool b =&gt; eval(b); }</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">Bool: f();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In the above we used visit to automate the recursion, but we could have manually implemented the recursion as well:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">Bool eval(and(t(), Bool b)) = eval(b);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="higher-order-functions-are-higher-order-rewrite-rules">Higher order functions are higher-order rewrite rules<a class="hash-link" href="#higher-order-functions-are-higher-order-rewrite-rules" title="Direct link to heading">‚Äã</a></h2><p>Since our "rules" are actually just functions, we can pass them and combine them just like in any other language that supports higher-order functions. This brings us dangerously close to the expressive power of what term rewriting people call strategies. Anonymous functions (lambdas) can use pattern matching just as any other function by the way.
So we can write expressions such as <code>(f + g)(x)</code> where we non-deterministically choose between applying <code>f</code> and <code>g</code> using pattern matching.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-note-on-types">A note on types<a class="hash-link" href="#a-note-on-types" title="Direct link to heading">‚Äã</a></h2><p>Rascal is a statically typed language, supporting type inference only within the body of functions. We made this choice in order to help keep bodies of functions slim, but without introducing difficult to understand error messages that can be caused by a too smart type inference algorithm. </p><p>This is the reason why all pattern variables in function definitions need to be typed while in normal patterns (nested in the bodies of functions) the types of pattern variables is inferred.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">‚Äã</a></h2><p>These were some thoughts on the correspondence between functions and rewrite rules as we put it into Rascal.  We came from a term rewriting world and wanted to keep using their power of pattern matching and open extensibility. Now we are in a world of functional and imperative programming where we can control their application with the flick of a for loop.</p>]]></content>
        <author>
            <name>Jurgen Vinju</name>
            <uri>http://homepages.cwi.nl/~jurgenv</uri>
        </author>
    </entry>
</feed>