"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[58017],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,y=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return t?a.createElement(y,o(o({ref:n},p),{},{components:t})):a.createElement(y,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},34533:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(83117),r=(t(67294),t(3905));const i={title:"Syntax"},o=void 0,s={unversionedId:"Recipes/Languages/Pico/Syntax/index",id:"Recipes/Languages/Pico/Syntax/index",title:"Syntax",description:"Synopsis",source:"@site/docs/Recipes/Languages/Pico/Syntax/index.md",sourceDirName:"Recipes/Languages/Pico/Syntax",slug:"/Recipes/Languages/Pico/Syntax/",permalink:"/docs/Recipes/Languages/Pico/Syntax/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Recipes/Languages/Pico/Syntax/index.md",tags:[],version:"current",frontMatter:{title:"Syntax"},sidebar:"tutorialSidebar",previous:{title:"Load",permalink:"/docs/Recipes/Languages/Pico/Load/"},next:{title:"Typecheck",permalink:"/docs/Recipes/Languages/Pico/Typecheck/"}},l={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Usage",id:"usage",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Concrete syntax for Pico."),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("h4",{id:"types"},"Types"),(0,r.kt)("h4",{id:"function"},"Function"),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'// tag::module[]\nmodule demo::lang::Pico::Syntax\n\nimport ParseTree;\n\nlexical Id  = [a-z][a-z0-9]* !>> [a-z0-9];\nlexical Natural = [0-9]+ ;\nlexical String = "\\"" ![\\"]*  "\\"";\n\nlayout Layout = WhitespaceAndComment* !>> [\\ \\t\\n\\r%];\n\nlexical WhitespaceAndComment \n   = [\\ \\t\\n\\r]\n   | @category="Comment" ws2: "%" ![%]+ "%"\n   | @category="Comment" ws3: "%%" ![\\n]* $\n   ;\n\nstart syntax Program \n   = program: "begin" Declarations decls {Statement  ";"}* body "end" ;\n\nsyntax Declarations \n   = "declare" {Declaration ","}* decls ";" ;  \n \nsyntax Declaration = decl: Id id ":" Type tp;\n\nsyntax Type \n   = natural:"natural" \n   | string :"string" \n   ;\n\nsyntax Statement \n   = asgStat: Id var ":="  Expression val \n   | ifElseStat: "if" Expression cond "then" {Statement ";"}*  thenPart "else" {Statement ";"}* elsePart "fi"\n   | whileStat: "while" Expression cond "do" {Statement ";"}* body "od"\n  ;  \n     \nsyntax Expression \n   = id: Id name\n   | strCon: String string\n   | natCon: Natural natcon\n   | bracket "(" Expression e ")"\n   > left conc: Expression lhs "||" Expression rhs\n   > left ( add: Expression lhs "+" Expression rhs\n          | sub: Expression lhs "-" Expression rhs\n          )\n  ;\n\npublic start[Program] program(str s) {\n  return parse(#start[Program], s);\n}\n\npublic start[Program] program(str s, loc l) {\n  return parse(#start[Program], s, l);\n} \n// end::module[]\n\n')),(0,r.kt)("p",null,"Notes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Id"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Natural")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"String")," are the basic lexical tokens of the Pico language."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Layout")," defines the white space and comments that may occur in a Pico program."),(0,r.kt)("li",{parentName:"ul"},"Some lexical rules are labeled with ",(0,r.kt)("inlineCode",{parentName:"li"},'@category="Comment"'),". This is for the benefit of syntax highlighting."),(0,r.kt)("li",{parentName:"ul"},"The start symbol of the Pico grammar is called ",(0,r.kt)("inlineCode",{parentName:"li"},"Program"),"."),(0,r.kt)("li",{parentName:"ul"},"The rules for ",(0,r.kt)("inlineCode",{parentName:"li"},"Expression")," describe the priority and associativity of the operators: all operators are left-associative and ",(0,r.kt)("inlineCode",{parentName:"li"},"||")," has a higher priority then ",(0,r.kt)("inlineCode",{parentName:"li"},"+")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"-"),"."),(0,r.kt)("li",{parentName:"ul"},"Two auxiliary functions ",(0,r.kt)("inlineCode",{parentName:"li"},"program")," are defined that parse a given string or a given location as Pico program.")),(0,r.kt)("h4",{id:"benefits"},"Benefits"))}u.isMDXComponent=!0}}]);