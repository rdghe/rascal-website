"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[36978],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},c=Object.keys(e);for(a=0;a<c.length;a++)r=c[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)r=c[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),i=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=i(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,c=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=i(r),d=n,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||c;return r?a.createElement(f,l(l({ref:t},p),{},{components:r})):a.createElement(f,l({ref:t},p))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=r.length,l=new Array(c);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var i=2;i<c;i++)l[i]=r[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},11533:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>i});var a=r(83117),n=(r(67294),r(3905));const c={title:"lang::rascal::scrap::Patch"},l=void 0,o={unversionedId:"Library/lang/rascal/scrap/Patch",id:"Library/lang/rascal/scrap/Patch",title:"lang::rascal::scrap::Patch",description:"Usage",source:"@site/docs/Library/lang/rascal/scrap/Patch.md",sourceDirName:"Library/lang/rascal/scrap",slug:"/Library/lang/rascal/scrap/Patch",permalink:"/docs/Library/lang/rascal/scrap/Patch",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/lang/rascal/scrap/Patch.md",tags:[],version:"current",frontMatter:{title:"lang::rascal::scrap::Patch"},sidebar:"tutorialSidebar",previous:{title:"lang::rascal::scrap",permalink:"/docs/Library/lang/rascal/scrap/"},next:{title:"lang::rascal::syntax",permalink:"/docs/Library/lang/rascal/syntax/"}},s={},i=[{value:"Usage",id:"usage",level:4},{value:"function commands2patch",id:"lang-rascal-scrap-Patch-commands2patch",level:2},{value:"function resultSource",id:"lang-rascal-scrap-Patch-resultSource",level:2}],p={toc:i};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"usage"},"Usage"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"import lang::rascal::scrap::Patch;")),(0,n.kt)("h2",{id:"lang-rascal-scrap-Patch-commands2patch"},"function commands2patch"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"lrel[loc, str] commands2patch(start[Commands] pt)"))),(0,n.kt)("p",null,"Convert a sequence of commands to a textual patch value to be applied to the editor\ncontaining the commands. The patch is based on the results of evaluating the commands\nand comparing the outputs with what is in the source (pt) itself. Differences in command\noutput are reconciled through the patch. "),(0,n.kt)("p",null,'A patch is list of tuples from loc to str. Loc to "" represents removal.\nA loc with length=0 to x represents insertion of x.'),(0,n.kt)("h2",{id:"lang-rascal-scrap-Patch-resultSource"},"function resultSource"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"tuple[bool, str] resultSource(tuple[str val, str out, str err] output)"))))}u.isMDXComponent=!0}}]);