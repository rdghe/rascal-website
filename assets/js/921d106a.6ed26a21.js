"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[67250],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),c=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),f=a,d=m["".concat(o,".").concat(f)]||m[f]||u[f]||i;return t?r.createElement(d,l(l({ref:n},p),{},{components:t})):r.createElement(d,l({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},23387:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(83117),a=(t(67294),t(3905));const i={title:"Even"},l=void 0,s={unversionedId:"Recipes/Basic/Even/index",id:"Recipes/Basic/Even/index",title:"Even",description:"Synopsis",source:"@site/docs/Recipes/Basic/Even/index.md",sourceDirName:"Recipes/Basic/Even",slug:"/Recipes/Basic/Even/",permalink:"/docs/Recipes/Basic/Even/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Recipes/Basic/Even/index.md",tags:[],version:"current",frontMatter:{title:"Even"},sidebar:"tutorialSidebar",previous:{title:"Bubble",permalink:"/docs/Recipes/Basic/Bubble/"},next:{title:"Factorial",permalink:"/docs/Recipes/Basic/Factorial/"}},o={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Benefits",id:"benefits",level:4},{value:"Pitfalls",id:"pitfalls",level:4}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Produce a list of even numbers."),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"Let's write a function that generates all the even numbers in a list up to a certain maximum. We will do it in a few alternative\nways: from very imperative to very declarative and some steps in between."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>list[int] even0(int max) {\n>>>>>>>  list[int] result = [];\n>>>>>>>  for (int i <- [0..max])\n>>>>>>>    if (i % 2 == 0)\n>>>>>>>      result += i;\n>>>>>>>  return result;\n>>>>>>>}\nlist[int] (int): function(|prompt:///|(0,135,<1,0>,<7,1>))\nrascal>even0(25);\nlist[int]: [0,2,4,6,8,10,12,14,16,18,20,22,24]\n")),(0,a.kt)("p",null,"Now lets remove the temporary type declarations:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>list[int] even1(int max) {\n>>>>>>>  result = [];\n>>>>>>>  for (i <- [0..max])\n>>>>>>>    if (i % 2 == 0)\n>>>>>>>      result += i;\n>>>>>>>  return result;\n>>>>>>>}\nlist[int] (int): function(|prompt:///|(0,121,<1,0>,<7,1>))\nrascal>even1(25);\nlist[int]: [0,2,4,6,8,10,12,14,16,18,20,22,24]\n")),(0,a.kt)("p",null,"To make the code shorter, we can inline the condition in the for loop:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>list[int] even2(int max) {\n>>>>>>>  result = [];\n>>>>>>>  for (i <- [0..max], i % 2 == 0)\n>>>>>>>    result += i;\n>>>>>>>  return result;\n>>>>>>>}\nlist[int] (int): function(|prompt:///|(0,111,<1,0>,<6,1>))\nrascal>even2(25);\nlist[int]: [0,2,4,6,8,10,12,14,16,18,20,22,24]\n")),(0,a.kt)("p",null,"In fact, for loops may produce lists as values, using the append statement:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>list[int] even3(int max) {\n>>>>>>>  result = for (i <- [0..max], i % 2 == 0)\n>>>>>>>    append i;\n>>>>>>>  return result;\n>>>>>>>}\nlist[int] (int): function(|prompt:///|(0,102,<1,0>,<5,1>))\nrascal>even3(25);\nlist[int]: [0,2,4,6,8,10,12,14,16,18,20,22,24]\n")),(0,a.kt)("p",null,"So now, the result temporary is not necessary anymore:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>list[int] even4(int max) {\n>>>>>>>  return for (i <- [0..max], i % 2 == 0)\n>>>>>>>           append i;\n>>>>>>>}\nlist[int] (int): function(|prompt:///|(0,90,<1,0>,<4,1>))\nrascal>even4(25);\nlist[int]: [0,2,4,6,8,10,12,14,16,18,20,22,24]\n")),(0,a.kt)("p",null,"This code is actually very close to a list comprehension already:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>list[int] even5(int max) {\n>>>>>>>  return [ i | i <- [0..max], i % 2 == 0];\n>>>>>>>}\nlist[int] (int): function(|prompt:///|(0,71,<1,0>,<3,1>))\nrascal>even5(25);\nlist[int]: [0,2,4,6,8,10,12,14,16,18,20,22,24]\n")),(0,a.kt)("p",null,"And now we can just define ",(0,a.kt)("inlineCode",{parentName:"p"},"even")," using an expression only:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>list[int] even6(int max) = [i | i <- [0..max], i % 2 == 0];\nlist[int] (int): function(|prompt:///|(0,59,<1,0>,<1,59>))\nrascal>even6(25);\nlist[int]: [0,2,4,6,8,10,12,14,16,18,20,22,24]\n")),(0,a.kt)("p",null,"Or, perhaps we prefer creating a set instead of a list:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>set[int] even7(int max) = {i | i <- [0..max], i % 2 == 0};\nset[int] (int): function(|prompt:///|(0,58,<1,0>,<1,58>))\nrascal>even7(25);\nset[int]: {10,16,8,14,20,2,4,6,24,12,22,18,0}\n")),(0,a.kt)("h4",{id:"benefits"},"Benefits"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You can program in for loops and use temporary variables if you like."),(0,a.kt)("li",{parentName:"ul"},"Comprehensions are shorter and more powerful."),(0,a.kt)("li",{parentName:"ul"},"There are comprehensions for lists, sets, and maps")),(0,a.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Trainwreck alert: if you start putting too many conditions in a single for loop or comprehension the code may become unreadable.")))}u.isMDXComponent=!0}}]);