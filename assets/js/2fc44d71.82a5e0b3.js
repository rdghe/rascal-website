"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[42722],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),d=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,f=u["".concat(i,".").concat(m)]||u[m]||p[m]||l;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=u;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<l;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},35072:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var r=t(83117),a=(t(67294),t(3905));const l={title:"Colored Trees"},o=void 0,s={unversionedId:"Recipes/Common/ColoredTrees/index",id:"Recipes/Common/ColoredTrees/index",title:"Colored Trees",description:"Synopsis",source:"@site/docs/Recipes/Common/ColoredTrees/index.md",sourceDirName:"Recipes/Common/ColoredTrees",slug:"/Recipes/Common/ColoredTrees/",permalink:"/docs/Recipes/Common/ColoredTrees/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Recipes/Common/ColoredTrees/index.md",tags:[],version:"current",frontMatter:{title:"Colored Trees"},sidebar:"tutorialSidebar",previous:{title:"Call Lifting",permalink:"/docs/Recipes/Common/CallLifting/"},next:{title:"Count Constructors",permalink:"/docs/Recipes/Common/CountConstructors/"}},i={},d=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4},{value:"Pitfalls",id:"pitfalls",level:4}],c={toc:d};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Computations on binary trees."),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"We consider binary trees---trees with exactly two children---that have integers as their leaves.\nOur trees can have red and black nodes and we want to perform the following operations on them:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Count the number of red nodes."),(0,a.kt)("li",{parentName:"ul"},"Compute the sum of all the integers that occur in the leaves."),(0,a.kt)("li",{parentName:"ul"},"Extend the tree data type with green nodes."),(0,a.kt)("li",{parentName:"ul"},"Replace all red nodes by green ones.")),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"The definition of ColoredTrees is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"\n//START\n// tag::module[]\nmodule demo::common::ColoredTrees\n\n// Define ColoredTrees with red and black nodes and integer leaves\n\n\n\ndata ColoredTree = leaf(int N) // <1>\n                 | red(ColoredTree left, ColoredTree right) \n                 | black(ColoredTree left, ColoredTree right);\n\npublic ColoredTree  rb = red(black(leaf(1), red(leaf(2),leaf(3))), black(leaf(3), leaf(4)));\n          \n// Count the number of red nodes\n          \nint cntRed(ColoredTree t) {\n   int c = 0;\n   visit(t) {\n     case red(_,_): c = c + 1; // <2>\n   };\n   return c;\n}\nint addLeaves(ColoredTree t) {\n   int c = 0;\n   visit(t) {\n     case leaf(int N): c = c + N; // <3>\n   };\n   return c;\n}\n\ntest bool tstAddLeaves() = addLeaves(rb) == 13;\n\n// Add green nodes to ColoredTree\n\ndata ColoredTree = green(ColoredTree left, ColoredTree right); // <4>\n\n// Transform red nodes into green nodes\n\nColoredTree makeGreen(ColoredTree t) {\n   return visit(t) {\n     case red(l, r) => green(l, r) // <5>\n   };\n}\n// end::module[]\n\ntest bool tstMakeGreen() = makeGreen(rb) == green(black(leaf(1),green(leaf(2),leaf(3))),black(leaf(3),leaf(4)));\n\n")),(0,a.kt)("p",null,"<1> We define the data type of ",(0,a.kt)("inlineCode",{parentName:"p"},"ColoredTrees")," with constructors ",(0,a.kt)("inlineCode",{parentName:"p"},"leaf"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"red")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"black"),"."),(0,a.kt)("p",null,"<2> ",(0,a.kt)("inlineCode",{parentName:"p"},"cntRed")," counts all red nodes by visiting all nodes and incrementing\nthe counter ",(0,a.kt)("inlineCode",{parentName:"p"},"c")," for each red one."),(0,a.kt)("p",null,"<3> ",(0,a.kt)("inlineCode",{parentName:"p"},"addLeaves")," visits all nodes and adds the integers in each leaf node."),(0,a.kt)("p",null,"<4> ",(0,a.kt)("inlineCode",{parentName:"p"},"coloredTrees")," are extended with a new constructor ",(0,a.kt)("inlineCode",{parentName:"p"},"green"),"."),(0,a.kt)("p",null,"<5> ",(0,a.kt)("inlineCode",{parentName:"p"},"makeGreen")," visits all nodes and turns red nodes in green ones."),(0,a.kt)("p",null,"We can now explore ColoredTrees:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import demo::common::ColoredTrees;\nok\nrascal>rb = red(black(leaf(1), red(leaf(2),leaf(3))), black(leaf(3), leaf(4)));\nColoredTree: red(\n  black(\n    leaf(1),\n    red(\n      leaf(2),\n      leaf(3))),\n  black(\n    leaf(3),\n    leaf(4)))\n")),(0,a.kt)("p",null,"Count the red nodes in ",(0,a.kt)("inlineCode",{parentName:"p"},"rb"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>cntRed(rb);\nint: 2\n")),(0,a.kt)("p",null,"and compute the sum of all leaves:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>addLeaves(rb);\nint: 13\n")),(0,a.kt)("p",null,"Finally, we convert all red nodes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>makeGreen(rb);\nColoredTree: green(\n  black(\n    leaf(1),\n    green(\n      leaf(2),\n      leaf(3))),\n  black(\n    leaf(3),\n    leaf(4)))\n")),(0,a.kt)("h4",{id:"benefits"},"Benefits"),(0,a.kt)("p",null,"This example illustrates the fully automatic visiting of the elements of a structured data type.\nCompare this with the traditional programming style in which a switch statement is used to determine\nthe constructor and recursion is used to visit substructures. This style becomes particularly cumbersome\nfor data types with large numbers of constructors such as, for instance, abstract syntax trees for real\nprogramming languages."),(0,a.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,a.kt)("p",null,"The visit statement is based on a new paradigm one has to learn."))}p.isMDXComponent=!0}}]);