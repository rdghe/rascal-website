"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[61033],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1997:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(83117),a=(n(67294),n(3905));const o={title:"Count Constructors"},s=void 0,i={unversionedId:"Recipes/Common/CountConstructors/index",id:"Recipes/Common/CountConstructors/index",title:"Count Constructors",description:"Synopsis",source:"@site/docs/Recipes/Common/CountConstructors/index.md",sourceDirName:"Recipes/Common/CountConstructors",slug:"/Recipes/Common/CountConstructors/",permalink:"/docs/Recipes/Common/CountConstructors/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Recipes/Common/CountConstructors/index.md",tags:[],version:"current",frontMatter:{title:"Count Constructors"},sidebar:"tutorialSidebar",previous:{title:"Colored Trees",permalink:"/docs/Recipes/Common/ColoredTrees/"},next:{title:"Derivative",permalink:"/docs/Recipes/Common/Derivative/"}},c={},l=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Generic function that can count constructors in a value of any algebraic data type."),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"In ",(0,a.kt)("a",{parentName:"p",href:"../../../Recipes/Common/ColoredTrees"},"colored trees"),", we have seen a function that can count the number of red nodes in a ",(0,a.kt)("inlineCode",{parentName:"p"},"ColoredTree"),".\nIs it possible to define a function that can count constructors in a value of any algerbaic data type?"),(0,a.kt)("p",null,"We exploit the subtype relation (see ",(0,a.kt)("a",{parentName:"p",href:"../../../RascalConcepts/StaticTyping"},"Static Typing"),")\nbetween ",(0,a.kt)("a",{parentName:"p",href:"../../../Rascal/Declarations/AlgebraicDataType"},"algebraic data types"),"s\nand the type ",(0,a.kt)("a",{parentName:"p",href:"../../../Rascal/Expressions/Values/Node"},"node")," to achieve this."),(0,a.kt)("p",null,"In real applications this becomes relevant when counting, for instance, statement types in programs."),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},'module demo::common::CountConstructors\n\nimport Node;\nimport Map;\n\ndata ColoredTree = leaf(int N)      \n                 | red(ColoredTree left, ColoredTree right) \n                 | black(ColoredTree left, ColoredTree right);\n                 \npublic ColoredTree CT = red(black(leaf(1), red(leaf(2),leaf(3))), black(leaf(3), leaf(4)));\n\n// Define a Card data type.\n             \ndata Suite = hearts() | diamonds() | clubs() | spades();\n\ndata Card =  two(Suite s) | three(Suite s) | four(Suite s) | five(Suite s) |\n             six(Suite s) | seven(Suite s) | eight(Suite s) | nine(Suite s) | ten(Suite s) |\n             jack(Suite s) | queen(Suite s) | king(Suite s) | ace(Suite s);\n             \ndata Hand = hand(list[Card] cards);\n\npublic Hand H = hand([two(hearts()), jack(diamonds()), six(hearts()), ace(spades())]);\n\n// Count frequencies of constructors\n\nmap[str,int] count(node N){ // <1>\n  freq = (); // <2>\n  visit(N){  // <3>\n    case node M: { name = getName(M); // <4>\n                   freq[name] ? 0 += 1; \n                 }\n  }\n  return freq; // <5>\n}\n\nmap[str,int] countRelevant(node N, set[str] relevant) = domainR(count(N), relevant);\ntest bool tstCountRelevant() = countRelevant(CT, {"leaf"}) == ("leaf" : 5);\n\n')),(0,a.kt)("p",null,"Two data types are introduced ",(0,a.kt)("inlineCode",{parentName:"p"},"ColoredTree")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Hand")," together\nwith an example value of each (",(0,a.kt)("inlineCode",{parentName:"p"},"CT"),", respectively, ",(0,a.kt)("inlineCode",{parentName:"p"},"H"),")."),(0,a.kt)("p",null,"<1> The function ",(0,a.kt)("inlineCode",{parentName:"p"},"count")," is defined."),(0,a.kt)("p",null,"<2> Introduces an empty map to maintain the frequencies.\n<3> Defines a visit of argument ",(0,a.kt)("inlineCode",{parentName:"p"},"N"),"; it traverses the complete value of ",(0,a.kt)("inlineCode",{parentName:"p"},"N"),".\n<4> Defines the case that we encounter a node and we update its frequency count.\nFirst the name of the constructor is retrieved (using ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/Node#Node-getName"},"getName"),") and then the\nfrequency is updated. The ",(0,a.kt)("a",{parentName:"p",href:"../../../Rascal/Statements/Assignment/IsDefined"},"isDefined")," operator is used to provide a default value of 0 when\nthe name was not yet in the map.\n<5> The map ",(0,a.kt)("inlineCode",{parentName:"p"},"freq")," is returned as result.\n<6> Defines a variant ",(0,a.kt)("inlineCode",{parentName:"p"},"countRelevant"),"; it gets is an extra argument of relevant constructors\nnames that is used to filter the map that is returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"count")," using ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/Map#Map-domainR"},"domainR"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::common::CountConstructors;\nok\nrascal>count(CT);\nmap[str, int]: ("red":2,"leaf":5,"black":2)\nrascal>count(H);\nmap[str, int]: ("six":1,"ace":1,"two":1,"hearts":2,"spades":1,"hand":1,"diamonds":1,"jack":1)\nrascal>countRelevant(H, {"hearts", "spades"});\nmap[str, int]: ("hearts":2,"spades":1)\n')))}u.isMDXComponent=!0}}]);