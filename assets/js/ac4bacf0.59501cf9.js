"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[62324],{3905:(t,e,a)=>{a.d(e,{Zo:()=>m,kt:()=>c});var n=a(67294);function i(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function l(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){i(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,i=function(t,e){if(null==t)return{};var a,n,i={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(i[a]=t[a]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(i[a]=t[a])}return i}var s=n.createContext({}),p=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):l(l({},e),t)),a},m=function(t){var e=p(t.components);return n.createElement(s.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var a=t.components,i=t.mdxType,r=t.originalType,s=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),d=p(a),c=i,k=d["".concat(s,".").concat(c)]||d[c]||u[c]||r;return a?n.createElement(k,l(l({ref:e},m),{},{components:a})):n.createElement(k,l({ref:e},m))}));function c(t,e){var a=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var r=a.length,l=new Array(r);l[0]=d;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o.mdxType="string"==typeof t?t:i,l[1]=o;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},16236:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(83117),i=(a(67294),a(3905));const r={title:"Associativity Declaration",keywords:["left","right","assoc","non-assoc"]},l=void 0,o={unversionedId:"Rascal/Declarations/SyntaxDefinition/Disambiguation/Associativity/index",id:"Rascal/Declarations/SyntaxDefinition/Disambiguation/Associativity/index",title:"Associativity Declaration",description:"Synopsis",source:"@site/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation/Associativity/index.md",sourceDirName:"Rascal/Declarations/SyntaxDefinition/Disambiguation/Associativity",slug:"/Rascal/Declarations/SyntaxDefinition/Disambiguation/Associativity/",permalink:"/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation/Associativity/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation/Associativity/index.md",tags:[],version:"current",frontMatter:{title:"Associativity Declaration",keywords:["left","right","assoc","non-assoc"]},sidebar:"tutorialSidebar",previous:{title:"Disambiguation",permalink:"/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation/"},next:{title:"Follow Declaration",permalink:"/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation/Follow/"}},s={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Description",id:"description",level:4},{value:"Benefits",id:"benefits",level:4},{value:"Pitfalls",id:"pitfalls",level:4}],m={toc:p};function u(t){let{components:e,...a}=t;return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"synopsis"},"Synopsis"),(0,i.kt)("p",null,"Define associativity of operators"),(0,i.kt)("h4",{id:"syntax"},"Syntax"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"syntax Exp = Assoc Label Symbol<sub>1</sub> Symbol<sub>2</sub> ...")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"syntax Exp = Assoc ( Alt<sub>1</sub> | Alt<sub>2</sub> | ... )")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"syntax Exp = Assoc Symbol<sub>1</sub> Symbol<sub>2</sub> ..."))),(0,i.kt)("p",null,"Here ",(0,i.kt)("em",{parentName:"p"},"Assoc")," is one of: ",(0,i.kt)("inlineCode",{parentName:"p"},"left"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"right"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"assoc")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"non-assoc"),". See ",(0,i.kt)("a",{parentName:"p",href:"../../../../../Rascal/Declarations/SyntaxDefinition"},"Syntax Definition"),"s on how to define alternatives and ",(0,i.kt)("a",{parentName:"p",href:"../../../../../Rascal/Declarations/SyntaxDefinition/Symbol"},"Symbol"),"s."),(0,i.kt)("h4",{id:"description"},"Description"),(0,i.kt)("p",null,"Using Associativity declarations we may disambiguate binary recursive operators. "),(0,i.kt)("p",null,"The semantics are that an associativity modifier will instruct the parser to disallow certain productions to nest ",(0,i.kt)("em",{parentName:"p"},"at particular argument positions"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"left")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"assoc")," will disallow productions to directly nest in their ",(0,i.kt)("em",{parentName:"li"},"right-most")," position."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"right")," will disallow productions to directly nest in their ",(0,i.kt)("em",{parentName:"li"},"left-most")," position."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"non-assoc")," will disallow productions to directly nest in either their left-most or their right-most position.")),(0,i.kt)("p",null,"When associativity is declared for a group of productions, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"left ( Alt<sub>1</sub> | _Alt <sub>2</sub>_ | Alt<sub>3</sub>)"),", then each alternative will be mutually associative to each other alternative ",(0,i.kt)("em",{parentName:"p"},"and itself"),". If an alternative of a group defines its own local associativity, as in ",(0,i.kt)("inlineCode",{parentName:"p"},"left ( right Alt<sub>1</sub> | Alt<sub>2</sub> | Alt<sub>3</sub>)"),", then ",(0,i.kt)("em",{parentName:"p"},"Alt"),(0,i.kt)("sub",null,"1")," is right associative with respect to itself and left associative with respect to all others in the group. "),(0,i.kt)("p",null,"A finer point is that associativity has no effect on any other position than the left-most and right-most position (see also ",(0,i.kt)("a",{parentName:"p",href:"../../../../../Rascal/Declarations/SyntaxDefinition/Disambiguation/Priority"},"Priority"),"). This is to guarantee that associativity does not introduce parse errors. The following tables explain when an associativity declaration filters, given two productions ",(0,i.kt)("inlineCode",{parentName:"p"},"father")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"child")," that share an associativity group.\n| If ",(0,i.kt)("inlineCode",{parentName:"p"},"left (Parent | Child)"),"      | Parent None: ",(0,i.kt)("inlineCode",{parentName:"p"},'E = "[" E "]"')," | Parent Left-most: ",(0,i.kt)("inlineCode",{parentName:"p"},'E = E "*"')," |Parent  Right-most: ",(0,i.kt)("inlineCode",{parentName:"p"},'E = "*" E')," | Parent Both: ",(0,i.kt)("inlineCode",{parentName:"p"},'E = E "*" E'),"   |\n| --- | --- | --- | --- | --- | --- |\n| ",(0,i.kt)("strong",{parentName:"p"},"Child None:")," ",(0,i.kt)("inlineCode",{parentName:"p"},'E = "{" E "}"'),"  | No filter        | No filter            | No filter                     | No filter               |\n| ",(0,i.kt)("strong",{parentName:"p"},"Child Left-most:")," ",(0,i.kt)("inlineCode",{parentName:"p"},'E = E "+"')," | No filter        | No filter            | Filter under right            | Filter under right      |\n| ",(0,i.kt)("strong",{parentName:"p"},"Child Right-most:")," ",(0,i.kt)("inlineCode",{parentName:"p"},'E = "+" E'),"| No filter        | No filter            | No filter                     | No filter       |\n| ",(0,i.kt)("strong",{parentName:"p"},"Child Both:")," ",(0,i.kt)("inlineCode",{parentName:"p"},'E = E "+" E'),"    | No filter        | No filter            | Filter under right            | Filter under right      |"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"If `right (Parent"),(0,i.kt)("th",{parentName:"tr",align:null},"Child)`"),(0,i.kt)("th",{parentName:"tr",align:null},"Parent None: ",(0,i.kt)("inlineCode",{parentName:"th"},'E = "[" E "]"')),(0,i.kt)("th",{parentName:"tr",align:null},"Parent Left-most: ",(0,i.kt)("inlineCode",{parentName:"th"},'E = E "*"')),(0,i.kt)("th",{parentName:"tr",align:null},"Parent  Right-most: ",(0,i.kt)("inlineCode",{parentName:"th"},'E = "*" E')),(0,i.kt)("th",{parentName:"tr",align:null},"Parent Both: ",(0,i.kt)("inlineCode",{parentName:"th"},'E = E "*" E')))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Child None:")," ",(0,i.kt)("inlineCode",{parentName:"td"},'E = "{" E "}"')),(0,i.kt)("td",{parentName:"tr",align:null},"No filter"),(0,i.kt)("td",{parentName:"tr",align:null},"No filter"),(0,i.kt)("td",{parentName:"tr",align:null},"No filter"),(0,i.kt)("td",{parentName:"tr",align:null},"No filter"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Child Left-most:")," ",(0,i.kt)("inlineCode",{parentName:"td"},'E = E "+"')),(0,i.kt)("td",{parentName:"tr",align:null},"No filter"),(0,i.kt)("td",{parentName:"tr",align:null},"No filter"),(0,i.kt)("td",{parentName:"tr",align:null},"No filter"),(0,i.kt)("td",{parentName:"tr",align:null},"No filter"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Child Right-most:")," ",(0,i.kt)("inlineCode",{parentName:"td"},'E = "+" E')),(0,i.kt)("td",{parentName:"tr",align:null},"No filter"),(0,i.kt)("td",{parentName:"tr",align:null},"Filter under left"),(0,i.kt)("td",{parentName:"tr",align:null},"No filter"),(0,i.kt)("td",{parentName:"tr",align:null},"Filter under left"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Child Both:")," ",(0,i.kt)("inlineCode",{parentName:"td"},'E = E "+" E')),(0,i.kt)("td",{parentName:"tr",align:null},"No filter"),(0,i.kt)("td",{parentName:"tr",align:null},"Filter under left"),(0,i.kt)("td",{parentName:"tr",align:null},"No filter"),(0,i.kt)("td",{parentName:"tr",align:null},"Filter under left"),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("h4",{id:"benefits"},"Benefits"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Short notation for common constructs in programming languages."),(0,i.kt)("li",{parentName:"ul"},"Removes ambiguity but can not introduce parse errors."),(0,i.kt)("li",{parentName:"ul"},"Allows the use of less non-terminals for the same expression grammar (typically only one), which makes parse trees simpler as well as the mapping to an abstract syntax tree more direct.")),(0,i.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Please do not assume that Rascal's associativity declarations have the same semantics as SDF's associativity declarations."),(0,i.kt)("li",{parentName:"ul"},"Use of productions that are not both left and right recursive in an associativity group, although safe, is not very meaningful. We would advise to use the ",(0,i.kt)("a",{parentName:"li",href:"../../../../../Rascal/Declarations/SyntaxDefinition/Disambiguation/Priority"},"Priority")," relation such a case. For example:")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Original associativity"),(0,i.kt)("th",{parentName:"tr",align:null},"Better written as priority"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},'`E = left ( "+" E'),(0,i.kt)("td",{parentName:"tr",align:null},'E "+" E );`')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},'`E = right ( "+" E'),(0,i.kt)("td",{parentName:"tr",align:null},'E "+" E );`')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},'`E = left ( E "+"'),(0,i.kt)("td",{parentName:"tr",align:null},'E "+" E);`')),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},'`E = right ( E "+"'),(0,i.kt)("td",{parentName:"tr",align:null},'E "+" E);`')))),(0,i.kt)("p",null,"//"))}u.isMDXComponent=!0}}]);