"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[76827],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),f=r,x=d["".concat(l,".").concat(f)]||d[f]||u[f]||i;return t?a.createElement(x,o(o({ref:n},p),{},{components:t})):a.createElement(x,o({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},21440:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(83117),r=(t(67294),t(3905));const i={title:"Concrete Syntax"},o=void 0,s={unversionedId:"Recipes/Languages/Func/ConcreteSyntax/index",id:"Recipes/Languages/Func/ConcreteSyntax/index",title:"Concrete Syntax",description:"Synopsis",source:"@site/docs/Recipes/Languages/Func/ConcreteSyntax/index.md",sourceDirName:"Recipes/Languages/Func/ConcreteSyntax",slug:"/Recipes/Languages/Func/ConcreteSyntax/",permalink:"/docs/Recipes/Languages/Func/ConcreteSyntax/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Recipes/Languages/Func/ConcreteSyntax/index.md",tags:[],version:"current",frontMatter:{title:"Concrete Syntax"},sidebar:"tutorialSidebar",previous:{title:"Abstract Syntax",permalink:"/docs/Recipes/Languages/Func/AbstractSyntax/"},next:{title:"Eval0",permalink:"/docs/Recipes/Languages/Func/Eval0/"}},l={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"The concrete syntax of Func."),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("h4",{id:"types"},"Types"),(0,r.kt)("h4",{id:"function"},"Function"),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'// tag::module[]\nmodule demo::lang::Func::Func\n\nlexical Ident =  [a-zA-Z][a-zA-Z0-9]* !>> [a-zA-Z0-9];\n\nlexical Natural = [0-9]+ !>> [0-9];\n\nlexical LAYOUT = [\\t-\\n\\r\\ ];\n\nlayout LAYOUTLIST = LAYOUT*  !>> [\\t-\\n\\r\\ ] ;\n\nstart syntax Prog = prog: Func* ;\n\nsyntax Func = func: Ident name "(" {Ident ","}* ")" "=" Exp;\n\nsyntax Exp = let: "let" {Binding ","}* "in" Exp "end"\n           | cond: "if" Exp "then" Exp "else" Exp "end"\n           | bracket "(" Exp ")"\n           | var: Ident\n           | nat: Natural \n           | call: Ident "(" {Exp ","}* ")"\n           | address: "&" Ident\n           > deref: "*" Exp \n           > non-assoc (\n               left mul: Exp "*" Exp \n             | non-assoc div: Exp "/" Exp\n           ) \n           > left (\n               left add: Exp "+" Exp \n             | left sub: Exp "-" Exp\n           )\n           >\n           non-assoc (\n               non-assoc gt: Exp "\\>" Exp\n             | non-assoc lt:  Exp "\\<" Exp\n             | non-assoc geq:  Exp "\\>=" Exp\n             | non-assoc leq:  Exp "\\<=" Exp\n           )\n           >\n           right assign: Exp ":=" Exp\n           >\n           right seq: Exp ";" Exp; \n\nsyntax Binding = binding: Ident "=" Exp;\n\n')),(0,r.kt)("p",null,"The concrete syntax of Func uses many features of Rascal's syntax definitions. Some notes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The definition of lexical syntax follows the pattern:\n",(0,r.kt)("strong",{parentName:"li"},"  Define lexical symbols (",(0,r.kt)("inlineCode",{parentName:"strong"},"Ident"),", ",(0,r.kt)("inlineCode",{parentName:"strong"},"Natural"),").\n"),"  Define rules for layout.\n**  Use follow restrictions (",(0,r.kt)("inlineCode",{parentName:"li"},"!>>"),") to enforce the longest match of lexical symbols."),(0,r.kt)("li",{parentName:"ul"},"The definition of lexical also follows a common pattern:\n",(0,r.kt)("strong",{parentName:"li"},"  List of non-terminal is defined with their alternatives.\n"),"  One non-terminal is designated as start symbol (",(0,r.kt)("inlineCode",{parentName:"li"},"Prog"),").\n",(0,r.kt)("strong",{parentName:"li"},"  Each alternative has a label, this is for the benefit of converting parse trees to abstract syntaxt trees.\n"),"  Each alternative spells out its priority and associativity.")),(0,r.kt)("h4",{id:"benefits"},"Benefits"))}u.isMDXComponent=!0}}]);