"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[16699],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>d});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=n.createContext({}),u=function(e){var r=n.useContext(o),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=u(e.components);return n.createElement(o.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(t),d=a,b=m["".concat(o,".").concat(d)]||m[d]||c[d]||s;return t?n.createElement(b,i(i({ref:r},p),{},{components:t})):n.createElement(b,i({ref:r},p))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=m;var l={};for(var o in r)hasOwnProperty.call(r,o)&&(l[o]=r[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<s;u++)i[u]=t[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},14439:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var n=t(83117),a=(t(67294),t(3905));const s={title:"Number",keywords:["int","real","num"]},i=void 0,l={unversionedId:"Rascal/Expressions/Values/Number/index",id:"Rascal/Expressions/Values/Number/index",title:"Number",description:"Synopsis",source:"@site/docs/Rascal/Expressions/Values/Number/index.md",sourceDirName:"Rascal/Expressions/Values/Number",slug:"/Rascal/Expressions/Values/Number/",permalink:"/docs/Rascal/Expressions/Values/Number/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascal/Expressions/Values/Number/index.md",tags:[],version:"current",frontMatter:{title:"Number",keywords:["int","real","num"]},sidebar:"tutorialSidebar",previous:{title:"Node Subscription",permalink:"/docs/Rascal/Expressions/Values/Node/Subscription/"},next:{title:"Number Addition",permalink:"/docs/Rascal/Expressions/Values/Number/Addition/"}},o={},u=[{value:"Synopsis",id:"synopsis",level:4},{value:"Types",id:"types",level:4},{value:"Description",id:"description",level:4}],p={toc:u};function c(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Numeric values."),(0,a.kt)("h4",{id:"types"},"Types"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"real"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"num")),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"Numbers include integers (values of type ",(0,a.kt)("inlineCode",{parentName:"p"},"int"),") and reals (values of type ",(0,a.kt)("inlineCode",{parentName:"p"},"real"),").\nIf both operands have the same type (",(0,a.kt)("inlineCode",{parentName:"p"},"int")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"real"),") then the operator is the corresponding operator on integers or reals. Otherwise, integer arguments are first converted to real and the real operator is applied."),(0,a.kt)("p",null,"The following operations are provided on numbers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/Addition))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/Conditional))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/Division))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/Equal))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/GreaterThan))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/GreaterThanOrEqual))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/LessThan))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/LessThanOrEqual))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/Multiplication))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/Negation))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/NotEqual))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/Remainder))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/Subtraction))")))}c.isMDXComponent=!0}}]);