"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[84669],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,h=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},93525:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(83117),r=(n(67294),n(3905));const i={title:"With Layout"},o=void 0,l={unversionedId:"Recipes/Languages/Exp/Concrete/WithLayout/index",id:"Recipes/Languages/Exp/Concrete/WithLayout/index",title:"With Layout",description:"Synopsis",source:"@site/docs/Recipes/Languages/Exp/Concrete/WithLayout/index.md",sourceDirName:"Recipes/Languages/Exp/Concrete/WithLayout",slug:"/Recipes/Languages/Exp/Concrete/WithLayout/",permalink:"/docs/Recipes/Languages/Exp/Concrete/WithLayout/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Recipes/Languages/Exp/Concrete/WithLayout/index.md",tags:[],version:"current",frontMatter:{title:"With Layout"},sidebar:"tutorialSidebar",previous:{title:"No Layout",permalink:"/docs/Recipes/Languages/Exp/Concrete/NoLayout/"},next:{title:"Func",permalink:"/docs/Recipes/Languages/Func/"}},p={},s=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Pitfalls",id:"pitfalls",level:4}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Defines a concrete syntax for Exp with layout."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"In Rascal, the major difference between lexical syntax and non-lexical syntax is that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Strings that are parsed according to the lexical syntax ",(0,r.kt)("strong",{parentName:"li"},"do not")," contain additional layout characters\nsuch as spaces, new lines, and source code comments."),(0,r.kt)("li",{parentName:"ul"},"Strings that are parsed according to the normal (non-lexical) syntax ",(0,r.kt)("strong",{parentName:"li"},"can")," contain layout characters between\neach element. "),(0,r.kt)("li",{parentName:"ul"},"Which 'layout' (whitespace and/or source code comments) will be accepted has to be defined explicitly by the grammar writer.")),(0,r.kt)("p",null,"The following example extends the grammar for ",(0,r.kt)("inlineCode",{parentName:"p"},"Exp")," in ",(0,r.kt)("a",{parentName:"p",href:"../../../../../Recipes/Languages/Exp/Concrete/NoLayout"},"No Layout")," with a layout definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'// tag::module[]\nmodule demo::lang::Exp::Concrete::WithLayout::Syntax\n\nlayout Whitespace = [\\t-\\n\\r\\ ]*; // <1>\n    \nlexical IntegerLiteral = [0-9]+;           \n\nstart syntax Exp \n  = IntegerLiteral          \n  | bracket "(" Exp ")"     \n  > left Exp "*" Exp        \n  > left Exp "+" Exp        \n  ;\n\n')),(0,r.kt)("p",null,"<1> Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"layout")," definition, we define that the ",(0,r.kt)("inlineCode",{parentName:"p"},"Whitespace")," non-terminal is used ",(0,r.kt)("em",{parentName:"p"},"in between every symbol")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"syntax")," productions in the current module."),(0,r.kt)("p",null,"And now we can use spaces in our definition of the eval function as well:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'// tag::module[]\nmodule demo::lang::Exp::Concrete::WithLayout::Eval\nimport demo::lang::Exp::Concrete::WithLayout::Syntax;\n\nimport String;\nimport ParseTree;\n\nint eval(str txt) = eval(parse(#start[Exp], txt).top);              \n\nint eval((Exp)`<IntegerLiteral l>`) = toInt("<l>");       \nint eval((Exp)`<Exp e1> * <Exp e2>`) = eval(e1) * eval(e2);  \nint eval((Exp)`<Exp e1> + <Exp e2>`) = eval(e1) + eval(e2); \nint eval((Exp)`( <Exp e> )`) = eval(e);                    \n// end::module[]\n\nvalue main() {\n  return eval(" 2+3");\n}\ntest bool tstEval2() = eval("7 * 3") == 21;\ntest bool tstEval3() = eval("7 + 3") == 10;\ntest bool tstEval4() = eval(" 3 + 4*5 ") == 23;\n\n')),(0,r.kt)("p",null,"Note that ",(0,r.kt)("a",{parentName:"p",href:"../../../../../RascalConcepts/PatternMatching"},"Pattern Matching")," will ",(0,r.kt)("em",{parentName:"p"},"ignore"),' all trees in layout positions, such that the parse tree of "1 + ',"\\",'n1" will match against ',(0,r.kt)("inlineCode",{parentName:"p"},"<Exp e1> + <Exp e2>"),". The same goes for equality on parse trees."),(0,r.kt)("p",null,"For the above example Rascal will insert the ",(0,r.kt)("inlineCode",{parentName:"p"},"Whitespace")," non-terminal between every element of the syntax rules for ",(0,r.kt)("inlineCode",{parentName:"p"},"Exp"),".\nMoreover, for the start production (See ",(0,r.kt)("a",{parentName:"p",href:"../../../../../Recipes/Languages/Exp/Concrete/NoLayout"},"No Layout"),") ",(0,r.kt)("inlineCode",{parentName:"p"},"Whitespace")," will be added before and after the ",(0,r.kt)("inlineCode",{parentName:"p"},"Exp"),"."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"The effect of the layout definition is that before parser generation the following grammar is derived for ",(0,r.kt)("inlineCode",{parentName:"p"},"Exp"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'syntax Exp \n  = IntegerLiteral          \n  | bracket "(" Whitespace Exp Whitespace ")"     \n  > left Exp Whitespace "*" Whitespace Exp        \n  > left Exp Whitespace "+" Whitespace Exp        \n  ;\n\nsyntax start[Exp] = Whitespace Exp top Whitespace;\n')),(0,r.kt)("p",null,"To put this all to the test:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Exp::Concrete::WithLayout::Syntax;\nok\nrascal>import demo::lang::Exp::Concrete::WithLayout::Eval;\nok\nrascal>eval("2 +  3");\nint: 5\nrascal>eval("2   +  3*4");\nint: 14\nrascal>eval("( 2+3 )* 4");\nint: 20\n')),(0,r.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the grammar for ",(0,r.kt)("inlineCode",{parentName:"li"},"Exp")," would contain an optional symbol, as in ",(0,r.kt)("inlineCode",{parentName:"li"},'syntax Exp = Exp "+"? Exp'),', then it would be ambiguous. Does a space in "1 1", belong to the ',(0,r.kt)("inlineCode",{parentName:"li"},"Whitespace")," before or after the missing ",(0,r.kt)("inlineCode",{parentName:"li"},"+"),"? To disambiguate the ",(0,r.kt)("inlineCode",{parentName:"li"},"layout")," definition should be changed to ",(0,r.kt)("inlineCode",{parentName:"li"},"layout Whitespace = [\\ \\t\\n\\r]* !>> [\\ \\t\\n\\r]"),". That will make sure the space goes with the first Whitespace, because even an empty Whitespace list must never be followed immediately by a space.")))}u.isMDXComponent=!0}}]);