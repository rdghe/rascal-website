"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[9866],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>E});var t=a(67294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),c=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},p=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},v={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(a),E=r,d=u["".concat(s,".").concat(E)]||u[E]||v[E]||l;return a?t.createElement(d,o(o({ref:n},p),{},{components:a})):t.createElement(d,o({ref:n},p))}));function E(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=a[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},93252:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>v,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var t=a(87462),r=(a(67294),a(3905));const l={title:"Evaluate"},o=void 0,i={unversionedId:"Recipes/Languages/Pico/Evaluate/index",id:"Recipes/Languages/Pico/Evaluate/index",title:"Evaluate",description:"Synopsis",source:"@site/docs/Recipes/Languages/Pico/Evaluate/index.md",sourceDirName:"Recipes/Languages/Pico/Evaluate",slug:"/Recipes/Languages/Pico/Evaluate/",permalink:"/docs/Recipes/Languages/Pico/Evaluate/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Recipes/Languages/Pico/Evaluate/index.md",tags:[],version:"current",frontMatter:{title:"Evaluate"},sidebar:"tutorialSidebar",previous:{title:"ControlFlow",permalink:"/docs/Recipes/Languages/Pico/ControlFlow/"},next:{title:"Load",permalink:"/docs/Recipes/Languages/Pico/Load/"}},s={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Examples",id:"examples",level:4}],p={toc:c};function v(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Evaluate a Pico program."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"A complete evaluator (interpreter) for Pico is defined below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'module demo::lang::Pico::Eval\n\nimport demo::lang::Pico::Abstract;\nimport demo::lang::Pico::Load;\n\ndata PicoValue = natval(int n) | strval(str s) | errorval(loc l, str msg); // <1>\n\nalias VENV = map[PicoId, PicoValue]; // <2>\n\n// Evaluate Expressions.\n\nPicoValue evalExp(exp:natCon(int N), VENV env) = natval(N);\n\nPicoValue evalExp(exp:strCon(str S), VENV env) = strval(S);\n\nPicoValue evalExp(exp:id(PicoId Id), VENV env)  = \n    env[Id]?  ? env[Id] : errorval(exp@location, "Uninitialized variable <Id>");\n\nPicoValue evalExp(exp:add(EXP E1, EXP E2), VENV env) = \n   (natval(n1) := evalExp(E1, env) && \n    natval(n2) := evalExp(E2, env)) ? natval(n1 + n2)\n                                    : errorval(exp@location, "+ requires natural arguments");\n  \nPicoValue evalExp(exp:sub(EXP E1, EXP E2), VENV env) = \n   (natval(n1) := evalExp(E1, env) && \n    natval(n2) := evalExp(E2, env)) ? natval(n1 - n2)\n                                    : errorval(exp@location, "- requires natural arguments");\n                                                                     \nPicoValue evalExp(exp:conc(EXP E1, EXP E2), VENV env) = \n   (strval(s1) := evalExp(E1, env) && \n    strval(s2) := evalExp(E2, env)) ? strval(s1 + s2)\n                                    : errorval(exp@location, "|| requires string arguments");\n\n// Evaluate a statement\n\nVENV evalStat(stat:asgStat(PicoId Id, EXP Exp), VENV env) {\n  env[Id] = evalExp(Exp, env);\n  return env;\n}\n    \nVENV evalStat(stat:ifElseStat(EXP Exp, \n                              list[STATEMENT] Stats1,\n                              list[STATEMENT] Stats2),\n              VENV env) =\n  evalStats(evalExp(Exp, env) != natval(0) ? Stats1 : Stats2, env);\n\nVENV evalStat(stat:whileStat(EXP Exp, \n                             list[STATEMENT] Stats1),\n              VENV env) {\n    while(evalExp(Exp, env) != natval(0)){\n       env = evalStats(Stats1, env);\n    }\n    return env;\n}\n\n// Evaluate a list of statements\nVENV evalStats(list[STATEMENT] Stats1, VENV env) {\n  for(S <- Stats1){\n      env = evalStat(S, env);\n  }\n  return env;\n}\n  \n// Eval declarations\n\nVENV evalDecls(list[DECL] Decls) =\n    ( Id : (tp == demo::lang::Pico::Abstract::natural() ? natval(0) : strval(""))  \n    | decl(PicoId Id, TYPE tp) <- Decls\n    );\n\n// Evaluate a Pico program\n\npublic VENV evalProgram(PROGRAM P){\n  if(program(list[DECL] Decls, list[STATEMENT] Series) := P){\n     VENV env = evalDecls(Decls);\n     return evalStats(Series, env);\n  } else\n    throw "Cannot happen";\n}\n\npublic VENV evalProgram(str txt) = evalProgram(load(txt));\n    \n\n')),(0,r.kt)("p",null,"Notes:"),(0,r.kt)("p",null,"<1> First we introduce a data type ",(0,r.kt)("inlineCode",{parentName:"p"},"PicoValue")," that wraps all possible values that can occur at run-time.\n<2> Compared to ","[Pico/Typecheck]",", we use ",(0,r.kt)("inlineCode",{parentName:"p"},"VENV"),", a value environment (a map from Pico identifiers to Pico values)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The actual evaluator consists of the functions ",(0,r.kt)("inlineCode",{parentName:"li"},"evalExp"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"evalStat"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"evalStats"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"evalDecls")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"evalProgram"),".\nThey are written in a similar style as the typechecker."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"evalProgram")," evaluates a given Pico program.")),(0,r.kt)("p",null,"Here is how to evaluate a Pico program:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Pico::Eval;\nok\nrascal>evalProgram("begin declare x : natural, y : natural; x := 1; y := x + 5 end");\nmap[str, PicoValue]: (\n  "x":natval(1),\n  "y":natval(6)\n)\n')))}v.isMDXComponent=!0}}]);