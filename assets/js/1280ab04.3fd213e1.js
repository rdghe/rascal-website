"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[24895],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),o=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=o(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=o(n),f=i,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||r;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=p;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:i,l[1]=u;for(var o=2;o<r;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},95338:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>u,toc:()=>o});var a=n(87462),i=(n(67294),n(3905));const r={title:"module util::UUID"},l=void 0,u={unversionedId:"Library/util/UUID",id:"Library/util/UUID",title:"module util::UUID",description:"Usage",source:"@site/docs/Library/util/UUID.md",sourceDirName:"Library/util",slug:"/Library/util/UUID",permalink:"/docs/Library/util/UUID",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Library/util/UUID.md",tags:[],version:"current",frontMatter:{title:"module util::UUID"},sidebar:"tutorialSidebar",previous:{title:"module util::Test",permalink:"/docs/Library/util/Test"},next:{title:"module util::Webserver",permalink:"/docs/Library/util/Webserver"}},s={},o=[{value:"Usage",id:"usage",level:4},{value:"function uuid",id:"util-UUID-uuid",level:2},{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4},{value:"Pitfalls",id:"pitfalls",level:4},{value:"function uuidi",id:"util-UUID-uuidi",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Pitfalls",id:"pitfalls-1",level:4}],c={toc:o};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"import util::UUID;")),(0,i.kt)("h2",{id:"util-UUID-uuid"},"function uuid"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"loc uuid()"))),(0,i.kt)("h4",{id:"synopsis"},"Synopsis"),(0,i.kt)("p",null,"generates a unique identifier shaped as a ",(0,i.kt)("inlineCode",{parentName:"p"},"loc")),(0,i.kt)("h4",{id:"description"},"Description"),(0,i.kt)("p",null,"This function generates a UUID, see ",(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Universally_unique_identifier"},"http://en.wikipedia.org/wiki/Universally_unique_identifier"),".\nSince UUIDs are useful to assign an opaque and unique identity to data, the function returns\na ",(0,i.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/Values/Location/"},"Location")," (which is the preferred representation for encoding identities in Rascal)"),(0,i.kt)("h4",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import util::UUID;\nok\n")),(0,i.kt)("p",null,"The uuid() function generates a location with the authority showing the literal canonical UUID string"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>uuid()\nloc: |uuid://3e1d248e-7328-4e37-97a5-de8bebc1e670|\n")),(0,i.kt)("p",null,"Use it to relate identies to data objects, as in this example which adds a field to a relation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>myData = { <i,i*i> | i <- [1..11] }; \nrel[int,int]: {\n  <10,100>,\n  <7,49>,\n  <1,1>,\n  <3,9>,\n  <9,81>,\n  <2,4>,\n  <4,16>,\n  <6,36>,\n  <5,25>,\n  <8,64>\n}\nrascal>rel[int n, int square, loc id] myUniqueData = { <i,j,uuid()> | <i,j> <- myData };\nrel[int n,int square,loc id]: {\n  <8,64,|uuid://37fd5901-cd43-431f-a900-eb83f709157b|>,\n  <7,49,|uuid://8be5ee25-c86e-404c-b696-2cce2104fbdb|>,\n  <3,9,|uuid://c1574ff4-7e4a-4301-8b36-aff3ce418a81|>,\n  <4,16,|uuid://e31ccc40-1797-4fbe-8b32-31cb0d252906|>,\n  <6,36,|uuid://d99d85d5-b35f-4e86-8044-e05f93651cd0|>,\n  <9,81,|uuid://280ed956-e8b0-4093-bd5c-8c04aa161f53|>,\n  <10,100,|uuid://b854ece8-a7a0-4e08-af5e-0df2af9e4c3a|>,\n  <2,4,|uuid://27d280c2-433c-4d32-8f8a-ae2f9c9d90e1|>,\n  <1,1,|uuid://27b33836-f2d9-4f2e-93d2-7ebcdc1b2314|>,\n  <5,25,|uuid://e2999ade-0531-41b5-a4e4-a1cb36a592e7|>\n}\nrascal>map[tuple[int i, int j] t, loc id] myUniqueMap = (<i,j>:uuid() | <i,j> <- myData );\nmap[tuple[int i,int j] t, loc id]: (\n  <6,36>:|uuid://d1387313-0d3a-4910-ae8c-56407aebd29c|,\n  <2,4>:|uuid://0e61d44c-6d9f-48f1-be76-fa1069892535|,\n  <7,49>:|uuid://7abcac6c-6698-43ec-8e3c-4d0fbfdd0d24|,\n  <9,81>:|uuid://b9e47b2c-4948-425e-90f9-786c72a15569|,\n  <8,64>:|uuid://7fe46248-07b0-4d7a-a828-631b9f37d604|,\n  <5,25>:|uuid://ff244ecc-2b04-4f05-888b-b7ad4acf9981|,\n  <4,16>:|uuid://02442197-07fa-47f9-90f5-30ec448abb78|,\n  <1,1>:|uuid://a92f8774-1f62-4d3e-ba8e-09a719cd71f8|,\n  <10,100>:|uuid://af476dd4-5792-457a-a544-2a71e60fed64|,\n  <3,9>:|uuid://ad8a4671-c541-432d-82b6-93699e35c39b|\n)\n")),(0,i.kt)("p",null,"Note how uuid() should always generate a fresh value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>assert uuid() != uuid(); \nbool: true\n")),(0,i.kt)("h4",{id:"benefits"},"Benefits"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Rascal/Expressions/Values/Location/"},"Location"),"s are used for identifying program elements or model elements in Rascal. The uuid() function provides\nan quick-and-easy way of acquiring such an identity without having to design a naming scheme.")),(0,i.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"UUIDs are a quick and dirty way of identifying data which may lead to hard to debug code. A naming scheme for ",(0,i.kt)("a",{parentName:"li",href:"/docs/Rascal/Expressions/Values/Location/"},"Location"),"s is better because it generates human readable\n",(0,i.kt)("a",{parentName:"li",href:"/docs/Rascal/Expressions/Values/Location/"},"Location"),"s which carry meaning. For example consider the difference in readability between these two values:\n",(0,i.kt)("inlineCode",{parentName:"li"},"|uuid://47fdcd64-4fd0-41a1-8aa3-61c5b272c3fc|")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"|java+class:///java/lang/Object|"),". Both may lead to the same\nresults in your computation, but if we print either of them out, one of them is opaque and the other is transparent. A transparent naming scheme is preferable for\ndebugging purposes.")),(0,i.kt)("h2",{id:"util-UUID-uuidi"},"function uuidi"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int uuidi()"))),(0,i.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,i.kt)("p",null,"see ","[uuid]",", this function does the same except return the UUID as an int."),(0,i.kt)("h4",{id:"pitfalls-1"},"Pitfalls"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"beware that this integer is almost guaranteed to use 128 bits, so communicating it outside of\nRascal should not be done via a Java 32-bit integer.")))}d.isMDXComponent=!0}}]);