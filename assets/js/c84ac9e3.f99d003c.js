"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[76652],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},41988:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(83117),a=(t(67294),t(3905));const i={title:"Functions"},o=void 0,l={unversionedId:"RascalConcepts/Functions/index",id:"RascalConcepts/Functions/index",title:"Functions",description:"Synopsis",source:"@site/docs/RascalConcepts/Functions/index.md",sourceDirName:"RascalConcepts/Functions",slug:"/RascalConcepts/Functions/",permalink:"/docs/RascalConcepts/Functions/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/RascalConcepts/Functions/index.md",tags:[],version:"current",frontMatter:{title:"Functions"},sidebar:"tutorialSidebar",previous:{title:"Equation Solving",permalink:"/docs/RascalConcepts/EquationSolving/"},next:{title:"IDE Construction",permalink:"/docs/RascalConcepts/IDEConstruction/"}},s={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Functions and pattern-directed invocation."),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"Functions allow the definition of frequently used operations. They have a name and formal parameters. They are explicitly declared and are fully typed.\nFunctions can also be used as values thus enabling higher-order functions.\nRascal is a higher-order language in which functions are first-class values."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"../../Rascal/Declarations/Function"},"Function Declaration")," for details."),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Here is an example of a function that counts the number of assignment statements in a program:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"int countAssignments(PROGRAM P){\n    int n = 0;\n    visit (P){\n    case asgStat(_, _):\n         n += 1;\n    }\n    return n;\n}\n")),(0,a.kt)("p",null,"Consider the following use of higher-order functions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"int double(int x) { return 2 * x; }\n\nint triple(int x) { return 3 * x; }\n\nint f(int x, int (int) multi){ return multi(x); }\n")),(0,a.kt)("p",null,"The functions ",(0,a.kt)("inlineCode",{parentName:"p"},"double")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"triple")," simply multiply their argument with a constant.\nFunction ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," is, however, more interesting.\nIt takes an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," and a function ",(0,a.kt)("inlineCode",{parentName:"p"},"multi")," (with integer argument and integer result) as argument and\napplies multi to its own argument. ",(0,a.kt)("inlineCode",{parentName:"p"},"f(5, triple)")," will hence return ",(0,a.kt)("inlineCode",{parentName:"p"},"15"),".\nFunction values can also be created anonymously as illustrated by the following, alternative,\nmanner of writing this same call to ",(0,a.kt)("inlineCode",{parentName:"p"},"f"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"f(5, int (int y){return 3 * y;});\n")),(0,a.kt)("p",null,"Here the second argument of ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," is an anonymous function."))}p.isMDXComponent=!0}}]);