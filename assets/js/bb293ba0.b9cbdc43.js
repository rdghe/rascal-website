"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[81039],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(t),d=r,g=m["".concat(i,".").concat(d)]||m[d]||u[d]||l;return t?a.createElement(g,o(o({ref:n},c),{},{components:t})):a.createElement(g,o({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=m;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<l;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},90023:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const l={title:"Automatic"},o=void 0,s={unversionedId:"Recipes/Languages/Exp/Combined/Automatic/index",id:"Recipes/Languages/Exp/Combined/Automatic/index",title:"Automatic",description:"Synopsis",source:"@site/docs/Recipes/Languages/Exp/Combined/Automatic/index.md",sourceDirName:"Recipes/Languages/Exp/Combined/Automatic",slug:"/Recipes/Languages/Exp/Combined/Automatic/",permalink:"/docs/Recipes/Languages/Exp/Combined/Automatic/",draft:!1,tags:[],version:"current",frontMatter:{title:"Automatic"},sidebar:"tutorialSidebar",previous:{title:"Combined",permalink:"/docs/Recipes/Languages/Exp/Combined/"},next:{title:"Manual",permalink:"/docs/Recipes/Languages/Exp/Combined/Manual/"}},i={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Use implode to translate an Exp parse tree to an abstract syntax tree."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/Library/ParseTree#ParseTree-implode"},"implode")," is a function that automates the mapping between parse trees and abstract syntax trees.\nIt takes two arguments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("em",{parentName:"li"},"reified")," type of the desired abstract syntax. (In Rascal, types can not be used freely as values.\nA reified type, is a type that is wrapped in such a way that it can be passed as an argument to a function.)"),(0,r.kt)("li",{parentName:"ul"},"The parse tree to be converted.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"implode")," is smart in trying to find a mapping, but it needs some guidance.\nA necessary step is therefore to label the rules in the grammar with the name of the\nconstructor to which it has to be mapped."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Let's first label the syntax rules of the Exp grammar with constructor names:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'module demo::lang::Exp::Combined::Automatic::Syntax\n\nlexical LAYOUT = [\\t-\\n\\r\\ ];                    \n\nlayout LAYOUTLIST = LAYOUT*  !>> [\\t-\\n\\r\\ ] ;  \n    \nlexical IntegerLiteral = [0-9]+;           \n\nstart syntax Exp \n    = con: IntegerLiteral        \u2776  \n    | bracket "(" Exp ")"     \n    > left mul: Exp "*" Exp      \u2777    \n    > left add: Exp "+" Exp      \u2778     \n    ;\n\n')),(0,r.kt)("p",null,"Observe that at 1, 2, 3 these labels have been added."),(0,r.kt)("p",null,"It is good practice to introduce separate modules for parsing and for the conversion itself:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"Parse")," module defines a parse function and returns a parse tree. It imports only the concrete syntax."),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"Load")," module defines a load function that first calls the above ",(0,r.kt)("inlineCode",{parentName:"li"},"parse")," function and then applies ",(0,r.kt)("inlineCode",{parentName:"li"},"implode")," to it.\nThis is the only module that imports both concrete and abstract syntax at the same time and is therefore the only place to be\nconcerned about name clashes. (If I mention ",(0,r.kt)("inlineCode",{parentName:"li"},"Exp"),", do you know which one I mean?).")),(0,r.kt)("p",null,"Here is the ",(0,r.kt)("inlineCode",{parentName:"p"},"Parse")," module for Exp ..."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"module demo::lang::Exp::Combined::Automatic::Parse\n\nimport demo::lang::Exp::Combined::Automatic::Syntax;\nimport ParseTree;\n\nTree parseExp(str txt) = parse(#Exp, txt); \n\n")),(0,r.kt)("p",null,"and this is how it works:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Exp::Combined::Automatic::Parse;\nok\nrascal>parseExp("2+3*4");\nTree: appl(\n  prod(\n    label(\n      "add",\n      sort("Exp")),\n    [\n      sort("Exp"),\n      layouts("LAYOUTLIST"),\n      lit("+"),\n      layouts("LAYOUTLIST"),\n      sort("Exp")\n    ],\n    {assoc(left())}),\n  [appl(\n      prod(\n        label(\n          "con",\n          sort("Exp")),\n        [lex("IntegerLiteral")],\n        {}),\n      [appl(\n          prod(\n            lex("IntegerLiteral"),\n            [iter(\\char-class([range(48,57)]))],\n            {}),\n          [appl(\n              regular(iter(\\char-class([range(48,57)]))),\n              [char(50)],\n              src=|unknown:///|(0,1,<1,0>,<1,1>))],\n          src=|unknown:///|(0,1,<1,0>,<1,1>))],\n      src=|unknown:///|(0,1,<1,0>,<1,1>)),appl(\n      prod(\n        layouts("LAYOUTLIST"),\n        [conditional(\n            \\iter-star(lex("LAYOUT")),\n            {\\not-follow(\\char-class([\n                    range(9,10),\n                    range(13,13),\n                    range(32,32)\n                  ]))})],\n        {}),\n      [appl(\n          regular(\\iter-star(lex("LAYOUT"))),\n          [],\n          src=|unknown:///|(1,0,<1,1>,<1,1>))],\n      src=|unknown:///|(1,0,<1,1>,<1,1>)),appl(\n      prod(\n        lit("+"),\n        [\\char-class([range(43,43)])],\n        {}),\n      [char(43)]),appl(\n      prod(\n        layouts("LAYOUTLIST"),\n        [conditional(\n            \\iter-star(lex("LAYOUT")),\n            {\\not-follow(\\char-class([\n                    range(9,10),\n                    range(13,13),\n                    range(32,32)\n                  ]))})],\n        {}),\n      [appl(\n          regular(\\iter-star(lex("LAYOUT"))),\n          [],\n          src=|unknown:///|(2,0,<1,2>,<1,2>))],\n      src=|unknown:///|(2,0,<1,2>,<1,2>)),appl(\n      prod(\n        label(\n          "mul",\n          sort("Exp")),\n        [\n          sort("Exp"),\n          layouts("LAYOUTLIST"),\n          lit("*"),\n          layouts("LAYOUTLIST"),\n          sort("Exp")\n        ],\n        {assoc(left())}),\n      [appl(\n          prod(\n            label(\n              "con",\n              sort("Exp")),\n            [lex("IntegerLiteral")],\n            {}),\n          [appl(\n              prod(\n                lex("IntegerLiteral"),\n                [iter(\\char-class([range(48,57)]))],\n                {}),\n              [appl(\n                  regular(iter(\\char-class([range(48,57)]))),\n                  [char(51)],\n                  src=|unknown:///|(2,1,<1,2>,<1,3>))],\n              src=|unknown:///|(2,1,<1,2>,<1,3>))],\n          src=|unknown:///|(2,1,<1,2>,<1,3>)),appl(\n          prod(\n            layouts("LAYOUTLIST"),\n            [conditional(\n                \\iter-star(lex("LAYOUT")),\n                {\\not-follow(\\char-class([\n                        range(9,10),\n                        range(13,13),\n                        range(32,32)\n                      ]))})],\n            {}),\n          [appl(\n              regular(\\iter-star(lex("LAYOUT"))),\n              [],\n              src=|unknown:///|(3,0,<1,3>,<1,3>))],\n          src=|unknown:///|(3,0,<1,3>,<1,3>)),appl(\n          prod(\n            lit("*"),\n            [\\char-class([range(42,42)])],\n            {}),\n          [char(42)]),appl(\n          prod(\n            layouts("LAYOUTLIST"),\n            [conditional(\n                \\iter-star(lex("LAYOUT")),\n                {\\not-follow(\\char-class([\n                        range(9,10),\n                        range(13,13),\n                        range(32,32)\n                      ]))})],\n            {}),\n          [appl(\n              regular(\\iter-star(lex("LAYOUT"))),\n              [],\n              src=|unknown:///|(4,0,<1,4>,<1,4>))],\n          src=|unknown:///|(4,0,<1,4>,<1,4>)),appl(\n          prod(\n            label(\n              "con",\n              sort("Exp")),\n            [lex("IntegerLiteral")],\n            {}),\n          [appl(\n              prod(\n                lex("IntegerLiteral"),\n                [iter(\\char-class([range(48,57)]))],\n                {}),\n              [appl(\n         ...\n')),(0,r.kt)("p",null,"We can use ",(0,r.kt)("inlineCode",{parentName:"p"},"parse")," to define ",(0,r.kt)("inlineCode",{parentName:"p"},"load"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"module demo::lang::Exp::Combined::Automatic::Load\n\nimport demo::lang::Exp::Combined::Automatic::Parse;      \u2776  \nimport demo::lang::Exp::Abstract::Syntax;      \u2777  \nimport ParseTree;\n\nExp load(str txt) = implode(#Exp, parseExp(txt)); \n\n")),(0,r.kt)("p",null,"Notes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u2776  We also need the ",(0,r.kt)("inlineCode",{parentName:"li"},"parse")," function, as defined above."),(0,r.kt)("li",{parentName:"ul"},"\u2777  We also need the abstract syntax as already defined earlier in ","[Exp/Abstract]","."),(0,r.kt)("li",{parentName:"ul"},"\u2778  We need ","[Rascal:ParseTree]"," since it provides the ","[Rascal:implode]"," function.")),(0,r.kt)("p",null,"Let's try it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Exp::Combined::Automatic::Load;\nok\nrascal>load("2+3*4");\nExp: add(\n  con(\n    2,\n    src=|unknown:///|(0,1,<1,0>,<1,1>),\n    comments=()),\n  mul(\n    con(\n      3,\n      src=|unknown:///|(2,1,<1,2>,<1,3>),\n      comments=()),\n    con(\n      4,\n      src=|unknown:///|(4,1,<1,4>,<1,5>),\n      comments=()),\n    src=|unknown:///|(2,3,<1,2>,<1,5>),\n    comments=()),\n  src=|unknown:///|(0,5,<1,0>,<1,5>),\n  comments=())\n')),(0,r.kt)("p",null,"Remains the definition of the ",(0,r.kt)("inlineCode",{parentName:"p"},"eval")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'module demo::lang::Exp::Combined::Automatic::Eval\n\nimport demo::lang::Exp::Abstract::Eval;\nimport demo::lang::Exp::Combined::Automatic::Load;\n\nint eval(str txt) = eval(load(txt));\ntest bool tstEval2() = eval("7*3") == 21;\ntest bool tstEval3() = eval("7+3") == 10;\ntest bool tstEval4() = eval("3+4*5") == 23;\n\n')),(0,r.kt)("p",null,"Here is the end result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Exp::Combined::Automatic::Eval;\nok\nrascal>eval("2+3*4");\nint: 14\n')))}u.isMDXComponent=!0}}]);