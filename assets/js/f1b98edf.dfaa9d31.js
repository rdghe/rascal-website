"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[51844],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),s=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),m=n,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return r?a.createElement(f,o(o({ref:t},p),{},{components:r})):a.createElement(f,o({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},82375:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=r(83117),n=(r(67294),r(3905));const i={title:"Compiler"},o=void 0,l={unversionedId:"Rascalopedia/Compiler/index",id:"Rascalopedia/Compiler/index",title:"Compiler",description:"Synopsis",source:"@site/docs/Rascalopedia/Compiler/index.md",sourceDirName:"Rascalopedia/Compiler",slug:"/Rascalopedia/Compiler/",permalink:"/docs/Rascalopedia/Compiler/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascalopedia/Compiler/index.md",tags:[],version:"current",frontMatter:{title:"Compiler"},sidebar:"tutorialSidebar",previous:{title:"Abstract Syntax Tree",permalink:"/docs/Rascalopedia/AbstractSyntaxTree/"},next:{title:"Domain Specific Language",permalink:"/docs/Rascalopedia/DomainSpecificLanguage/"}},c={},s=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Usage",id:"usage",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],p={toc:s};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"synopsis"},"Synopsis"),(0,n.kt)("p",null,"Tranform source code to an executable form."),(0,n.kt)("h4",{id:"syntax"},"Syntax"),(0,n.kt)("h4",{id:"types"},"Types"),(0,n.kt)("h4",{id:"function"},"Function"),(0,n.kt)("h4",{id:"usage"},"Usage"),(0,n.kt)("h4",{id:"description"},"Description"),(0,n.kt)("p",null,"A ",(0,n.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Compiler"},"compiler")," transforms the source code of a program (in a source langue) to an executable form\n(in a target language)\nand consists of the following phases:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs//Rascalopedia/Parser"},"Parser"),": read the source code and build an ",(0,n.kt)("a",{parentName:"li",href:"/docs//Rascalopedia/AbstractSyntaxTree"},"Abstract Syntax Tree"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs//Rascalopedia/Typechecker"},"Typechecker"),": perform a semantic analysis of the code, resolve all names\nand verify that the program is type correct."),(0,n.kt)("li",{parentName:"ul"},"Optimisation: perform optimisations (e.g., constant folding, dead code elimination, call unfolding).\nThis can be seen as a form of ",(0,n.kt)("a",{parentName:"li",href:"/docs//Rascalopedia/Refactoring"},"Refactoring"),"."),(0,n.kt)("li",{parentName:"ul"},"Code generation: generate the final code, this can be asembly language or directly executable code.")),(0,n.kt)("h4",{id:"examples"},"Examples"),(0,n.kt)("h4",{id:"benefits"},"Benefits"))}d.isMDXComponent=!0}}]);