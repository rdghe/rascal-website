"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[74084],{3905:(a,e,r)=>{r.d(e,{Zo:()=>c,kt:()=>d});var t=r(67294);function n(a,e,r){return e in a?Object.defineProperty(a,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):a[e]=r,a}function l(a,e){var r=Object.keys(a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(a);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),r.push.apply(r,t)}return r}function i(a){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?l(Object(r),!0).forEach((function(e){n(a,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(r,e))}))}return a}function o(a,e){if(null==a)return{};var r,t,n=function(a,e){if(null==a)return{};var r,t,n={},l=Object.keys(a);for(t=0;t<l.length;t++)r=l[t],e.indexOf(r)>=0||(n[r]=a[r]);return n}(a,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(a);for(t=0;t<l.length;t++)r=l[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(a,r)&&(n[r]=a[r])}return n}var s=t.createContext({}),m=function(a){var e=t.useContext(s),r=e;return a&&(r="function"==typeof a?a(e):i(i({},e),a)),r},c=function(a){var e=m(a.components);return t.createElement(s.Provider,{value:e},a.children)},u={inlineCode:"code",wrapper:function(a){var e=a.children;return t.createElement(t.Fragment,{},e)}},g=t.forwardRef((function(a,e){var r=a.components,n=a.mdxType,l=a.originalType,s=a.parentName,c=o(a,["components","mdxType","originalType","parentName"]),g=m(r),d=n,p=g["".concat(s,".").concat(d)]||g[d]||u[d]||l;return r?t.createElement(p,i(i({ref:e},c),{},{components:r})):t.createElement(p,i({ref:e},c))}));function d(a,e){var r=arguments,n=e&&e.mdxType;if("string"==typeof a||n){var l=r.length,i=new Array(l);i[0]=g;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=a,o.mdxType="string"==typeof a?a:n,i[1]=o;for(var m=2;m<l;m++)i[m]=r[m];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},48111:(a,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var t=r(83117),n=(r(67294),r(3905));const l={title:"lang::rascal::grammar::SyntaxTreeGenerator"},i=void 0,o={unversionedId:"Library/lang/rascal/grammar/SyntaxTreeGenerator",id:"Library/lang/rascal/grammar/SyntaxTreeGenerator",title:"lang::rascal::grammar::SyntaxTreeGenerator",description:"Usage",source:"@site/docs/Library/lang/rascal/grammar/SyntaxTreeGenerator.md",sourceDirName:"Library/lang/rascal/grammar",slug:"/Library/lang/rascal/grammar/SyntaxTreeGenerator",permalink:"/docs/Library/lang/rascal/grammar/SyntaxTreeGenerator",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/lang/rascal/grammar/SyntaxTreeGenerator.md",tags:[],version:"current",frontMatter:{title:"lang::rascal::grammar::SyntaxTreeGenerator"},sidebar:"tutorialSidebar",previous:{title:"lang::rascal::grammar::ParserGenerator",permalink:"/docs/Library/lang/rascal/grammar/ParserGenerator"},next:{title:"lang::rascal::grammar::analyze",permalink:"/docs/Library/lang/rascal/grammar/analyze/"}},s={},m=[{value:"Usage",id:"usage",level:4},{value:"data AST",id:"lang-rascal-grammar-SyntaxTreeGenerator-AST",level:2},{value:"data Sig",id:"lang-rascal-grammar-SyntaxTreeGenerator-Sig",level:2},{value:"data Arg",id:"lang-rascal-grammar-SyntaxTreeGenerator-Arg",level:2},{value:"function isBreakable",id:"lang-rascal-grammar-SyntaxTreeGenerator-isBreakable",level:2},{value:"function grammarToASTModel",id:"lang-rascal-grammar-SyntaxTreeGenerator-grammarToASTModel",level:2},{value:"function grammarToJavaAPI",id:"lang-rascal-grammar-SyntaxTreeGenerator-grammarToJavaAPI",level:2},{value:"function grammarToVisitor",id:"lang-rascal-grammar-SyntaxTreeGenerator-grammarToVisitor",level:2},{value:"function grammarToASTClasses",id:"lang-rascal-grammar-SyntaxTreeGenerator-grammarToASTClasses",level:2},{value:"function classForSort",id:"lang-rascal-grammar-SyntaxTreeGenerator-classForSort",level:2},{value:"function classForProduction",id:"lang-rascal-grammar-SyntaxTreeGenerator-classForProduction",level:2},{value:"function makeMonotonic",id:"lang-rascal-grammar-SyntaxTreeGenerator-makeMonotonic",level:2},{value:"function nullableHashCode",id:"lang-rascal-grammar-SyntaxTreeGenerator-nullableHashCode",level:2},{value:"function nullableEquals",id:"lang-rascal-grammar-SyntaxTreeGenerator-nullableEquals",level:2},{value:"function lexicalClass",id:"lang-rascal-grammar-SyntaxTreeGenerator-lexicalClass",level:2},{value:"function productionArgs",id:"lang-rascal-grammar-SyntaxTreeGenerator-productionArgs",level:2},{value:"function signature",id:"lang-rascal-grammar-SyntaxTreeGenerator-signature",level:2},{value:"function actuals",id:"lang-rascal-grammar-SyntaxTreeGenerator-actuals",level:2},{value:"function cloneActuals",id:"lang-rascal-grammar-SyntaxTreeGenerator-cloneActuals",level:2},{value:"function construct",id:"lang-rascal-grammar-SyntaxTreeGenerator-construct",level:2},{value:"function loggedWriteFile",id:"lang-rascal-grammar-SyntaxTreeGenerator-loggedWriteFile",level:2}],c={toc:m};function u(a){let{components:e,...r}=a;return(0,n.kt)("wrapper",(0,t.Z)({},c,r,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"usage"},"Usage"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"import lang::rascal::grammar::SyntaxTreeGenerator;")),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-AST"},"data AST"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal"},"data AST  \n     = ast(str name, set[Sig] sigs)\n     | leaf(str name)\n     ;\n")),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-Sig"},"data Sig"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal"},"data Sig  \n     = sig(str name, list[Arg] args, bool breakable = false)\n     ;\n")),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-Arg"},"data Arg"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal"},"data Arg  \n     = arg(str typ, str name, bool isOptional = false)\n     ;\n")),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-isBreakable"},"function isBreakable"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},'bool isBreakable(prod(_,_,{\\tag("breakable"()), *_}))')),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"default bool isBreakable(Production p)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-grammarToASTModel"},"function grammarToASTModel"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"set[AST] grammarToASTModel(str pkg, Grammar g)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-grammarToJavaAPI"},"function grammarToJavaAPI"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"void grammarToJavaAPI(loc outdir, str pkg, Grammar g)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-grammarToVisitor"},"function grammarToVisitor"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"void grammarToVisitor(loc outdir, str pkg, set[AST] asts, str licenseHeader = header)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-grammarToASTClasses"},"function grammarToASTClasses"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"void grammarToASTClasses(loc outdir, str pkg, set[AST] asts, str licenseHeader = header)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-classForSort"},"function classForSort"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str classForSort(str pkg, list[str] imports, AST ast)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-classForProduction"},"function classForProduction"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str classForProduction(str _, str super, Sig sig)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-makeMonotonic"},"function makeMonotonic"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str makeMonotonic(arg(str typ, _, isOptional = true))")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str makeMonotonic(arg(str typ, _, isOptional = false))"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-nullableHashCode"},"function nullableHashCode"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str nullableHashCode(arg(_, str name, isOptional = true))")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str nullableHashCode(arg(_, str name, isOptional = false))"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-nullableEquals"},"function nullableEquals"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str nullableEquals(arg(_, str name, isOptional = true))")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str nullableEquals(arg(_, str name, isOptional = false))"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-lexicalClass"},"function lexicalClass"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str lexicalClass(str name)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-productionArgs"},"function productionArgs"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[Arg] productionArgs(str pkg, Production p)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-signature"},"function signature"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str signature(list[Arg] args)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-actuals"},"function actuals"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str actuals(list[Arg] args)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-cloneActuals"},"function cloneActuals"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str cloneActuals(list[Arg] args)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-construct"},"function construct"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str construct(Sig sig)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-SyntaxTreeGenerator-loggedWriteFile"},"function loggedWriteFile"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"void loggedWriteFile(loc file, str src, str licenseHeader)"))))}u.isMDXComponent=!0}}]);