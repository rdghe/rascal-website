"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[17645],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,k=c["".concat(o,".").concat(d)]||c[d]||m[d]||l;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},30771:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var a=n(83117),r=(n(67294),n(3905));const l={title:"Func"},i=void 0,p={unversionedId:"Recipes/Languages/Func/index",id:"Recipes/Languages/Func/index",title:"Func",description:"Synopsis",source:"@site/docs/Recipes/Languages/Func/index.md",sourceDirName:"Recipes/Languages/Func",slug:"/Recipes/Languages/Func/",permalink:"/docs/Recipes/Languages/Func/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Recipes/Languages/Func/index.md",tags:[],version:"current",frontMatter:{title:"Func"},sidebar:"tutorialSidebar",previous:{title:"With Layout",permalink:"/docs/Recipes/Languages/Exp/Concrete/WithLayout/"},next:{title:"Abstract Syntax",permalink:"/docs/Recipes/Languages/Func/AbstractSyntax/"}},o={},s=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],u={toc:s};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Func is a tiny functional language; we present several interpreters for it."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"Func is a functional language with the following features:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A program consists of a number of function declarations."),(0,r.kt)("li",{parentName:"ul"},"A function declaration consists of a name, zero or more formal parameter names and an expression."),(0,r.kt)("li",{parentName:"ul"},"An expression can be one of:\n",(0,r.kt)("strong",{parentName:"li"},"  an integer constant.\n"),"  a variable.\n",(0,r.kt)("strong",{parentName:"li"},"  arithmetic operators ",(0,r.kt)("inlineCode",{parentName:"strong"},"+"),", ",(0,r.kt)("inlineCode",{parentName:"strong"},"-"),", ",(0,r.kt)("inlineCode",{parentName:"strong"},"*")," and ",(0,r.kt)("inlineCode",{parentName:"strong"},"/"),".\n"),"  comparison operators ",(0,r.kt)("inlineCode",{parentName:"li"},"<"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"\\<="),", ",(0,r.kt)("inlineCode",{parentName:"li"},">")," and ",(0,r.kt)("inlineCode",{parentName:"li"},">="),".\n",(0,r.kt)("strong",{parentName:"li"},"  a call of a function.\n"),"  an ",(0,r.kt)("inlineCode",{parentName:"li"},"if")," expression.\n",(0,r.kt)("strong",{parentName:"li"},"  a sequence of expressions (",(0,r.kt)("inlineCode",{parentName:"strong"},";"),").\n"),"  an assignment (",(0,r.kt)("inlineCode",{parentName:"li"},":="),").\n",(0,r.kt)("strong",{parentName:"li"},"  a ",(0,r.kt)("inlineCode",{parentName:"strong"},"let")," expression to introduce new bindings for local variables.\n"),"  an address of a variables (denoted by ",(0,r.kt)("inlineCode",{parentName:"li"},"&"),").\n*",(0,r.kt)("em",{parentName:"li"},"  derefence of a variable (denoted by `"),"`).")),(0,r.kt)("p",null,"Some features add more complexity to an interpreter, therefore\nwe present four interpreters ",(0,r.kt)("a",{parentName:"p",href:"../../../Recipes/Languages/Func/Eval0"},"Eval0"),", ",(0,r.kt)("a",{parentName:"p",href:"../../../Recipes/Languages/Func/Eval1"},"Eval1"),", ",(0,r.kt)("a",{parentName:"p",href:"../../../Recipes/Languages/Func/Eval2"},"Eval2")," and ",(0,r.kt)("a",{parentName:"p",href:"../../../Recipes/Languages/Func/Eval2"},"Eval2"),"\nthat implement increasingly complex features:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Feature"),(0,r.kt)("th",{parentName:"tr",align:null},"Eval0"),(0,r.kt)("th",{parentName:"tr",align:null},"Eval1"),(0,r.kt)("th",{parentName:"tr",align:null},"Eval2"),(0,r.kt)("th",{parentName:"tr",align:null},"Eval3"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"function declaration"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"integer constant"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"variable"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"arithmetic operators"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"comparison operators"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"call"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"if"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"let"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sequence"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"assignment"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"address operator"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dereference operator"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"y")))),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Here are several versions of the factorial function\nthat use more and more features of the Func language:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"F0.func"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"fact(n) = if n <= 1 then\n             1 \n          else \n             n * fact(n-1)\n          end\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"F1.func"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"fact(n) = let\n            x = n\n          in\n            if x <= 1 then \n               x \n            else \n               x * fact(x-1)\n            end\n          end\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"F2.func"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"fact(n) = if n <= 1 then \n             n := 1\n          else \n             n := n * fact(n-1)\n          end;\n          n\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"F3.func"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"swap(a, b) =\n          let \n            temp = *a\n          in\n            *a := *b;\n            *b := temp\n          end\n\nfact(n) = let\n            x = 1,\n            y = 0\n          in\n            if n <= 1 then \n               x := 1\n            else \n               x := n * fact(n-1)\n            end;\n            swap(&x, &y);\n            y\n          end\n")),(0,r.kt)("p",null,"For convenience, we use two versions of these examples for each ",(0,r.kt)("em",{parentName:"p"},"F"),"~i~:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A file ",(0,r.kt)("em",{parentName:"li"},"F~i~"),(0,r.kt)("inlineCode",{parentName:"li"},".func")," that contains the code as shown above."),(0,r.kt)("li",{parentName:"ul"},"A file ",(0,r.kt)("em",{parentName:"li"},"F~i~"),(0,r.kt)("inlineCode",{parentName:"li"},".rsc")," a Rascal file that declares a string variable ",(0,r.kt)("em",{parentName:"li"},"F~i~")," with the same content.")),(0,r.kt)("p",null,"For instance, ",(0,r.kt)("inlineCode",{parentName:"p"},"F0.rsc")," looks like this "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'module demo::lang::Func::programs::F0\n\npublic str F0 =\n"fact(n) = if n \\<= 1 then\n             1 \n          else \n             n * fact(n-1)\n          end";\n')),(0,r.kt)("p",null,"NOTE: Note the escaped ",(0,r.kt)("inlineCode",{parentName:"p"},"<")," character in ",(0,r.kt)("inlineCode",{parentName:"p"},"\\\\<="),". This is necessary since ",(0,r.kt)("inlineCode",{parentName:"p"},"<")," and ",(0,r.kt)("inlineCode",{parentName:"p"},">")," are used\nin strings to enclose interpolations (insertion of the value of a Rascal expression).\nBoth symbols need to be escaped when used as literal symbol and not as interpolation."))}m.isMDXComponent=!0}}]);