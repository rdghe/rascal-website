"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[64556],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,h=c["".concat(s,".").concat(d)]||c[d]||u[d]||i;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},14849:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={title:"Enumerator",keywords:["<-"]},o=void 0,l={unversionedId:"Rascal/Expressions/Comprehensions/Enumerator/index",id:"Rascal/Expressions/Comprehensions/Enumerator/index",title:"Enumerator",description:"Synopsis",source:"@site/docs/Rascal/Expressions/Comprehensions/Enumerator/index.md",sourceDirName:"Rascal/Expressions/Comprehensions/Enumerator",slug:"/Rascal/Expressions/Comprehensions/Enumerator/",permalink:"/docs/Rascal/Expressions/Comprehensions/Enumerator/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Rascal/Expressions/Comprehensions/Enumerator/index.md",tags:[],version:"current",frontMatter:{title:"Enumerator",keywords:["<-"]},sidebar:"tutorialSidebar",previous:{title:"Comprehensions",permalink:"/docs/Rascal/Expressions/Comprehensions/"},next:{title:"Filter",permalink:"/docs/Rascal/Expressions/Comprehensions/Filter/"}},s={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],m={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Enumerate all values in a given subject value."),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Pattern <- Exp")),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"An enumerator generates all the values in a given subject value.\nFor elementary types (",(0,r.kt)("inlineCode",{parentName:"p"},"bool"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"real"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"num"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"loc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"datetime"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"str"),") this is just a singleton.\nFor composite types (",(0,r.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"set"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"map"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"tuple"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"rel"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"node"),") the values of their elements,\nrespectively, their direct children are enumerated. An enumerator is evaluated as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Expression ",(0,r.kt)("em",{parentName:"p"},"Exp")," is evaluated and may have an arbitrary value ",(0,r.kt)("em",{parentName:"p"},"V"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The elements of ",(0,r.kt)("em",{parentName:"p"},"V")," are enumerated one by one.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Each element value is matched against the pattern ",(0,r.kt)("em",{parentName:"p"},"Pattern"),". There are two cases:"),(0,r.kt)("p",{parentName:"li"},"** The match succeeds, any variables in ",(0,r.kt)("em",{parentName:"p"},"Pattern")," are bound, and the next generator in the comprehension is evaluated.\nThe variables that are introduced by an enumerator are only available to generators that appear later (i.e., to the right)\nin the comprehension. When this enumerator is the last generator in the comprehension,\nthe contributing expressions of the comprehension are evaluated."),(0,r.kt)("p",{parentName:"li"},"** The match fails, no variables are bound. If ",(0,r.kt)("em",{parentName:"p"},"V")," has more elements, a next element is tried.\nOtherwise, a previous generator (i.e., to the left) is tried. If this enumerator is the first generator in the comprehension,\nthe evaluation of the comprehension is complete."))),(0,r.kt)("p",null,"Type information is used to check the validity of an enumerator and guard you against mistakes.\nAn impossible enumerator like "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'int N <- {"apples", "oranges"}\n')),(0,r.kt)("p",null,"will be flagged as an error since the pattern can never match."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Here are some examples of enumerators:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"int N <- {1, 2, 3, 4, 5}"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"str K <- KEYWORDS"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"KEYWORDS")," should evaluate to a value of ",(0,r.kt)("inlineCode",{parentName:"p"},"set[str]"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'<str K, int N> <- {<"a",10>, <"b",20>, <"c",30>}'),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"<str K, int N> <- FREQUENCIES"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"FREQUENCIES")," should evaluate to a value of type ",(0,r.kt)("inlineCode",{parentName:"p"},"rel[str,int]"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"<str K, 10> <- FREQUENCIES"),", will only generate pairs with ",(0,r.kt)("inlineCode",{parentName:"p"},"10")," as second element.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"int N <- 17"),", will only generate the value ",(0,r.kt)("inlineCode",{parentName:"p"},"17"),"."))),(0,r.kt)("p",null,"Here are examples of enumerators in action:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>[ N * N | int N <- [1, 2, 3, 4, 5] ];\nlist[int]: [1,4,9,16,25]\nrascal>{<N, K> | <str K, int N> <- {<"a",10>, <"b",20>, <"c",30>}};\nrel[int,str]: {\n  <10,"a">,\n  <20,"b">,\n  <30,"c">\n}\n')))}u.isMDXComponent=!0}}]);