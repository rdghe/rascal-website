"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[36732],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=s(n),u=r,h=m["".concat(p,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},33366:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={title:"Typecheck"},l=void 0,o={unversionedId:"Recipes/Languages/Pico/Typecheck/index",id:"Recipes/Languages/Pico/Typecheck/index",title:"Typecheck",description:"Synopsis",source:"@site/docs/Recipes/Languages/Pico/Typecheck/index.md",sourceDirName:"Recipes/Languages/Pico/Typecheck",slug:"/Recipes/Languages/Pico/Typecheck/",permalink:"/docs/Recipes/Languages/Pico/Typecheck/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Recipes/Languages/Pico/Typecheck/index.md",tags:[],version:"current",frontMatter:{title:"Typecheck"},sidebar:"tutorialSidebar",previous:{title:"Syntax",permalink:"/docs/Recipes/Languages/Pico/Syntax/"},next:{title:"Uninit",permalink:"/docs/Recipes/Languages/Pico/Uninit/"}},p={},s=[{value:"Synopsis",id:"synopsis",level:4},{value:"Examples",id:"examples",level:4}],c={toc:s};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Typechecker for Pico programs."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Recall the following properties of Pico that are relevant for type checking:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"There are two types: natural numbers and strings.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Variables have to be declared.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Expressions may contain naturals, strings, variables, addition (",(0,r.kt)("inlineCode",{parentName:"p"},"+"),"), subtraction (",(0,r.kt)("inlineCode",{parentName:"p"},"-"),") and concatenation (",(0,r.kt)("inlineCode",{parentName:"p"},"||"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The operators ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"-")," have operands of type natural and their result is natural.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The operator ",(0,r.kt)("inlineCode",{parentName:"p"},"||")," has operands of type string and its results is also of type string.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Tests in if-then-else statement and while-statement should be of type natural."))),(0,r.kt)("p",null,"The type checker is going to check these rules and will produce an error message when they are violated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'module demo::lang::Pico::Typecheck\n\nimport Prelude;\nimport demo::lang::Pico::Abstract;\nimport demo::lang::Pico::Load;\n\nalias TENV = tuple[ map[PicoId, TYPE] symbols, list[tuple[loc l, str msg]] errors]; \n\n// highlight-next-line\nTENV addError(TENV env, loc l, str msg) = env[errors = env.errors + <l, msg>]; \n\n// highlight-next-line\nstr required(TYPE t, str got) = "Required <getName(t)>, but got <got>"; \nstr required(TYPE t1, TYPE t2) = required(t1, getName(t2));\n\n\nTENV checkExp(exp:natCon(int N), TYPE req, TENV env) = // <4>\n  req == natural() ? env : addError(env, exp.src, required(req, "natural"));\n\nTENV checkExp(exp:strCon(str S), TYPE req, TENV env) =\n req == string() ? env : addError(env, exp.src, required(req, "string"));\n\nTENV checkExp(exp:id(PicoId Id), TYPE req, TENV env) { // <5>\n  if(!env.symbols[Id]?)\n     return addError(env, exp.src, "Undeclared variable <Id>");\n  tpid = env.symbols[Id];\n  return req == tpid ? env : addError(env, exp.src, required(req, tpid));\n}\n\nTENV checkExp(exp:add(EXP E1, EXP E2), TYPE req, TENV env) = // <6>\n  natural() := req ? checkExp(E1, natural(), checkExp(E2, natural(), env))\n                   : addError(env, exp.src, required(req, "natural"));\n  \nTENV checkExp(exp:sub(EXP E1, EXP E2), TYPE req, TENV env) = // <7>\n  natural() := req ? checkExp(E1, natural(), checkExp(E2, natural(), env))\n                   : addError(env, exp.src, required(req, "natural"));\n\nTENV checkExp(exp:conc(EXP E1, EXP E2), TYPE req, TENV env) = // <8>  \n  string() := req ? checkExp(E1, string(), checkExp(E2, string(), env))\n                   : addError(env, exp.src, required(req, "string"));\n\n\n\nTENV checkStat(stat:asgStat(PicoId Id, EXP Exp), TENV env) { // <9>\n  if(!env.symbols[Id]?)\n     return addError(env, stat.src, "Undeclared variable <Id>");\n  tpid = env.symbols[Id];\n  return checkExp(Exp, tpid, env);\n}\n    \nTENV checkStat(stat:ifElseStat(EXP Exp, // <10>\n                              list[STATEMENT] Stats1,\n                              list[STATEMENT] Stats2),\n               TENV env){\n    env0 = checkExp(Exp, natural(), env);\n    env1 = checkStats(Stats1, env0);\n    env2 = checkStats(Stats2, env1);\n    return env2;\n}\n\nTENV checkStat(stat:whileStat(EXP Exp, \n                             list[STATEMENT] Stats1),\n                 TENV env) {\n    env0 = checkExp(Exp, natural(), env);\n    env1 = checkStats(Stats1, env0);\n    return env1;\n}\n\n\n// highlight-next-line\nTENV checkStats(list[STATEMENT] Stats1, TENV env) { \n  for(S <- Stats1){\n      env = checkStat(S, env);\n  }\n  return env;\n}\n  \n\n// highlight-next-line\nTENV checkDecls(list[DECL] Decls) = \n    <( Id : tp | decl(PicoId Id, TYPE tp) <- Decls), []>;\n\n\n// highlight-next-line\nTENV checkProgram(program(list[DECL] Decls, list[STATEMENT] Series)) { \n    return checkStats(Series, checkDecls(Decls));\n}\n\n// highlight-next-line\nlist[tuple[loc l, str msg]] checkProgram(str txt) = checkProgram(load(txt)).errors;\n    \n\n')),(0,r.kt)("p",null,"Notes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We will use ",(0,r.kt)("inlineCode",{parentName:"p"},"TENV")," (short for type environment, as an alias for a tuple that contains all relevant type information:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"symbols"),": a map from Pico identifiers to their declared type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"errors"),": a list of error messages. An error message is represented by its location (where the error occurred) and a textual message."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"addError")," is an auxiliary function to add in a given type environment an error message to the list of errors. It returns a new type environment.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"required"),"is an auxiliarty function to produce readable messages, e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},'"Required natural, got string"'),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The actual type checking is done by the functions ",(0,r.kt)("inlineCode",{parentName:"p"},"checkExp"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"checkStat"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"checkStats"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"checkDecls")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"checkProgram"),". They all have three arguments:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"the program fragment (an abstract syntax tree) to be checked.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"the required type of that fragment.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"the type environment."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"checkExp")," checks expressions. For instance, checking a natural constant (",(0,r.kt)("inlineCode",{parentName:"p"},"natCon"),") is ok when type ",(0,r.kt)("inlineCode",{parentName:"p"},"natural")," is expected but will give an error message when a ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," is expected. Observe how all the arguments of the check functions have a labeled pattern as first argument, here ",(0,r.kt)("inlineCode",{parentName:"p"},"exp:natCon(int N)"),". The benefit is that the whole argument is available inside the function (as value of variable ",(0,r.kt)("inlineCode",{parentName:"p"},"exp"),") and this can be used to retrieve the location information from it (",(0,r.kt)("inlineCode",{parentName:"p"},"exp@location"),") when an error has to be created.")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"An important case is to check whether an identifier has been defined and, if so, whether it is defined with the expected type.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Check ",(0,r.kt)("inlineCode",{parentName:"p"},"add"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Check ",(0,r.kt)("inlineCode",{parentName:"p"},"sub"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Check ",(0,r.kt)("inlineCode",{parentName:"p"},"conc"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"An assignment statement is checked: the identifier on the left-hand side should have been declared and should be type compatible with the expression on the right-hand side.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Checking if- and while-statements amounts to checking the embedded statements and ensuring that the type of the test is natural.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Checking a list of statements amounts to checking each statement in the list.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Checking declarations amounts to extracting each (id, type) pair form the declarations and using a map comprehension to build a type environment.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Checking a complete Pico program is achieved by first checking the declarations of the program and using the resulting type environment to check its body.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"checkProgram")," defines how to check the source code of a given Pico program."))),(0,r.kt)("p",null,"Checking an erroneous program goes like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Pico::Typecheck;\nok\nrascal>checkProgram("begin declare  x : natural; x := \\"abc\\" end");\nlrel[loc l,str msg]: [<|unknown:///|(33,5,<1,33>,<1,38>),"Required natural, but got string">]\n')),(0,r.kt)("p",null,"The error location will be use later to give specific messages in the IDE."))}d.isMDXComponent=!0}}]);