"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[83410],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),s=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(a),f=r,y=u["".concat(i,".").concat(f)]||u[f]||d[f]||o;return a?n.createElement(y,l(l({ref:t},p),{},{components:a})):n.createElement(y,l({ref:t},p))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=u;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var s=2;s<o;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},78800:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var n=a(83117),r=(a(67294),a(3905));const o={title:"Algebraic Data Type",keywords:["data"]},l=void 0,c={unversionedId:"Rascal/Declarations/AlgebraicDataType/index",id:"Rascal/Declarations/AlgebraicDataType/index",title:"Algebraic Data Type",description:"Synopsis",source:"@site/docs/Rascal/Declarations/AlgebraicDataType/index.md",sourceDirName:"Rascal/Declarations/AlgebraicDataType",slug:"/Rascal/Declarations/AlgebraicDataType/",permalink:"/docs/Rascal/Declarations/AlgebraicDataType/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Rascal/Declarations/AlgebraicDataType/index.md",tags:[],version:"current",frontMatter:{title:"Algebraic Data Type",keywords:["data"]},sidebar:"tutorialSidebar",previous:{title:"Declarations",permalink:"/docs/Rascal/Declarations/"},next:{title:"Alias Declaration",permalink:"/docs/Rascal/Declarations/Alias/"}},i={},s=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],p={toc:s};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Define a user-defined type (Algebraic Data Type)."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"In ordinary programming languages record types or classes exist to introduce a new type name for a collection of related,\nnamed, values and to provide access to the elements of such a collection through their name. "),(0,r.kt)("p",null,"In Rascal, algebraic data types provide this facility. They have to be declared, and\nthen values can be declared using calls to the declared constructor functions,\nsee ",(0,r.kt)("a",{parentName:"p",href:"../../../Rascal/Expressions/Values/Constructor"},"Constructor"),"."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"The following data declaration defines the datatype ",(0,r.kt)("inlineCode",{parentName:"p"},"Bool")," that contains various constants (",(0,r.kt)("inlineCode",{parentName:"p"},"tt()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ff()"),"\nand constructor functions ",(0,r.kt)("inlineCode",{parentName:"p"},"conj")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"disj"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>data Bool = tt() | ff() | conj(Bool L, Bool R)  | disj(Bool L, Bool R);\nok\n")),(0,r.kt)("p",null,"terms of type ",(0,r.kt)("inlineCode",{parentName:"p"},"Bool")," can be constructed using the defined constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>conj(tt(),ff());\nBool: conj(\n  tt(),\n  ff())\n")))}d.isMDXComponent=!0}}]);