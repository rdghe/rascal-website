"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[3941],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>d});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(t),d=a,m=p["".concat(s,".").concat(d)]||p[d]||f[d]||l;return t?n.createElement(m,i(i({ref:r},u),{},{components:t})):n.createElement(m,i({ref:r},u))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=p;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},98354:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var n=t(83117),a=(t(67294),t(3905));const l={title:"module lang::rsf::IO"},i=void 0,o={unversionedId:"Library/lang/rsf/IO",id:"Library/lang/rsf/IO",title:"module lang::rsf::IO",description:"Usage",source:"@site/docs/Library/lang/rsf/IO.md",sourceDirName:"Library/lang/rsf",slug:"/Library/lang/rsf/IO",permalink:"/docs/Library/lang/rsf/IO",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/lang/rsf/IO.md",tags:[],version:"current",frontMatter:{title:"module lang::rsf::IO"},sidebar:"tutorialSidebar",previous:{title:"lang::rsf",permalink:"/docs/Library/lang/rsf/"},next:{title:"lang::sdf2",permalink:"/docs/Library/lang/sdf2/"}},s={},c=[{value:"Usage",id:"usage",level:4},{value:"function readRSF",id:"lang-rsf-IO-readRSF",level:2},{value:"function getRSFTypes",id:"lang-rsf-IO-getRSFTypes",level:2},{value:"function readRSFRelation",id:"lang-rsf-IO-readRSFRelation",level:2},{value:"function generate",id:"lang-rsf-IO-generate",level:2}],u={toc:c};function f(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"import lang::rsf::IO;")),(0,a.kt)("h2",{id:"lang-rsf-IO-readRSF"},"function readRSF"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"map[str, rel[str,str]] readRSF(loc nameRSFFile)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"map[str, rel[str,str]] readRSF(loc nameRSFFile)"))),(0,a.kt)("p",null,"Read an RSF file."),(0,a.kt)("p",null,"Read relations from an RSF file. An RSF file contains tuples of binary relations\nin the following format:\nRelationName Arg1 Arg2\nwhere each field is separated by a tabulation character (\\t). One file may contain tuples for more than one relation. readRSF takes an RSF file nameRSFFile and generates a map[str,rel","[str,str]","] that maps each relation name to the actual relation."),(0,a.kt)("h2",{id:"lang-rsf-IO-getRSFTypes"},"function getRSFTypes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"map[str, type[value]] getRSFTypes(loc location)"))),(0,a.kt)("h2",{id:"lang-rsf-IO-readRSFRelation"},"function readRSFRelation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"&T readRSFRelation(type[&T] result, str name, loc location)"))),(0,a.kt)("h2",{id:"lang-rsf-IO-generate"},"function generate"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"str generate(str moduleName, loc uri)"))),(0,a.kt)("p",null,"  The RSF schema should be given as:\nrsf+rascal-file-uri\nwhere rascal-file-uri is a standard Rascal URI, for instance:\nrsf+file:///tmp/myRSFFile.rsf\nor\nrsf+project://MyProject/src/data/myRSFFile.rsf"))}f.isMDXComponent=!0}}]);