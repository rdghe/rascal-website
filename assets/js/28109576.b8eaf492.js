"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[21948],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||l;return t?r.createElement(h,i(i({ref:n},u),{},{components:t})):r.createElement(h,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},81266:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const l={title:"Listing"},i=void 0,o={unversionedId:"Tutor/Markup/InlineMarkup/Listing/index",id:"Tutor/Markup/InlineMarkup/Listing/index",title:"Listing",description:"Synopsis",source:"@site/docs/Tutor/Markup/InlineMarkup/Listing/index.md",sourceDirName:"Tutor/Markup/InlineMarkup/Listing",slug:"/Tutor/Markup/InlineMarkup/Listing/",permalink:"/docs/Tutor/Markup/InlineMarkup/Listing/",draft:!1,tags:[],version:"current",frontMatter:{title:"Listing"},sidebar:"tutorialSidebar",previous:{title:"Italic",permalink:"/docs/Tutor/Markup/InlineMarkup/Italic/"},next:{title:"Reference to Concept",permalink:"/docs/Tutor/Markup/InlineMarkup/ReferenceToConcept/"}},s={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Include some executing source code examples in the document"),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```language-name\nint fac(int n) {\n    if (n <= 0) {\n        return 1;\n    }\n    else {\n        return n * fac(n-1);\n    }\n}\n")),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You can use the triple backquotes to encapsulate a piece of literal source text. The language name indicates\nwhich syntax highlighter to use.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If you use ",(0,a.kt)("inlineCode",{parentName:"li"},"rascal-shell")," as a language name, then the code is executed line-by-line by a Rascal shell\nand the output is collected. "),(0,a.kt)("li",{parentName:"ul"},"With ",(0,a.kt)("inlineCode",{parentName:"li"},"rascal-prepare")," the code is executed in the current environment but no output is shown."),(0,a.kt)("li",{parentName:"ul"},"Finally using ",(0,a.kt)("inlineCode",{parentName:"li"},"rascal-include")," you can include modules from disk that are on the current search path."),(0,a.kt)("li",{parentName:"ul"},"Either ",(0,a.kt)("inlineCode",{parentName:"li"},"rascal-shell"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"rascal-prepare")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"rascal-include")," code with an unexpected error in it will ",(0,a.kt)("em",{parentName:"li"},"fail")," the documentation build and an error message will be reported. The build will continue to find other issues and compile all the other files."),(0,a.kt)("li",{parentName:"ul"},"Using the ",(0,a.kt)("inlineCode",{parentName:"li"},"error")," label to a code block, an error will be expected and simply rendered to the user. This is to demonstrate error messages to the reader."))),(0,a.kt)("li",{parentName:"ul"},'The "magic comments" ',(0,a.kt)("inlineCode",{parentName:"li"},"highlight-next-line"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"highlight-start"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"highlight-end")," give you a way to highlight\nselected lines in the code. Also you can use ranges like this ",(0,a.kt)("inlineCode",{parentName:"li"},"{1,4--6,9}"),".")),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"showLineNumbers")," to render line numbers in the code examples."),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```rascal-shell\nx = 1 + 1;\n```\n")),(0,a.kt)("p",null,"Would produce:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>x = 1 + 1;\nint: 2\n")),(0,a.kt)("p",null,"Using ",(0,a.kt)("inlineCode",{parentName:"p"},"continue")," you can continue where you've left off:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```rascal-shell,continue\nx + 1\n```\n")),(0,a.kt)("p",null,"Which results in:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>x + 1\nint: 3\n")),(0,a.kt)("p",null,"With ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," you can show an error message without the build failing:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```rascal-shell,error\nint x = 1;\ny + y;\n```\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",error",",error":!0},"rascal>int x = 1;\nint: 1\nrascal>y + y;\n|prompt:///|(0,1,<1,0>,<1,1>): Undeclared variable: y\nAdvice: |http://tutor.rascal-mpl.org/Errors/Static/UndeclaredVariable/UndeclaredVariable.html|\nok\n")),(0,a.kt)("p",null,'Or you could prepare something in "secretly":'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```rascal-prepare\nint x = 1;\n```\n")),(0,a.kt)("p",null,"Nothing is shown; the ",(0,a.kt)("inlineCode",{parentName:"p"},"prepare")," block is executed but hidden from view. Then use the context it created later. This is nice for generating example data in files or modules to import\nwithout bothering the reader with the details. Watch out: it is not smart to\nhide essential notions from the user. This feature is only for preparing a lesson, not to destroy it..."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```rascal-shell,continue\ny + y\n```\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>y + y\nint: 2\n")),(0,a.kt)("p",null,"Simply using ",(0,a.kt)("inlineCode",{parentName:"p"},"rascal")," as a language does not have all these effects:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```rascal\nint fac(0) = 1;\ndefault int fac(int n) = n * fac(n - 1);\n```\n")),(0,a.kt)("p",null,"That block simply produces this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"int fac(0) = 1;\ndefault int fac(int n) = n * fac(n - 1);\n")),(0,a.kt)("p",null,"Now we demonstrate line highlighting:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```rascal {2--7} showLineNumbers\nint fac(int n) {\n    if (n <= 0) {\n        return 1;\n    }\n    else {\n        return n * fac(n-1);\n    }\n}\n```\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal",metastring:"{2-7} showLineNumbers","{2-7}":!0,showLineNumbers:!0},"int fac(int n) {\n    if (n <= 0) {\n        return 1;\n    }\n    else {\n        return n * fac(n-1);\n    }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```rascal showLineNumbers\nint fac(int n) {\n    // highlight-next-line\n    if (n <= 0) {\n        return 1;\n    }\n    else {\n    // highlight-start\n        return n * fac(n-1);\n    // highlight-end\n    }\n}\n```\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal",metastring:"showLineNumbers",showLineNumbers:!0},"int fac(int n) {\n    // highlight-next-line\n    if (n <= 0) {\n        return 1;\n    }\n    else {\n    // highlight-start\n        return n * fac(n-1);\n    // highlight-end\n    }\n}\n")),(0,a.kt)("h4",{id:"benefits"},"Benefits"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'Code examples that run at documentation compile-time are "always" tested and correct when deployed.')))}p.isMDXComponent=!0}}]);