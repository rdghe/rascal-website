"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[71351],{3905:(e,n,l)=>{l.d(n,{Zo:()=>m,kt:()=>d});var t=l(67294);function i(e,n,l){return n in e?Object.defineProperty(e,n,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[n]=l,e}function a(e,n){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),l.push.apply(l,t)}return l}function r(e){for(var n=1;n<arguments.length;n++){var l=null!=arguments[n]?arguments[n]:{};n%2?a(Object(l),!0).forEach((function(n){i(e,n,l[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):a(Object(l)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(l,n))}))}return e}function s(e,n){if(null==e)return{};var l,t,i=function(e,n){if(null==e)return{};var l,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)l=a[t],n.indexOf(l)>=0||(i[l]=e[l]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)l=a[t],n.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(i[l]=e[l])}return i}var o=t.createContext({}),p=function(e){var n=t.useContext(o),l=n;return e&&(l="function"==typeof e?e(n):r(r({},n),e)),l},m=function(e){var n=p(e.components);return t.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var l=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(l),d=i,k=c["".concat(o,".").concat(d)]||c[d]||u[d]||a;return l?t.createElement(k,r(r({ref:n},m),{},{components:l})):t.createElement(k,r({ref:n},m))}));function d(e,n){var l=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=l.length,r=new Array(a);r[0]=c;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<a;p++)r[p]=l[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,l)}c.displayName="MDXCreateElement"},44738:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var t=l(83117),i=(l(67294),l(3905));const a={title:"module ListRelation"},r=void 0,s={unversionedId:"Library/ListRelation",id:"Library/ListRelation",title:"module ListRelation",description:"Usage",source:"@site/docs/Library/ListRelation.md",sourceDirName:"Library",slug:"/Library/ListRelation",permalink:"/docs/Library/ListRelation",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/ListRelation.md",tags:[],version:"current",frontMatter:{title:"module ListRelation"},sidebar:"tutorialSidebar",previous:{title:"module List",permalink:"/docs/Library/List"},next:{title:"module Location",permalink:"/docs/Library/Location"}},o={},p=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"function carrier",id:"ListRelation-carrier",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Examples",id:"examples",level:4},{value:"function carrierR",id:"ListRelation-carrierR",level:2},{value:"Synopsis",id:"synopsis-2",level:4},{value:"Description",id:"description-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"function carrierX",id:"ListRelation-carrierX",level:2},{value:"Synopsis",id:"synopsis-3",level:4},{value:"Description",id:"description-2",level:4},{value:"Examples",id:"examples-2",level:4},{value:"function complement",id:"ListRelation-complement",level:2},{value:"Synopsis",id:"synopsis-4",level:4},{value:"Description",id:"description-3",level:4},{value:"Examples",id:"examples-3",level:4},{value:"function domain",id:"ListRelation-domain",level:2},{value:"Synopsis",id:"synopsis-5",level:4},{value:"Description",id:"description-4",level:4},{value:"Examples",id:"examples-4",level:4},{value:"function domainR",id:"ListRelation-domainR",level:2},{value:"Synopsis",id:"synopsis-6",level:4},{value:"Description",id:"description-5",level:4},{value:"Examples",id:"examples-5",level:4},{value:"function domainX",id:"ListRelation-domainX",level:2},{value:"Synopsis",id:"synopsis-7",level:4},{value:"Description",id:"description-6",level:4},{value:"Examples",id:"examples-6",level:4},{value:"function groupDomainByRange",id:"ListRelation-groupDomainByRange",level:2},{value:"Synopsis",id:"synopsis-8",level:4},{value:"Examples",id:"examples-7",level:4},{value:"function groupRangeByDomain",id:"ListRelation-groupRangeByDomain",level:2},{value:"Synopsis",id:"synopsis-9",level:4},{value:"Description",id:"description-7",level:4},{value:"function ident",id:"ListRelation-ident",level:2},{value:"Synopsis",id:"synopsis-10",level:4},{value:"Description",id:"description-8",level:4},{value:"Examples",id:"examples-8",level:4},{value:"function invert",id:"ListRelation-invert",level:2},{value:"Synopsis",id:"synopsis-11",level:4},{value:"Examples",id:"examples-9",level:4},{value:"function range",id:"ListRelation-range",level:2},{value:"Synopsis",id:"synopsis-12",level:4},{value:"Description",id:"description-9",level:4},{value:"Examples",id:"examples-10",level:4},{value:"function rangeR",id:"ListRelation-rangeR",level:2},{value:"Synopsis",id:"synopsis-13",level:4},{value:"Description",id:"description-10",level:4},{value:"Examples",id:"examples-11",level:4},{value:"function rangeX",id:"ListRelation-rangeX",level:2},{value:"Synopsis",id:"synopsis-14",level:4},{value:"Description",id:"description-11",level:4},{value:"Examples",id:"examples-12",level:4},{value:"function index",id:"ListRelation-index",level:2},{value:"Synopsis",id:"synopsis-15",level:4},{value:"Description",id:"description-12",level:4},{value:"Examples",id:"examples-13",level:4}],m={toc:p};function u(e){let{components:n,...l}=e;return(0,i.kt)("wrapper",(0,t.Z)({},m,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"import ListRelation;")),(0,i.kt)("h4",{id:"synopsis"},"Synopsis"),(0,i.kt)("p",null,"Library functions for list relations."),(0,i.kt)("h4",{id:"description"},"Description"),(0,i.kt)("p",null,"For operators on listrelations see ",(0,i.kt)("a",{parentName:"p",href:"../Rascal/Expressions/Values/ListRelation"},"ListRelation")," in the Rascal Language Reference."),(0,i.kt)("p",null,"The following functions are defined for list relations :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/ListRelation#ListRelation-carrier"},"Library:function:List relation::carrier")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/ListRelation#ListRelation-carrierR"},"Library:function:List relation::carrierR")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/ListRelation#ListRelation-carrierX"},"Library:function:List relation::carrierX")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/ListRelation#ListRelation-complement"},"Library:function:List relation::complement")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/ListRelation#ListRelation-domain"},"Library:function:List relation::domain")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/ListRelation#ListRelation-domainR"},"Library:function:List relation::domainR")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/ListRelation#ListRelation-domainX"},"Library:function:List relation::domainX")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/ListRelation#ListRelation-groupDomainByRange"},"Library:function:List relation::group domain by range")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/ListRelation#ListRelation-groupRangeByDomain"},"Library:function:List relation::group range by domain")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/ListRelation#ListRelation-ident"},"Library:function:List relation::ident")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/ListRelation#ListRelation-index"},"Library:function:List relation::index")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/ListRelation#ListRelation-invert"},"Library:function:List relation::invert")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/ListRelation#ListRelation-range"},"Library:function:List relation::range")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/ListRelation#ListRelation-rangeR"},"Library:function:List relation::rangeR")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/ListRelation#ListRelation-rangeX"},"Library:function:List relation::rangeX"))),(0,i.kt)("h2",{id:"ListRelation-carrier"},"function carrier"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[&T]  carrier (lrel[&T,&T] R)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[&T]  carrier (lrel[&T,&T,&T] R)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[&T]  carrier (lrel[&T,&T,&T,&T] R)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[&T]  carrier (lrel[&T,&T,&T,&T,&T] R)"))),(0,i.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,i.kt)("p",null,"Return the list of all elements in any tuple in a list relation."),(0,i.kt)("h4",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import ListRelation;\nok\nrascal>carrier([<1,10>, <2,20>]);\nlist[int]: [1,10,2,20]\nrascal>carrier([<1,10,100,1000>, <2,20,200,2000>]);\nlist[int]: [1,10,100,1000,2,20,200,2000]\n")),(0,i.kt)("h2",{id:"ListRelation-carrierR"},"function carrierR"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T,&T] carrierR (lrel[&T,&T] R, set[&T] S)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T,&T,&T] carrierR (lrel[&T,&T,&T] R, set[&T] S)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T,&T,&T,&T] carrierR (lrel[&T,&T,&T,&T] R, set[&T] S)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T,&T,&T,&T,&T] carrierR (lrel[&T,&T,&T,&T,&T] R, set[&T] S)"))),(0,i.kt)("h4",{id:"synopsis-2"},"Synopsis"),(0,i.kt)("p",null,"A list relation restricted to certain element values in tuples."),(0,i.kt)("h4",{id:"description-1"},"Description"),(0,i.kt)("p",null,"Returns list relation ",(0,i.kt)("inlineCode",{parentName:"p"},"R")," restricted to tuples with elements in set ",(0,i.kt)("inlineCode",{parentName:"p"},"S"),"."),(0,i.kt)("h4",{id:"examples-1"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import ListRelation;\nok\nrascal>carrierR([<1,10>, <2,20>, <3,30>], {10, 1, 20});\nlrel[int,int]: [<1,10>]\n")),(0,i.kt)("h2",{id:"ListRelation-carrierX"},"function carrierX"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T,&T] carrierX (lrel[&T,&T] R, set[&T] S)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T,&T,&T] carrierX (lrel[&T,&T,&T] R, set[&T] S)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T,&T,&T,&T] carrierX (lrel[&T,&T,&T,&T] R, set[&T] S)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T,&T,&T,&T,&T] carrierX (lrel[&T,&T,&T,&T,&T] R, set[&T] S)"))),(0,i.kt)("h4",{id:"synopsis-3"},"Synopsis"),(0,i.kt)("p",null,"A list relation excluding tuples containing certain values."),(0,i.kt)("h4",{id:"description-2"},"Description"),(0,i.kt)("p",null,"Returns list relation ",(0,i.kt)("inlineCode",{parentName:"p"},"R")," excluding tuples with some element in ",(0,i.kt)("inlineCode",{parentName:"p"},"S"),"."),(0,i.kt)("h4",{id:"examples-2"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import ListRelation;\nok\nrascal>carrierX([<1,10>, <2,20>, <3,30>], {10, 1, 20});\nlrel[int,int]: [<3,30>]\n")),(0,i.kt)("h2",{id:"ListRelation-complement"},"function complement"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0, &T1] complement(lrel[&T0, &T1] R)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0, &T1, &T2] complement(lrel[&T0, &T1, &T2] R)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0, &T1, &T2, &T3] complement(lrel[&T0, &T1, &T2, &T3] R)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0, &T1, &T2, &T3, &T4] complement(lrel[&T0, &T1, &T2, &T3, &T4] R)"))),(0,i.kt)("h4",{id:"synopsis-4"},"Synopsis"),(0,i.kt)("p",null,"Complement of a list relation."),(0,i.kt)("h4",{id:"description-3"},"Description"),(0,i.kt)("p",null,"Given a list relation ",(0,i.kt)("inlineCode",{parentName:"p"},"R")," a new relation ",(0,i.kt)("inlineCode",{parentName:"p"},"U")," can be constructed that contains\nall possible tuples with element values that occur at corresponding tuple positions in ",(0,i.kt)("inlineCode",{parentName:"p"},"R"),".\nThe function ",(0,i.kt)("inlineCode",{parentName:"p"},"complement")," returns the complement of ",(0,i.kt)("inlineCode",{parentName:"p"},"R")," relative to ",(0,i.kt)("inlineCode",{parentName:"p"},"U"),", in other words: ",(0,i.kt)("inlineCode",{parentName:"p"},"U - R"),"."),(0,i.kt)("h4",{id:"examples-3"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import ListRelation;\nok\n")),(0,i.kt)("p",null,"Declare ",(0,i.kt)("inlineCode",{parentName:"p"},"R")," and compute corresponding ",(0,i.kt)("inlineCode",{parentName:"p"},"U"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>R = [<1,10>, <2, 20>, <3, 30>];\nlrel[int,int]: [\n  <1,10>,\n  <2,20>,\n  <3,30>\n]\nrascal>U = domain(R) * range(R);\nlrel[int,int]: [\n  <1,10>,\n  <1,20>,\n  <1,30>,\n  <2,10>,\n  <2,20>,\n  <2,30>,\n  <3,10>,\n  <3,20>,\n  <3,30>\n]\n")),(0,i.kt)("p",null,"Here is the complement of ",(0,i.kt)("inlineCode",{parentName:"p"},"R")," computed in two ways:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>U - R;\nlrel[int,int]: [\n  <1,20>,\n  <1,30>,\n  <2,10>,\n  <2,30>,\n  <3,10>,\n  <3,20>\n]\nrascal>complement([<1,10>, <2, 20>, <3, 30>]);\nlrel[int,int]: [\n  <1,20>,\n  <1,30>,\n  <2,10>,\n  <2,30>,\n  <3,10>,\n  <3,20>\n]\n")),(0,i.kt)("h2",{id:"ListRelation-domain"},"function domain"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[&T0] domain(lrel[&T0,&T1]             R)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[&T0] domain(lrel[&T0,&T1,&T2]         R)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[&T0] domain(lrel[&T0,&T1,&T2,&T3]     R)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[&T0] domain(lrel[&T0,&T1,&T2,&T3,&T4] R)"))),(0,i.kt)("h4",{id:"synopsis-5"},"Synopsis"),(0,i.kt)("p",null,"Domain of a list relation: a list consisting of the first element of each tuple, uniquely."),(0,i.kt)("h4",{id:"description-4"},"Description"),(0,i.kt)("p",null,"The domain can be seen as all possible inputs of the relation image operation. The\nresult contains elements (or tuples) in the order of appearance of the original relation,\nbut all occurences after the first occurrence of an element have been removed."),(0,i.kt)("h4",{id:"examples-4"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import ListRelation;\nok\nrascal>domain([<1,10>, <2,20>]);\nlist[int]: [1,2]\nrascal>domain([<"mon", 1>, <"tue", 2>]);\nlist[str]: ["mon","tue"]\n')),(0,i.kt)("h2",{id:"ListRelation-domainR"},"function domainR"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0,&T1] domainR (lrel[&T0,&T1] R, set[&T0] S)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0,&T1,&T2] domainR (lrel[&T0,&T1,&T2] R, set[&T0] S)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0,&T1,&T2,&T3] domainR (lrel[&T0,&T1,&T2,&T3] R, set[&T0] S)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0,&T1,&T2,&T3,&T4] domainR (lrel[&T0,&T1,&T2,&T3,&T4] R, set[&T0] S)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0,&T1] domainR (lrel[&T0,&T1] R, list[&T0] L)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0,&T1,&T2] domainR (lrel[&T0,&T1,&T2] R, list[&T0] L)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0,&T1,&T2,&T3] domainR (lrel[&T0,&T1,&T2,&T3] R, list[&T0] L)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0,&T1,&T2,&T3,&T4] domainR (lrel[&T0,&T1,&T2,&T3,&T4] R, list[&T0] L)"))),(0,i.kt)("h4",{id:"synopsis-6"},"Synopsis"),(0,i.kt)("p",null,"List relation restricted to certain domain elements."),(0,i.kt)("h4",{id:"description-5"},"Description"),(0,i.kt)("p",null,"Restriction of a list relation ",(0,i.kt)("inlineCode",{parentName:"p"},"R")," to tuples with first element in ",(0,i.kt)("inlineCode",{parentName:"p"},"S"),"."),(0,i.kt)("h4",{id:"examples-5"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import ListRelation;\nok\nrascal>domainR([<1,10>, <2,20>, <3,30>], {3, 1});\nlrel[int,int]: [\n  <1,10>,\n  <3,30>\n]\n")),(0,i.kt)("h2",{id:"ListRelation-domainX"},"function domainX"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0, &T1] domainX (lrel[&T0, &T1] R, set[&T0] S)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0, &T1, &T2] domainX (lrel[&T0, &T1, &T2] R, set[&T0] S)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0, &T1, &T2, &T3] domainX (lrel[&T0, &T1, &T2, &T3] R, set[&T0] S)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0, &T1, &T2, &T3, &T4] domainX (lrel[&T0, &T1, &T2, &T3, &T4] R, set[&T0] S)"))),(0,i.kt)("h4",{id:"synopsis-7"},"Synopsis"),(0,i.kt)("p",null,"List relation excluding certain domain values."),(0,i.kt)("h4",{id:"description-6"},"Description"),(0,i.kt)("p",null,"List relation ",(0,i.kt)("inlineCode",{parentName:"p"},"R")," excluding tuples with first element in ",(0,i.kt)("inlineCode",{parentName:"p"},"S"),"."),(0,i.kt)("h4",{id:"examples-6"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import ListRelation;\nok\nrascal>domainX([<1,10>, <2,20>, <3,30>], {3, 1});\nlrel[int,int]: [<2,20>]\n")),(0,i.kt)("h2",{id:"ListRelation-groupDomainByRange"},"function groupDomainByRange"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[list[&U]] groupDomainByRange(lrel[&U dom, &T ran] input)"))),(0,i.kt)("h4",{id:"synopsis-8"},"Synopsis"),(0,i.kt)("p",null,"Make sets of elements in the domain that relate to the same element in the range."),(0,i.kt)("h4",{id:"examples-7"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import ListRelation;\nok\nrascal>legs = [<"bird", 2>, <"dog", 4>, <"human", 2>, <"spider", 8>, <"millepede", 1000>, <"crab", 8>, <"cat", 4>];\nlrel[str,int]: [\n  <"bird",2>,\n  <"dog",4>,\n  <"human",2>,\n  <"spider",8>,\n  <"millepede",1000>,\n  <"crab",8>,\n  <"cat",4>\n]\nrascal>groupDomainByRange(legs);\nlist[list[str]]: [\n  ["bird","human"],\n  ["dog","cat"],\n  ["spider","crab"],\n  ["millepede"]\n]\n')),(0,i.kt)("h2",{id:"ListRelation-groupRangeByDomain"},"function groupRangeByDomain"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[list[&T]] groupRangeByDomain(lrel[&U dom, &T ran] input)"))),(0,i.kt)("h4",{id:"synopsis-9"},"Synopsis"),(0,i.kt)("p",null,"Make sets of elements in the range that relate to the same element in the domain."),(0,i.kt)("h4",{id:"description-7"},"Description"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import ListRelation;\nok\nrascal>skins = [<"bird", "feather">, <"dog", "fur">, <"tortoise", "shell">, <"human", "skin">, <"fish", "scale">, <"lizard", "scale">, <"crab", "shell">, <"cat", "fur">];\nlrel[str,str]: [\n  <"bird","feather">,\n  <"dog","fur">,\n  <"tortoise","shell">,\n  <"human","skin">,\n  <"fish","scale">,\n  <"lizard","scale">,\n  <"crab","shell">,\n  <"cat","fur">\n]\nrascal>groupRangeByDomain(skins);\nlist[list[str]]: [\n  ["feather"],\n  ["fur"],\n  ["shell"],\n  ["skin"],\n  ["scale"]\n]\n')),(0,i.kt)("h2",{id:"ListRelation-ident"},"function ident"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T, &T] ident (list[&T] S)"))),(0,i.kt)("h4",{id:"synopsis-10"},"Synopsis"),(0,i.kt)("p",null,"The identity list relation."),(0,i.kt)("h4",{id:"description-8"},"Description"),(0,i.kt)("p",null,"The identity list relation for set ",(0,i.kt)("inlineCode",{parentName:"p"},"S"),"."),(0,i.kt)("h4",{id:"examples-8"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import ListRelation;\nok\nrascal>ident(["mon", "tue", "wed"]);\nlrel[str,str]: [\n  <"mon","mon">,\n  <"tue","tue">,\n  <"wed","wed">\n]\n')),(0,i.kt)("h2",{id:"ListRelation-invert"},"function invert"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[            &T1,&T0] invert (lrel[&T0,&T1            ] R)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[        &T2,&T1,&T0] invert (lrel[&T0,&T1,&T2        ] R)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[    &T3,&T2,&T1,&T0] invert (lrel[&T0,&T1,&T2,&T3    ] R)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T4,&T3,&T2,&T1,&T0] invert (lrel[&T0,&T1,&T2,&T3,&T4] R)"))),(0,i.kt)("h4",{id:"synopsis-11"},"Synopsis"),(0,i.kt)("p",null,"Invert the tuples in a list relation."),(0,i.kt)("h4",{id:"examples-9"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import ListRelation;\nok\nrascal>invert([<1,10>, <2,20>]);\nlrel[int,int]: [\n  <10,1>,\n  <20,2>\n]\n")),(0,i.kt)("h2",{id:"ListRelation-range"},"function range"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[&T1]             range (lrel[&T0,&T1]             R)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T1,&T2]         range (lrel[&T0,&T1, &T2]        R)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T1,&T2,&T3]     range (lrel[&T0,&T1,&T2,&T3]     R)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T1,&T2,&T3,&T4] range (lrel[&T0,&T1,&T2,&T3,&T4] R)"))),(0,i.kt)("h4",{id:"synopsis-12"},"Synopsis"),(0,i.kt)("p",null,"The range is composed of all but the first element of each tuple of a list relation, uniquely."),(0,i.kt)("h4",{id:"description-9"},"Description"),(0,i.kt)("p",null,"The range can be seen as all the elements of in all possible images of the relation. The\nresult contains elements (or tuples) in the order of appearance of the original relation,\nbut all occurences after the first occurrence of an element have been removed."),(0,i.kt)("h4",{id:"examples-10"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import ListRelation;\nok\nrascal>range([<1,10>, <2,20>]);\nlist[int]: [10,20]\nrascal>range([<"mon", 1>, <"tue", 2>]);\nlist[int]: [1,2]\n')),(0,i.kt)("h2",{id:"ListRelation-rangeR"},"function rangeR"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0,&T1] rangeR (lrel[&T0,&T1] R, set[&T1] S)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0,&T1] rangeR (lrel[&T0,&T1] R, list[&T1] L)"))),(0,i.kt)("h4",{id:"synopsis-13"},"Synopsis"),(0,i.kt)("p",null,"List relation restricted to certain range values."),(0,i.kt)("h4",{id:"description-10"},"Description"),(0,i.kt)("p",null,"Restriction of binary list relation ",(0,i.kt)("inlineCode",{parentName:"p"},"R")," to tuples with second element in set ",(0,i.kt)("inlineCode",{parentName:"p"},"S"),"."),(0,i.kt)("h4",{id:"examples-11"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import ListRelation;\nok\nrascal>rangeR([<1,10>, <2,20>, <3,30>], {30, 10});\nlrel[int,int]: [\n  <1,10>,\n  <3,30>\n]\n")),(0,i.kt)("h2",{id:"ListRelation-rangeX"},"function rangeX"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0,&T1] rangeX (lrel[&T0,&T1] R, set[&T1] S)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lrel[&T0,&T1] rangeX (lrel[&T0,&T1] R, list[&T1] S)"))),(0,i.kt)("h4",{id:"synopsis-14"},"Synopsis"),(0,i.kt)("p",null,"List relation excluding certain range values."),(0,i.kt)("h4",{id:"description-11"},"Description"),(0,i.kt)("p",null,"Restriction of binary list relation ",(0,i.kt)("inlineCode",{parentName:"p"},"R")," to tuples with second element not in set ",(0,i.kt)("inlineCode",{parentName:"p"},"S"),"."),(0,i.kt)("h4",{id:"examples-12"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import ListRelation;\nok\nrascal>rangeX([<1,10>, <2,20>, <3,30>], {30, 10});\nlrel[int,int]: [<2,20>]\n")),(0,i.kt)("h2",{id:"ListRelation-index"},"function index"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"map[&K, set[&V]] index(lrel[&K, &V] R)"))),(0,i.kt)("h4",{id:"synopsis-15"},"Synopsis"),(0,i.kt)("p",null,"Listes a binary list relation as a map"),(0,i.kt)("h4",{id:"description-12"},"Description"),(0,i.kt)("p",null,"Converts a binary list relation to a map of the domain to a set of the range."),(0,i.kt)("h4",{id:"examples-13"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import ListRelation;\nok\nrascal>index([<1,10>, <2,20>, <3,30>, <30,10>]);\nmap[int, set[int]]: (\n  1:{10},\n  3:{30},\n  2:{20},\n  30:{10}\n)\n")))}u.isMDXComponent=!0}}]);