"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[24038],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(t),d=s,h=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return t?r.createElement(h,o(o({ref:n},c),{},{components:t})):r.createElement(h,o({ref:n},c))}));function d(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},95424:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=t(83117),s=(t(67294),t(3905));const a={title:"Comprehensions"},o=void 0,i={unversionedId:"RascalConcepts/Comprehensions/index",id:"RascalConcepts/Comprehensions/index",title:"Comprehensions",description:"Synopsis",source:"@site/docs/RascalConcepts/Comprehensions/index.md",sourceDirName:"RascalConcepts/Comprehensions",slug:"/RascalConcepts/Comprehensions/",permalink:"/docs/RascalConcepts/Comprehensions/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/RascalConcepts/Comprehensions/index.md",tags:[],version:"current",frontMatter:{title:"Comprehensions"},sidebar:"tutorialSidebar",previous:{title:"Code Models",permalink:"/docs/RascalConcepts/CodeModels/"},next:{title:"Control Structures",permalink:"/docs/RascalConcepts/ControlStructures/"}},p={},l=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],c={toc:l};function m(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h4",{id:"synopsis"},"Synopsis"),(0,s.kt)("p",null,"Comprehensions for generating values."),(0,s.kt)("h4",{id:"description"},"Description"),(0,s.kt)("p",null,"Comprehensions are a notation inspired by mathematical ",(0,s.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Set-builder_notation"},"set-builder notation"),"\nand ",(0,s.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/List_comprehension"},"list comprehensions"),"\nthat help to write succinct definitions of lists and sets. They are also inspired by queries as found in a language like SQL."),(0,s.kt)("p",null,"Rascal generalizes comprehensions in various ways. Comprehensions exist for lists, sets and maps.\nA comprehension consists of an expression that determines the successive elements to be included in the\nresult and a list of enumerators and tests (boolean expressions).\nThe enumerators produce values and the tests filter them. "),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../../Rascal/Expressions/Comprehensions"},"Comprehensions"),",\n",(0,s.kt)("a",{parentName:"p",href:"../../Rascal/Expressions/Values/List/Comprehension"},"List Comprehension"),",\n",(0,s.kt)("a",{parentName:"p",href:"../../Rascal/Expressions/Values/Set/Comprehension"},"Set Comprehension"),", and\n",(0,s.kt)("a",{parentName:"p",href:"../../Rascal/Expressions/Values/Map/Comprehension"},"Map Comprehension")," for details."),(0,s.kt)("h4",{id:"examples"},"Examples"),(0,s.kt)("p",null,"A standard example is"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>{ x * x | int x <- [1 .. 10], x % 3 == 0 }\nset[int]: {9,81,36}\n")),(0,s.kt)("p",null,"i.e., the squares of the integers in the range ",(0,s.kt)("inlineCode",{parentName:"p"},"[ 1 .. 10 ]")," that\nare divisible by 3. A more intriguing example (that we do not give in full detail) is"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rascal"},"{name | /asgStat(Id name, _) <- P}\n")),(0,s.kt)("p",null,"which traverses program ",(0,s.kt)("inlineCode",{parentName:"p"},"P")," (using the ",(0,s.kt)("em",{parentName:"p"},"descendant match")," operator ",(0,s.kt)("inlineCode",{parentName:"p"},"/"),", see ",(0,s.kt)("a",{parentName:"p",href:"../../Rascal/Patterns/Node"},"Patterns"),")\nand constructs a set of all identifiers that occur on the left hand\nside of assignment statements in ",(0,s.kt)("inlineCode",{parentName:"p"},"P"),"."))}m.isMDXComponent=!0}}]);