"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[35065],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>m});var a=i(67294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,a,n=function(e,t){if(null==e)return{};var i,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var i=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=c(i),m=n,d=f["".concat(l,".").concat(m)]||f[m]||u[m]||r;return i?a.createElement(d,o(o({ref:t},p),{},{components:i})):a.createElement(d,o({ref:t},p))}));function m(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=i.length,o=new Array(r);o[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var c=2;c<r;c++)o[c]=i[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,i)}f.displayName="MDXCreateElement"},86859:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=i(83117),n=(i(67294),i(3905));const r={title:"Disambiguation"},o=void 0,s={unversionedId:"Rascal/Declarations/SyntaxDefinition/Disambiguation/index",id:"Rascal/Declarations/SyntaxDefinition/Disambiguation/index",title:"Disambiguation",description:"Synopsis",source:"@site/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation/index.md",sourceDirName:"Rascal/Declarations/SyntaxDefinition/Disambiguation",slug:"/Rascal/Declarations/SyntaxDefinition/Disambiguation/",permalink:"/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation/index.md",tags:[],version:"current",frontMatter:{title:"Disambiguation"},sidebar:"tutorialSidebar",previous:{title:"Ambiguity Diagnosis",permalink:"/docs/Rascal/Declarations/SyntaxDefinition/AmbiguityDiagnosis/"},next:{title:"Associativity Declaration",permalink:"/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation/Associativity/"}},l={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],p={toc:c};function u(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"synopsis"},"Synopsis"),(0,n.kt)("p",null,"Disambiguation is the definition of filters on the parse trees that ",(0,n.kt)("a",{parentName:"p",href:"/docs/Rascal/Declarations/SyntaxDefinition"},"Syntax Definition"),"s define.\nThere are several ways of defining ",(0,n.kt)("a",{parentName:"p",href:"/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation"},"Disambiguation")," in Rascal."),(0,n.kt)("h4",{id:"syntax"},"Syntax"),(0,n.kt)("h4",{id:"types"},"Types"),(0,n.kt)("h4",{id:"function"},"Function"),(0,n.kt)("h4",{id:"description"},"Description"),(0,n.kt)("p",null,"There are generally three ways of removing ambiguity from parse forests that are produced by parsers generated from ",(0,n.kt)("a",{parentName:"p",href:"/docs/Rascal/Declarations/SyntaxDefinition"},"Syntax Definition"),"s."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The first way is to add disambiguation declarations to the ",(0,n.kt)("a",{parentName:"li",href:"/docs/Rascal/Declarations/SyntaxDefinition"},"Syntax Definition"),". You can choose from:\n",(0,n.kt)("strong",{parentName:"li"},"  ",(0,n.kt)("a",{parentName:"strong",href:"/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation/Priority"},"Priorities"),"s, which can be used to define the relative priority in expression languages\n"),"  ",(0,n.kt)("a",{parentName:"li",href:"/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation/Associativity"},"./Associativity"),"s, which can be used to define relative associativity between operators of\nexpression languages\n",(0,n.kt)("strong",{parentName:"li"},"  ",(0,n.kt)("a",{parentName:"strong",href:"/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation/Follow"},"Follow")," constraints, which can be used to implement longest match using lookahead\n"),"  ",(0,n.kt)("a",{parentName:"li",href:"/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation/Precede"},"Precede")," constraints, which can be used to implement first match using look behind\n**  ",(0,n.kt)("a",{parentName:"li",href:"/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation/Reserve"},"Reserve")," constraintss, which allow you to remove a finite sets of strings from a ",(0,n.kt)("a",{parentName:"li",href:"/docs/Rascal/Declarations/SyntaxDefinition"},"Syntax Definition"),"\nto implement keyword reservation"),(0,n.kt)("li",{parentName:"ul"},"The second way is to add ",(0,n.kt)("a",{parentName:"li",href:"/docs/Rascal/Declarations/SyntaxDefinition/Action"},"Action"),"s that will be triggered just after parsing and allow you to trim a parse forest\nusing any information necessary."),(0,n.kt)("li",{parentName:"ul"},"The third way is use the ",(0,n.kt)("a",{parentName:"li",href:"/docs/Rascal/Statements/Visit"},"Visit")," statement on a parse tree and implement your own filter post-parsing time,\nor any other kind of program that processes ",(0,n.kt)("a",{parentName:"li",href:"/docs/Rascal/Declarations/SyntaxDefinition/ParseTrees"},"Parse Trees"),".")),(0,n.kt)("h4",{id:"examples"},"Examples"),(0,n.kt)("h4",{id:"benefits"},"Benefits"))}u.isMDXComponent=!0}}]);