"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[45653],{3905:(l,e,t)=>{t.d(e,{Zo:()=>r,kt:()=>u});var i=t(67294);function a(l,e,t){return e in l?Object.defineProperty(l,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):l[e]=t,l}function n(l,e){var t=Object.keys(l);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(l);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(l,e).enumerable}))),t.push.apply(t,i)}return t}function o(l){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?n(Object(t),!0).forEach((function(e){a(l,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(l,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(e){Object.defineProperty(l,e,Object.getOwnPropertyDescriptor(t,e))}))}return l}function m(l,e){if(null==l)return{};var t,i,a=function(l,e){if(null==l)return{};var t,i,a={},n=Object.keys(l);for(i=0;i<n.length;i++)t=n[i],e.indexOf(t)>=0||(a[t]=l[t]);return a}(l,e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(l);for(i=0;i<n.length;i++)t=n[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(l,t)&&(a[t]=l[t])}return a}var y=i.createContext({}),p=function(l){var e=i.useContext(y),t=e;return l&&(t="function"==typeof l?l(e):o(o({},e),l)),t},r=function(l){var e=p(l.components);return i.createElement(y.Provider,{value:e},l.children)},b={inlineCode:"code",wrapper:function(l){var e=l.children;return i.createElement(i.Fragment,{},e)}},s=i.forwardRef((function(l,e){var t=l.components,a=l.mdxType,n=l.originalType,y=l.parentName,r=m(l,["components","mdxType","originalType","parentName"]),s=p(t),u=a,S=s["".concat(y,".").concat(u)]||s[u]||b[u]||n;return t?i.createElement(S,o(o({ref:e},r),{},{components:t})):i.createElement(S,o({ref:e},r))}));function u(l,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof l||a){var n=t.length,o=new Array(n);o[0]=s;var m={};for(var y in e)hasOwnProperty.call(e,y)&&(m[y]=e[y]);m.originalType=l,m.mdxType="string"==typeof l?l:a,o[1]=m;for(var p=2;p<n;p++)o[p]=t[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}s.displayName="MDXCreateElement"},13171:(l,e,t)=>{t.r(e),t.d(e,{assets:()=>y,contentTitle:()=>o,default:()=>b,frontMatter:()=>n,metadata:()=>m,toc:()=>p});var i=t(83117),a=(t(67294),t(3905));const n={title:"module Type"},o=void 0,m={unversionedId:"Library/Type",id:"Library/Type",title:"module Type",description:"Usage",source:"@site/docs/Library/Type.md",sourceDirName:"Library",slug:"/Library/Type",permalink:"/docs/Library/Type",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/Type.md",tags:[],version:"current",frontMatter:{title:"module Type"},sidebar:"tutorialSidebar",previous:{title:"module Traversal",permalink:"/docs/Library/Traversal"},next:{title:"module ValueIO",permalink:"/docs/Library/ValueIO"}},y={},p=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"data Symbol",id:"Type-Symbol",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Description",id:"description-1",level:4},{value:"data Symbol",id:"Type-Symbol",level:2},{value:"data Symbol",id:"Type-Symbol",level:2},{value:"data Symbol",id:"Type-Symbol",level:2},{value:"data Production",id:"Type-Production",level:2},{value:"Synopsis",id:"synopsis-2",level:4},{value:"Description",id:"description-2",level:4},{value:"data Attr",id:"Type-Attr",level:2},{value:"Synopsis",id:"synopsis-3",level:4},{value:"function \var-func",id:"Type-\var-func",level:2},{value:"Synopsis",id:"synopsis-4",level:4},{value:"function choice",id:"Type-choice",level:2},{value:"Synopsis",id:"synopsis-5",level:4},{value:"Description",id:"description-3",level:4},{value:"function subtype",id:"Type-subtype",level:2},{value:"Synopsis",id:"synopsis-6",level:4},{value:"function comparable",id:"Type-comparable",level:2},{value:"Synopsis",id:"synopsis-7",level:4},{value:"function equivalent",id:"Type-equivalent",level:2},{value:"Synopsis",id:"synopsis-8",level:4},{value:"function eq",id:"Type-eq",level:2},{value:"Synopsis",id:"synopsis-9",level:4},{value:"Description",id:"description-4",level:4},{value:"Examples",id:"examples-1",level:4},{value:"function lub",id:"Type-lub",level:2},{value:"Synopsis",id:"synopsis-10",level:4},{value:"Description",id:"description-5",level:4},{value:"function keepParams",id:"Type-keepParams",level:2},{value:"function lub",id:"Type-lub",level:2},{value:"function allLabeled",id:"Type-allLabeled",level:2},{value:"function noneLabeled",id:"Type-noneLabeled",level:2},{value:"function getLabels",id:"Type-getLabels",level:2},{value:"function addLabels",id:"Type-addLabels",level:2},{value:"function stripLabels",id:"Type-stripLabels",level:2},{value:"function getParamLabels",id:"Type-getParamLabels",level:2},{value:"function addParamLabels",id:"Type-addParamLabels",level:2},{value:"function glb",id:"Type-glb",level:2},{value:"Synopsis",id:"synopsis-11",level:4},{value:"Description",id:"description-6",level:4},{value:"data Exception",id:"Type-Exception",level:2},{value:"function typeCast",id:"Type-typeCast",level:2},{value:"function make",id:"Type-make",level:2},{value:"Synopsis",id:"synopsis-12",level:4},{value:"Description",id:"description-7",level:4},{value:"function typeOf",id:"Type-typeOf",level:2},{value:"Synopsis",id:"synopsis-13",level:4},{value:"Description",id:"description-8",level:4},{value:"Examples",id:"examples-2",level:4},{value:"Pitfalls",id:"pitfalls",level:4},{value:"function isIntType",id:"Type-isIntType",level:2},{value:"Synopsis",id:"synopsis-14",level:4},{value:"function isBoolType",id:"Type-isBoolType",level:2},{value:"Synopsis",id:"synopsis-15",level:4},{value:"function isRealType",id:"Type-isRealType",level:2},{value:"Synopsis",id:"synopsis-16",level:4},{value:"function isRatType",id:"Type-isRatType",level:2},{value:"Synopsis",id:"synopsis-17",level:4},{value:"function isStrType",id:"Type-isStrType",level:2},{value:"Synopsis",id:"synopsis-18",level:4},{value:"function isNumType",id:"Type-isNumType",level:2},{value:"Synopsis",id:"synopsis-19",level:4},{value:"function isNodeType",id:"Type-isNodeType",level:2},{value:"Synopsis",id:"synopsis-20",level:4},{value:"function isVoidType",id:"Type-isVoidType",level:2},{value:"Synopsis",id:"synopsis-21",level:4},{value:"function isValueType",id:"Type-isValueType",level:2},{value:"Synopsis",id:"synopsis-22",level:4},{value:"function isLocType",id:"Type-isLocType",level:2},{value:"Synopsis",id:"synopsis-23",level:4},{value:"function isDateTimeType",id:"Type-isDateTimeType",level:2},{value:"Synopsis",id:"synopsis-24",level:4},{value:"function isSetType",id:"Type-isSetType",level:2},{value:"Synopsis",id:"synopsis-25",level:4},{value:"function isRelType",id:"Type-isRelType",level:2},{value:"Synopsis",id:"synopsis-26",level:4},{value:"function isListRelType",id:"Type-isListRelType",level:2},{value:"Synopsis",id:"synopsis-27",level:4},{value:"function isTupleType",id:"Type-isTupleType",level:2},{value:"Synopsis",id:"synopsis-28",level:4},{value:"function isListType",id:"Type-isListType",level:2},{value:"Synopsis",id:"synopsis-29",level:4},{value:"function isListRelType",id:"Type-isListRelType",level:2},{value:"Synopsis",id:"synopsis-30",level:4},{value:"function isMapType",id:"Type-isMapType",level:2},{value:"Synopsis",id:"synopsis-31",level:4},{value:"function isBagType",id:"Type-isBagType",level:2},{value:"Synopsis",id:"synopsis-32",level:4},{value:"function isADTType",id:"Type-isADTType",level:2},{value:"Synopsis",id:"synopsis-33",level:4},{value:"function isConstructorType",id:"Type-isConstructorType",level:2},{value:"Synopsis",id:"synopsis-34",level:4},{value:"function isAliasType",id:"Type-isAliasType",level:2},{value:"Synopsis",id:"synopsis-35",level:4},{value:"function isFunctionType",id:"Type-isFunctionType",level:2},{value:"Synopsis",id:"synopsis-36",level:4},{value:"function isReifiedType",id:"Type-isReifiedType",level:2},{value:"Synopsis",id:"synopsis-37",level:4},{value:"function isTypeVar",id:"Type-isTypeVar",level:2},{value:"Synopsis",id:"synopsis-38",level:4}],r={toc:p};function b(l){let{components:e,...t}=l;return(0,a.kt)("wrapper",(0,i.Z)({},r,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"import Type;")),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Rascal's type system, implemented in Rascal itself."),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"The goal of this module is to provide:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"reflection capabilities that are useful for deserialization and validation of data, and "),(0,a.kt)("li",{parentName:"ul"},"to provide the basic building blocks for syntax trees (see ",(0,a.kt)("a",{parentName:"li",href:"/docs/Library/ParseTree"},"module:Parse tree"),")")),(0,a.kt)("p",null,"The following definition is built into Rascal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"data type[&T] = type(Symbol symbol, map[Symbol,Production] definitions);\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"#")," operator will always produce a value of ",(0,a.kt)("inlineCode",{parentName:"p"},"type[&T]"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"&T")," is bound to the type that was reified."),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Type;\nok\nrascal>#int\ntype[int]: type(\n  int(),\n  ())\nrascal>#rel[int,int]\ntype[rel[int,int]]: type(\n  set(tuple([\n        int(),\n        int()\n      ])),\n  ())\nrascal>data B = t();\nok\nrascal>#B\ntype[B]: type(\n  adt(\n    "B",\n    []),\n  (adt(\n      "B",\n      []):choice(\n      adt(\n        "B",\n        []),\n      {cons(\n          label(\n            "t",\n            adt(\n              "B",\n              [])),\n          [],\n          [],\n          {})})))\nrascal>syntax A = "a";\nok\nrascal>#A;\ntype[A]: type(\n  sort("A"),\n  (\n    layouts("$default$"):choice(\n      layouts("$default$"),\n      {prod(\n          layouts("$default$"),\n          [],\n          {})}),\n    empty():choice(\n      empty(),\n      {prod(\n          empty(),\n          [],\n          {})}),\n    sort("A"):choice(\n      sort("A"),\n      {prod(\n          sort("A"),\n          [lit("a")],\n          {})})\n  ))\nrascal>type(\\int(),())\ntype[value]: type(\n  int(),\n  ())\n')),(0,a.kt)("p",null,"The following functions are provided on types:"),(0,a.kt)("h2",{id:"Type-Symbol"},"data Symbol"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"data Symbol  \n     = \\int()\n     | \\bool()\n     | \\real()\n     | \\rat()\n     | \\str()\n     | \\num()\n     | \\node()\n     | \\void()\n     | \\value()\n     | \\loc()\n     | \\datetime()\n     ;\n")),(0,a.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,a.kt)("p",null,"A Symbol represents a Rascal Type."),(0,a.kt)("h4",{id:"description-1"},"Description"),(0,a.kt)("p",null,"Symbols are values that represent Rascal's types. These are the atomic types.\nWe define here:"),(0,a.kt)("p",null,"<1>  Atomic types.\n<2> Labels that are used to give names to symbols, such as field names, constructor names, etc.\n<3>  Composite types.\n<4>  Parameters that represent a type variable."),(0,a.kt)("p",null,"In ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/ParseTree"},"module:Parse tree"),", see ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/ParseTree#ParseTree-Symbol"},"Symbol"),",\nSymbols will be further extended with the symbols that may occur in a parse tree."),(0,a.kt)("h2",{id:"Type-Symbol"},"data Symbol"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"data Symbol  \n     = \\label(str name, Symbol symbol)\n     ;\n")),(0,a.kt)("h2",{id:"Type-Symbol"},"data Symbol"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"data Symbol  \n     = \\set(Symbol symbol)\n     | \\rel(list[Symbol] symbols)\n     | \\lrel(list[Symbol] symbols)\n     | \\tuple(list[Symbol] symbols)\n     | \\list(Symbol symbol)\n     | \\map(Symbol from, Symbol to)\n     | \\bag(Symbol symbol)\n     | \\adt(str name, list[Symbol] parameters)\n     | \\cons(Symbol \\adt, str name, list[Symbol] parameters)\n     | \\alias(str name, list[Symbol] parameters, Symbol aliased)\n     | \\func(Symbol ret, list[Symbol] parameters, list[Symbol] kwTypes)\n     | \\overloaded(set[Symbol] alternatives)\n     | \\var-func(Symbol ret, list[Symbol] parameters, Symbol varArg)\n     | \\reified(Symbol symbol)\n     ;\n")),(0,a.kt)("h2",{id:"Type-Symbol"},"data Symbol"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"data Symbol  \n     = \\parameter(str name, Symbol bound)\n     ;\n")),(0,a.kt)("h2",{id:"Type-Production"},"data Production"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"data Production  \n     = \\cons(Symbol def, list[Symbol] symbols, list[Symbol] kwTypes, set[Attr] attributes)\n     | \\choice(Symbol def, set[Production] alternatives)\n     | \\composition(Production lhs, Production rhs)\n     ;\n")),(0,a.kt)("h4",{id:"synopsis-2"},"Synopsis"),(0,a.kt)("p",null,"A production in a grammar or constructor in a data type."),(0,a.kt)("h4",{id:"description-2"},"Description"),(0,a.kt)("p",null,"Productions represent abstract (recursive) definitions of abstract data type constructors and functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cons"),": a constructor for an abstract data type."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"func"),": a function."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"choice"),": the choice between various alternatives."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"composition"),": composition of two productions.")),(0,a.kt)("p",null,"In ParseTree, see ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/ParseTree#ParseTree-Production"},"Production"),",\nProductions will be further extended and will be used to represent productions in syntax rules."),(0,a.kt)("h2",{id:"Type-Attr"},"data Attr"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"data Attr  \n     = \\tag(value \\tag)\n     ;\n")),(0,a.kt)("h4",{id:"synopsis-3"},"Synopsis"),(0,a.kt)("p",null,"Attributes register additional semantics annotations of a definition. "),(0,a.kt)("h2",{id:"Type-\\var-func"},"function \\var-func"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol \\var-func(Symbol ret, list[Symbol] parameters, Symbol varArg)"))),(0,a.kt)("h4",{id:"synopsis-4"},"Synopsis"),(0,a.kt)("p",null,"Transform a function with varargs (",(0,a.kt)("inlineCode",{parentName:"p"},"..."),") to a normal function with a list argument."),(0,a.kt)("h2",{id:"Type-choice"},"function choice"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Production choice(Symbol s, set[Production] choices)"))),(0,a.kt)("h4",{id:"synopsis-5"},"Synopsis"),(0,a.kt)("p",null,"Normalize the choice between alternative productions."),(0,a.kt)("h4",{id:"description-3"},"Description"),(0,a.kt)("p",null,"Nested choice is flattened."),(0,a.kt)("h2",{id:"Type-subtype"},"function subtype"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(type[&T] t, type[&U] u)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol s, s)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool subtype(Symbol s, Symbol t)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol _, Symbol::\\value())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\void(), Symbol _)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\cons(Symbol a, _, list[Symbol] _), a)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\cons(Symbol a, str name, list[Symbol] ap), Symbol::\\cons(a,name,list[Symbol] bp))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\adt(str _, list[Symbol] _), Symbol::\\node())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\adt(str n, list[Symbol] l), Symbol::\\adt(n, list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\alias(str _, list[Symbol] _, Symbol aliased), Symbol r)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol l, \\alias(str _, list[Symbol] _, Symbol aliased))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\int(), Symbol::\\num())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\rat(), Symbol::\\num())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\real(), Symbol::\\num())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\tuple(list[Symbol] l), \\tuple(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\list(Symbol s), Symbol::\\list(Symbol t))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\lrel(list[Symbol] l), Symbol::\\lrel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\list(Symbol s), Symbol::\\lrel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\lrel(list[Symbol] l), \\list(Symbol r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\set(Symbol s), Symbol::\\set(Symbol t))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\rel(list[Symbol] l), Symbol::\\rel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\set(Symbol s), Symbol::\\rel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\rel(list[Symbol] l), Symbol::\\set(Symbol r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\bag(Symbol s), Symbol::\\bag(Symbol t))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\map(Symbol from1, Symbol to1), Symbol::\\map(Symbol from2, Symbol to2))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\func(Symbol r1, list[Symbol] p1, list[Symbol] kw1), Symbol::\\func(Symbol r2, list[Symbol] p2, list[Symbol] kw2))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\parameter(str _, Symbol bound), Symbol r)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol l, Symbol::\\parameter(str _, Symbol bound))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\label(str _, Symbol s), Symbol t)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol s, Symbol::\\label(str _, Symbol t))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\reified(Symbol s), Symbol::\\reified(Symbol t))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(Symbol::\\reified(Symbol s), Symbol::\\node())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool subtype(list[Symbol] l, list[Symbol] r)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool subtype(list[Symbol] l, list[Symbol] r)"))),(0,a.kt)("h4",{id:"synopsis-6"},"Synopsis"),(0,a.kt)("p",null,"Subtype on types."),(0,a.kt)("p",null,"Functions with variable argument lists are normalized to normal functions"),(0,a.kt)("h2",{id:"Type-comparable"},"function comparable"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool comparable(Symbol s, Symbol t)"))),(0,a.kt)("h4",{id:"synopsis-7"},"Synopsis"),(0,a.kt)("p",null,"Check if two types are comparable, i.e., have a common supertype."),(0,a.kt)("h2",{id:"Type-equivalent"},"function equivalent"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool equivalent(Symbol s, Symbol t)"))),(0,a.kt)("h4",{id:"synopsis-8"},"Synopsis"),(0,a.kt)("p",null,"Check if two types are equivalent."),(0,a.kt)("h2",{id:"Type-eq"},"function eq"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool eq(value x, value y)"))),(0,a.kt)("h4",{id:"synopsis-9"},"Synopsis"),(0,a.kt)("p",null,"Structural equality between values. "),(0,a.kt)("h4",{id:"description-4"},"Description"),(0,a.kt)("p",null,"The difference is that no implicit coercions are done between values of incomparable types, such as == does for\nint, real and rat."),(0,a.kt)("h4",{id:"examples-1"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Type;\nok\nrascal>1 == 1.0\nbool: true\nrascal>eq(1,1.0)\nbool: false\n")),(0,a.kt)("h2",{id:"Type-lub"},"function lub"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol s, s)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default Symbol lub(Symbol s, Symbol t)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\value(), Symbol t)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol s, Symbol::\\value())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\void(), Symbol t)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol s, Symbol::\\void())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\int(), Symbol::\\num())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\int(), Symbol::\\real())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\int(), Symbol::\\rat())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\rat(), Symbol::\\num())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\rat(), Symbol::\\real())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\rat(), Symbol::\\int())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\real(), Symbol::\\num())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\real(), Symbol::\\int())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\real(), Symbol::\\rat())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\num(), Symbol::\\int())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\num(), Symbol::\\real())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\num(), Symbol::\\rat())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\set(Symbol s), Symbol::\\set(Symbol t))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\set(Symbol s), Symbol::\\rel(list[Symbol] ts))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\rel(list[Symbol] ts), Symbol::\\set(Symbol s))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\rel(list[Symbol] l), Symbol::\\rel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\rel(list[Symbol] l), Symbol::\\rel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\rel(list[Symbol] l), Symbol::\\rel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\rel(list[Symbol] l), Symbol::\\rel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\rel(list[Symbol] l), Symbol::\\rel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\rel(list[Symbol] l), Symbol::\\rel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\list(Symbol s), Symbol::\\list(Symbol t))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\list(Symbol s), \\lrel(list[Symbol] ts))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\lrel(list[Symbol] ts), Symbol::\\list(Symbol s))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\lrel(list[Symbol] l), Symbol::\\lrel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\lrel(list[Symbol] l), Symbol::\\lrel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\lrel(list[Symbol] l), Symbol::\\lrel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\lrel(list[Symbol] l), Symbol::\\lrel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\lrel(list[Symbol] l), Symbol::\\lrel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\lrel(list[Symbol] l), Symbol::\\lrel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\tuple(list[Symbol] l), Symbol::\\tuple(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\tuple(list[Symbol] l), Symbol::\\tuple(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\tuple(list[Symbol] l), Symbol::\\tuple(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\tuple(list[Symbol] l), Symbol::\\tuple(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\tuple(list[Symbol] l), Symbol::\\tuple(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\map(\\label(str lfl, Symbol lf), \\label(str ltl, Symbol lt)), Symbol::\\map(\\label(str rfl, Symbol rf), \\label(str rtl, Symbol rt)))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\map(\\label(str lfl, Symbol lf), \\label(str ltl, Symbol lt)), Symbol::\\map(\\label(str rfl, Symbol rf), \\label(str rtl, Symbol rt)))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\map(\\label(str lfl, Symbol lf), \\label(str ltl, Symbol lt)), Symbol::\\map(Symbol rf, Symbol rt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\map(Symbol lf, Symbol lt), Symbol::\\map(\\label(str rfl, Symbol rf), \\label(str rtl, Symbol rt)))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\map(Symbol lf, Symbol lt), Symbol::\\map(Symbol rf, Symbol rt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\bag(Symbol s), Symbol::\\bag(Symbol t))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\adt(str n, list[Symbol] _), Symbol::\\node())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\node(), \\adt(str n, list[Symbol] _))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\adt(str n, list[Symbol] lp), Symbol::\\adt(n, list[Symbol] rp))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\adt(str n, list[Symbol] lp), Symbol::\\adt(n, list[Symbol] rp))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\adt(str n, list[Symbol] lp), Symbol::\\adt(str m, list[Symbol] rp))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\adt(str ln, list[Symbol] lp), Symbol::\\cons(Symbol b, _, list[Symbol] _))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\cons(Symbol la, _, list[Symbol] _), Symbol::\\cons(Symbol ra, _, list[Symbol] _))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\cons(Symbol a, _, list[Symbol] lp), Symbol::\\adt(str n, list[Symbol] rp))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\cons(Symbol _, _, list[Symbol] _), Symbol::\\node())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\alias(str _, list[Symbol] _, Symbol aliased), Symbol r)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol l, \\alias(str _, list[Symbol] _, Symbol aliased))"))),(0,a.kt)("h4",{id:"synopsis-10"},"Synopsis"),(0,a.kt)("p",null,"The least-upperbound (lub) between two types."),(0,a.kt)("h4",{id:"description-5"},"Description"),(0,a.kt)("p",null,"This function documents and implements the lub operation in Rascal's type system. "),(0,a.kt)("h2",{id:"Type-keepParams"},"function keepParams"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool keepParams(Symbol::\\parameter(str s1, Symbol bound1), Symbol::\\parameter(str s2, Symbol bound2))"))),(0,a.kt)("h2",{id:"Type-lub"},"function lub"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol l:Symbol::\\parameter(str s1, Symbol bound1), Symbol r:Symbol::\\parameter(str s2, Symbol bound2))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol l:Symbol::\\parameter(str s1, Symbol bound1), Symbol r:Symbol::\\parameter(str s2, Symbol bound2))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\parameter(str _, Symbol bound), Symbol r)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol l, Symbol::\\parameter(str _, Symbol bound))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\reified(Symbol l), Symbol::\\reified(Symbol r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\reified(Symbol l), Symbol::\\node())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\func(Symbol lr, list[Symbol] lp, list[Symbol] lkw), Symbol::\\func(Symbol rr, list[Symbol] rp, list[Symbol] rkw))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol::\\label(_,Symbol l), Symbol r)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol lub(Symbol l, Symbol::\\label(_,Symbol r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list[Symbol] lub(list[Symbol] l, list[Symbol] r)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default list[Symbol] lub(list[Symbol] l, list[Symbol] r)"))),(0,a.kt)("h2",{id:"Type-allLabeled"},"function allLabeled"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool allLabeled(list[Symbol] l)"))),(0,a.kt)("h2",{id:"Type-noneLabeled"},"function noneLabeled"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool noneLabeled(list[Symbol] l)"))),(0,a.kt)("h2",{id:"Type-getLabels"},"function getLabels"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list[str] getLabels(list[Symbol] l)"))),(0,a.kt)("h2",{id:"Type-addLabels"},"function addLabels"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list[Symbol] addLabels(list[Symbol] l, list[str] s)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default list[Symbol] addLabels(list[Symbol] l, list[str] s)"))),(0,a.kt)("h2",{id:"Type-stripLabels"},"function stripLabels"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list[Symbol] stripLabels(list[Symbol] l)"))),(0,a.kt)("h2",{id:"Type-getParamLabels"},"function getParamLabels"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list[str] getParamLabels(list[Symbol] l)"))),(0,a.kt)("h2",{id:"Type-addParamLabels"},"function addParamLabels"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list[Symbol] addParamLabels(list[Symbol] l, list[str] s)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default list[Symbol] addParamLabels(list[Symbol] l, list[str] s)"))),(0,a.kt)("h2",{id:"Type-glb"},"function glb"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol s, s)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default Symbol glb(Symbol s, Symbol t)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\void(), Symbol t)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol s, Symbol::\\void())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\value(), Symbol t)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol s, Symbol::\\value())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\int(), Symbol::\\num())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\num(), Symbol::\\int())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\rat(),Symbol::\\num())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\num(), Symbol::\\rat())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\real(), Symbol::\\num())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\num(), Symbol::\\real())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\set(Symbol s), Symbol::\\set(Symbol t))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\set(Symbol s), Symbol::\\rel(list[Symbol] ts))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\rel(list[Symbol] ts), Symbol::\\set(Symbol s))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\rel(list[Symbol] l), Symbol::\\rel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\rel(list[Symbol] l), Symbol::\\rel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\rel(list[Symbol] l), Symbol::\\rel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\rel(list[Symbol] l), Symbol::\\rel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\rel(list[Symbol] l), Symbol::\\rel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\rel(list[Symbol] l), Symbol::\\rel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\list(Symbol s), Symbol::\\list(Symbol t))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\list(Symbol s), Symbol::\\lrel(list[Symbol] ts))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\lrel(list[Symbol] ts), Symbol::\\list(Symbol s))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\lrel(list[Symbol] l), Symbol::\\lrel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\lrel(list[Symbol] l), Symbol::\\lrel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\lrel(list[Symbol] l), Symbol::\\lrel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\lrel(list[Symbol] l), Symbol::\\lrel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\lrel(list[Symbol] l), Symbol::\\lrel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\lrel(list[Symbol] l), Symbol::\\lrel(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\tuple(list[Symbol] l), Symbol::\\tuple(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\tuple(list[Symbol] l), Symbol::\\tuple(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\tuple(list[Symbol] l), Symbol::\\tuple(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\tuple(list[Symbol] l), Symbol::\\tuple(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\tuple(list[Symbol] l), Symbol::\\tuple(list[Symbol] r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\map(\\label(str lfl, Symbol lf), \\label(str ltl, Symbol lt)), Symbol::\\map(\\label(str rfl, Symbol rf), \\label(str rtl, Symbol rt)))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\map(\\label(str lfl, Symbol lf), \\label(str ltl, Symbol lt)), Symbol::\\map(\\label(str rfl, Symbol rf), \\label(str rtl, Symbol rt)))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\map(\\label(str lfl, Symbol lf), \\label(str ltl, Symbol lt)), Symbol::\\map(Symbol rf, Symbol rt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\map(Symbol lf, Symbol lt), Symbol::\\map(\\label(str rfl, Symbol rf), \\label(str rtl, Symbol rt)))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\map(Symbol lf, Symbol lt), Symbol::\\map(Symbol rf, Symbol rt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\bag(Symbol s), Symbol::\\bag(Symbol t))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\adt(str n, list[Symbol] _), Symbol::\\node())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(\\node(), Symbol::\\adt(str n, list[Symbol] _))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\adt(str n, list[Symbol] lp), Symbol::\\adt(n, list[Symbol] rp))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\adt(str n, list[Symbol] lp), Symbol::\\adt(n, list[Symbol] rp))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\adt(str n, list[Symbol] lp), Symbol::\\adt(str m, list[Symbol] rp))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\adt(str ln, list[Symbol] lp), Symbol::\\cons(Symbol b, _, list[Symbol] _))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\cons(Symbol la, _, list[Symbol] _), Symbol::\\cons(Symbol ra, _, list[Symbol] _))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\cons(Symbol a, _, list[Symbol] lp), Symbol::\\adt(str n, list[Symbol] rp))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\cons(Symbol _, _, list[Symbol] _), \\node())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\alias(str _, list[Symbol] _, Symbol aliased), Symbol r)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol l, Symbol::\\alias(str _, list[Symbol] _, Symbol aliased))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\parameter(str _, Symbol bound), Symbol r)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol l, Symbol::\\parameter(str _, Symbol bound))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\reified(Symbol l), Symbol::\\reified(Symbol r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\reified(Symbol l), Symbol::\\node())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\func(Symbol lr, list[Symbol] lp, list[Symbol] kwl), Symbol::\\func(Symbol rr, list[Symbol] rp, list[Symbol] kwr))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol::\\label(_,Symbol l), Symbol r)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol glb(Symbol l, Symbol::\\label(_,Symbol r))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list[Symbol] glb(list[Symbol] l, list[Symbol] r)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default list[Symbol] glb(list[Symbol] l, list[Symbol] r)"))),(0,a.kt)("h4",{id:"synopsis-11"},"Synopsis"),(0,a.kt)("p",null,"The greatest lower bound (glb) between two types."),(0,a.kt)("h4",{id:"description-6"},"Description"),(0,a.kt)("p",null,"This function documents and implements the glb operation in Rascal's type system. "),(0,a.kt)("h2",{id:"Type-Exception"},"data Exception"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"data Exception  \n     = typeCastException(Symbol from, type[value] to)\n     ;\n")),(0,a.kt)("h2",{id:"Type-typeCast"},"function typeCast"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"&T typeCast(type[&T] typ, value v)"))),(0,a.kt)("h2",{id:"Type-make"},"function make"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"&T make(type[&T] typ, str name, list[value] args)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"&T make(type[&T] typ, str name, list[value] args, map[str,value] keywordArgs)"))),(0,a.kt)("h4",{id:"synopsis-12"},"Synopsis"),(0,a.kt)("p",null,"Instantiate an ADT constructor of a given type with the given children and optional keyword arguments."),(0,a.kt)("h4",{id:"description-7"},"Description"),(0,a.kt)("p",null,"This function will build a constructor if the definition exists and throw an exception otherwise."),(0,a.kt)("h2",{id:"Type-typeOf"},"function typeOf"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Symbol typeOf(value v)"))),(0,a.kt)("h4",{id:"synopsis-13"},"Synopsis"),(0,a.kt)("p",null,"Returns the dynamic type of a value as a reified type."),(0,a.kt)("h4",{id:"description-8"},"Description"),(0,a.kt)("p",null,"As opposed to the # operator, which produces the type of a value statically, this\nfunction produces the dynamic type of a value, represented by a symbol."),(0,a.kt)("h4",{id:"examples-2"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Type;\nok\nrascal>value x = 1;\nvalue: 1\nrascal>typeOf(x)\nSymbol: int()\n")),(0,a.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Note that the ",(0,a.kt)("inlineCode",{parentName:"li"},"typeOf")," function does not produce definitions, like the\n",(0,a.kt)("a",{parentName:"li",href:"../Rascal/Expressions/Values/ReifiedTypes"},"reify")," operator ",(0,a.kt)("inlineCode",{parentName:"li"},"#")," does,\nsince values may escape the scope in which they've been constructed leaving their contents possibly undefined.")),(0,a.kt)("h2",{id:"Type-isIntType"},"function isIntType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isIntType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isIntType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isIntType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isIntType(Symbol::\\int())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isIntType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-14"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is an int."),(0,a.kt)("h2",{id:"Type-isBoolType"},"function isBoolType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isBoolType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isBoolType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isBoolType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isBoolType(Symbol::\\bool())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isBoolType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-15"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a bool."),(0,a.kt)("h2",{id:"Type-isRealType"},"function isRealType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isRealType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isRealType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isRealType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isRealType(Symbol::\\real())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isRealType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-16"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a real."),(0,a.kt)("h2",{id:"Type-isRatType"},"function isRatType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isRatType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isRatType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isRatType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isRatType(Symbol::\\rat())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isRatType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-17"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a rational."),(0,a.kt)("h2",{id:"Type-isStrType"},"function isStrType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isStrType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isStrType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isStrType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isStrType(Symbol::\\str())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isStrType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-18"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a string."),(0,a.kt)("h2",{id:"Type-isNumType"},"function isNumType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isNumType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isNumType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isNumType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isNumType(Symbol::\\num())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isNumType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-19"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a num."),(0,a.kt)("h2",{id:"Type-isNodeType"},"function isNodeType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isNodeType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isNodeType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isNodeType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isNodeType(Symbol::\\node())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isNodeType(Symbol::\\adt(_,_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isNodeType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-20"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a node."),(0,a.kt)("h2",{id:"Type-isVoidType"},"function isVoidType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isVoidType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isVoidType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isVoidType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isVoidType(Symbol::\\void())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isVoidType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-21"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a void."),(0,a.kt)("h2",{id:"Type-isValueType"},"function isValueType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isValueType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isValueType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isValueType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isValueType(Symbol::\\value())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isValueType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-22"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a value."),(0,a.kt)("h2",{id:"Type-isLocType"},"function isLocType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isLocType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isLocType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isLocType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isLocType(Symbol::\\loc())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isLocType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-23"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a loc."),(0,a.kt)("h2",{id:"Type-isDateTimeType"},"function isDateTimeType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isDateTimeType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isDateTimeType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isDateTimeType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isDateTimeType(Symbol::\\datetime())")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isDateTimeType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-24"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a ",(0,a.kt)("inlineCode",{parentName:"p"},"datetime"),"."),(0,a.kt)("h2",{id:"Type-isSetType"},"function isSetType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isSetType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isSetType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isSetType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isSetType(Symbol::\\set(_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isSetType(Symbol::\\rel(_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isSetType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-25"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a set."),(0,a.kt)("h2",{id:"Type-isRelType"},"function isRelType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isRelType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isRelType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isRelType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isRelType(Symbol::\\rel(_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isRelType(Symbol::\\set(Symbol tp))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isRelType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-26"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a relation."),(0,a.kt)("h2",{id:"Type-isListRelType"},"function isListRelType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isListRelType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isListRelType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isListRelType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isListRelType(Symbol::\\lrel(_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isListRelType(Symbol::\\list(Symbol tp))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isListRelType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-27"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a list relation."),(0,a.kt)("h2",{id:"Type-isTupleType"},"function isTupleType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isTupleType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isTupleType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isTupleType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isTupleType(Symbol::\\tuple(_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isTupleType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-28"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a tuple."),(0,a.kt)("h2",{id:"Type-isListType"},"function isListType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isListType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isListType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isListType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isListType(Symbol::\\list(_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isListType(Symbol::\\lrel(_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isListType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-29"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a list."),(0,a.kt)("h2",{id:"Type-isListRelType"},"function isListRelType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isListRelType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isListRelType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isListRelType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isListRelType(Symbol::\\lrel(_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isListRelType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-30"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a list relation."),(0,a.kt)("h2",{id:"Type-isMapType"},"function isMapType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isMapType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isMapType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isMapType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isMapType(Symbol::\\map(_,_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isMapType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-31"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a map."),(0,a.kt)("h2",{id:"Type-isBagType"},"function isBagType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isBagType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isBagType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isBagType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isBagType(Symbol::\\bag(_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isBagType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-32"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a bag (bags are not yet implemented)."),(0,a.kt)("h2",{id:"Type-isADTType"},"function isADTType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isADTType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isADTType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isADTType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isADTType(Symbol::\\adt(_,_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isADTType(Symbol::\\reified(_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isADTType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-33"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is an Abstract Data Type (ADT)."),(0,a.kt)("h2",{id:"Type-isConstructorType"},"function isConstructorType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isConstructorType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isConstructorType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isConstructorType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isConstructorType(Symbol::\\cons(Symbol _,str _,list[Symbol] _))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isConstructorType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-34"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a constructor."),(0,a.kt)("h2",{id:"Type-isAliasType"},"function isAliasType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isAliasType(Symbol::\\alias(_,_,_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isAliasType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isAliasType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isAliasType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-35"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is an alias."),(0,a.kt)("h2",{id:"Type-isFunctionType"},"function isFunctionType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isFunctionType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isFunctionType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isFunctionType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isFunctionType(Symbol::\\func(_,_,_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isFunctionType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-36"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a function."),(0,a.kt)("h2",{id:"Type-isReifiedType"},"function isReifiedType"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isReifiedType(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isReifiedType(Symbol::\\parameter(_,Symbol tvb))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isReifiedType(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isReifiedType(Symbol::\\reified(_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isReifiedType(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-37"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is a reified type."),(0,a.kt)("h2",{id:"Type-isTypeVar"},"function isTypeVar"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isTypeVar(Symbol::\\parameter(_,_))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isTypeVar(Symbol::\\alias(_,_,Symbol at))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isTypeVar(Symbol::\\label(_,Symbol lt))")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default bool isTypeVar(Symbol _)"))),(0,a.kt)("h4",{id:"synopsis-38"},"Synopsis"),(0,a.kt)("p",null,"Determine if the given type is an type variable (parameter)."))}b.isMDXComponent=!0}}]);