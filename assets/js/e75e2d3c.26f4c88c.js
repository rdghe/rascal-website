"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[32091],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),c=r,k=d["".concat(o,".").concat(c)]||d[c]||m[c]||i;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},59888:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const i={title:"String",keywords:['"',"'","<",">","\\","\\n","\\t","\\r","\\b","\\f","\\u","\\U","hexademical","escape","if","else","for","while","do"]},l=void 0,s={unversionedId:"Rascal/Expressions/Values/String/index",id:"Rascal/Expressions/Values/String/index",title:"String",description:"Synopsis",source:"@site/docs/Rascal/Expressions/Values/String/index.md",sourceDirName:"Rascal/Expressions/Values/String",slug:"/Rascal/Expressions/Values/String/",permalink:"/docs/Rascal/Expressions/Values/String/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascal/Expressions/Values/String/index.md",tags:[],version:"current",frontMatter:{title:"String",keywords:['\\"',"'","<",">","\\\\","\\\\n","\\\\t","\\\\r","\\\\b","\\\\f","\\\\u","\\\\U","hexademical","escape","if","else","for","while","do"]},sidebar:"tutorialSidebar",previous:{title:"Set notin",permalink:"/docs/Rascal/Expressions/Values/Set/notin/"},next:{title:"String Concatenation",permalink:"/docs/Rascal/Expressions/Values/String/Concatenation/"}},o={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"String values."),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'"StringChar<sub>1</sub>StringChar<sub>2</sub>..."'),"\nwhere `",(0,r.kt)("em",{parentName:"p"},"StringChar~i~")," may be one of the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Ordinary character"),": Any character except ",(0,r.kt)("inlineCode",{parentName:"li"},"<"),", ",(0,r.kt)("inlineCode",{parentName:"li"},">"),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},"'")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"\\"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Escaped character"),": Backslash ",(0,r.kt)("inlineCode",{parentName:"li"},"\\")," followed by any of  ",(0,r.kt)("inlineCode",{parentName:"li"},"<"),", ",(0,r.kt)("inlineCode",{parentName:"li"},">"),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},"'")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"\\")," represents the escaped character itself.\nOther escape sequences that are supported are:\n",(0,r.kt)("strong",{parentName:"li"},"  ",(0,r.kt)("inlineCode",{parentName:"strong"},"\\n"),": newline\n"),"  ",(0,r.kt)("inlineCode",{parentName:"li"},"\\t"),": tab\n",(0,r.kt)("strong",{parentName:"li"},"  ",(0,r.kt)("inlineCode",{parentName:"strong"},"\\r"),": carriage return\n"),"  ",(0,r.kt)("inlineCode",{parentName:"li"},"\\b"),": backspace\n",(0,r.kt)("strong",{parentName:"li"},"  ",(0,r.kt)("inlineCode",{parentName:"strong"},"\\f"),": vertical feed\n"),"  ",(0,r.kt)("inlineCode",{parentName:"li"},"\\u hexDigit<sub>1</sub> hexDigit<sub>2</sub> hexDigit<sub>3</sub> hexDigit<sub>4</sub>")," : hexadecimal escapes with four digit indexes into UNICODE.\n",(0,r.kt)("strong",{parentName:"li"},"  ",(0,r.kt)("inlineCode",{parentName:"strong"},"\\U hexDigit<sub>1</sub> hexDigit<sub>2</sub> hexDigit<sub>3</sub> hexDigit<sub>4</sub> hexDigit<sub>5</sub> hexDigit<sub>6</sub>")," : hexadecimal escapes with six digit indexes into UNICODE.\n"),"  ",(0,r.kt)("inlineCode",{parentName:"li"},"\\ ahexDigit<sub>1</sub> hexDigit<sub>2</sub>"),":  hexadecimal escapes with 2 digit indexes into ASCII (0x0 ... 0x7F).")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"String Interpolation"),": ")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Form"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<Exp>")),(0,r.kt)("td",{parentName:"tr",align:null},"Interpolate the value of the expression as a string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<if(Exp){> ... StringChars ... <}>")),(0,r.kt)("td",{parentName:"tr",align:null},"Conditional inclusion of ",(0,r.kt)("em",{parentName:"td"},"Text"),", where ",(0,r.kt)("em",{parentName:"td"},"StringChars")," may use variables introduced in ",(0,r.kt)("em",{parentName:"td"},"Exp"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<if(Exp){> ... StringChars<sub>1</sub> ... <} else {>  ... StringChars<sub>2</sub> ... <}>")),(0,r.kt)("td",{parentName:"tr",align:null},"Conditional inclusion of either ",(0,r.kt)("em",{parentName:"td"},"StringChars",(0,r.kt)("sub",null,"1"))," or ",(0,r.kt)("em",{parentName:"td"},"StringChars",(0,r.kt)("sub",null,"2")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<for(Exp){>... StringChars ... <}>")),(0,r.kt)("td",{parentName:"tr",align:null},"Iterative splicing of ",(0,r.kt)("em",{parentName:"td"},"StringChars")," into the result, where ",(0,r.kt)("em",{parentName:"td"},"StringChars")," may use variables introduced in ",(0,r.kt)("em",{parentName:"td"},"Exp"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<while(Exp){> ... StringChars ... <}>")),(0,r.kt)("td",{parentName:"tr",align:null},"Iterative splicing of ",(0,r.kt)("em",{parentName:"td"},"StringChars")," into the result, where ",(0,r.kt)("em",{parentName:"td"},"StringChars")," may use variables introduced in ",(0,r.kt)("em",{parentName:"td"},"Exp"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<do {>... StringChars ... <} while (Exp)>")),(0,r.kt)("td",{parentName:"tr",align:null},"Iterative splicing of ",(0,r.kt)("em",{parentName:"td"},"StringChars")," into the result, where ",(0,r.kt)("em",{parentName:"td"},"StringChars")," may use variables introduced in ",(0,r.kt)("em",{parentName:"td"},"Exp"),".")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Multiline"),":")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Form"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"StringChars<sub>1</sub>\\n StringChars<sub>2</sub> ")),(0,r.kt)("td",{parentName:"tr",align:null},"Strings can be multi-line without an escape or continuation marker")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"StringChars<sub>2</sub>\\n '  StringChars<sub>2</sub>")),(0,r.kt)("td",{parentName:"tr",align:null},"A margin character ",(0,r.kt)("inlineCode",{parentName:"td"},"'")," indicates where the next line starts")))),(0,r.kt)("h4",{id:"types"},"Types"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"str")),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"The string values are represented by the type ",(0,r.kt)("inlineCode",{parentName:"p"},"str")," and consist of character\nsequences surrounded by double quotes, e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},'"a"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'"a\\nlong\\nstring"'),"."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Multiline"),": Strings may span more than one line. The margin character ",(0,r.kt)("inlineCode",{parentName:"p"},"'")," indicates which part of a line will be ignored. This is useful for indenting a multi-line string with the source code that generates it."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Interpolation"),":  String literals support so-called ",(0,r.kt)("em",{parentName:"p"},"string interpolation"),":\ninside string constants text between angle brackets (",(0,r.kt)("inlineCode",{parentName:"p"},"<")," and ",(0,r.kt)("inlineCode",{parentName:"p"},">"),") is first executed and then replaced by\nits string value.\nVarious statements (if, for, while, do) also return a value and can be used in this way.\nIn the interpolation variant of these statements the block or blocks that are part of the statement become arbitrary text\n(that may itself contain interpolations). "),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Auto-indent"),": Expressions that get interpolated in a string will be auto-indented. This means that each line that results from the evaluation of the expression is prefixed with the indentation level of the position of the expression in the current string."),(0,r.kt)("p",null,"The following operators are defined for Strings:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/String"},"String")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/String/Concatenation"},"Concatenation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/String/Equal"},"Equal")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/String/GreaterThan"},"GreaterThan")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/String/GreaterThanOrEqual"},"GreaterThanOrEqual")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/String/LessThan"},"LessThan")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/String/LessThanOrEqual"},"LessThanOrEqual")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/String/NotEqual"},"NotEqual")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/String/Slice"},"Slice")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/String/Subscription"},"Subscription"))),(0,r.kt)("p",null,"There are also ",(0,r.kt)("a",{parentName:"p",href:"/docs/Library/String"},"library functions")," available for Strings."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>N = 13;\nint: 13\nrascal>"The value of N is <N>";\nstr: "The value of N is 13"\nrascal>"The value of N*N is <N*N>";\nstr: "The value of N*N is 169"\nrascal>"The value is <(N < 10) ? 10 : N*N>";\nstr: "The value is 169"\n')),(0,r.kt)("p",null,"As you can see the string value of variables and expressions is interpolated in the result as expected. "),(0,r.kt)("br",null),"Some examples of more advances string interpolation",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>"N is <if(N < 10){> small <} else {> large <}>";\nstr: "N is  large "\nrascal>"N is <if(N < 10){> small <} else {> large (<N>)<}>";\nstr: "N is  large (13)"\nrascal>"before <for(x<-[1..5]){>a <x> b <}>after";\nstr: "before a 1 b a 2 b a 3 b a 4 b after"\n')),(0,r.kt)("p",null,"multi-line string"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>println("hello\n>>>>>>>this\n>>>>>>>  is\n>>>>>>>    new")\n    new")\nhello\nthis\n  is\n    new\nok\n')),(0,r.kt)("p",null,"multi-line string with margin:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>if (true)\n>>>>>>>  println(\"this is\n>>>>>>>          'what\n>>>>>>>          '  margins\n>>>>>>>          'are good for\n>>>>>>>          \");\n          \");\nthis is\nwhat\n  margins\nare good for\n          \nok\n")),(0,r.kt)("p",null,"auto indent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>str genMethod(str n) = "int <n>() {\n>>>>>>>                       \'  return 0;\n>>>>>>>                       \'}";\nstr (str): function(|prompt:///|(0,99,<1,0>,<3,27>))\nrascal>str genClass() = "class myClass {\n>>>>>>>                 \'  <genMethod("myMethod")>\n>>>>>>>                 \'}";\nstr (): function(|prompt:///|(0,99,<1,0>,<3,21>))\nrascal>println(genClass());\nprintln(genClass());\nclass myClass {\n  int myMethod() {\n    return 0;\n  }\n}\nok\n')),(0,r.kt)("h4",{id:"benefits"},"Benefits"),(0,r.kt)("p",null,"String interpolation enables very flexible template-based text generation as used in generators for\nsource code, markup and the like."))}m.isMDXComponent=!0}}]);