"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[51160],{3905:(e,a,s)=>{s.d(a,{Zo:()=>c,kt:()=>k});var n=s(67294);function t(e,a,s){return a in e?Object.defineProperty(e,a,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[a]=s,e}function r(e,a){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),s.push.apply(s,n)}return s}function i(e){for(var a=1;a<arguments.length;a++){var s=null!=arguments[a]?arguments[a]:{};a%2?r(Object(s),!0).forEach((function(a){t(e,a,s[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):r(Object(s)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(s,a))}))}return e}function l(e,a){if(null==e)return{};var s,n,t=function(e,a){if(null==e)return{};var s,n,t={},r=Object.keys(e);for(n=0;n<r.length;n++)s=r[n],a.indexOf(s)>=0||(t[s]=e[s]);return t}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)s=r[n],a.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(t[s]=e[s])}return t}var m=n.createContext({}),o=function(e){var a=n.useContext(m),s=a;return e&&(s="function"==typeof e?e(a):i(i({},a),e)),s},c=function(e){var a=o(e.components);return n.createElement(m.Provider,{value:a},e.children)},v={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var s=e.components,t=e.mdxType,r=e.originalType,m=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=o(s),k=t,p=d["".concat(m,".").concat(k)]||d[k]||v[k]||r;return s?n.createElement(p,i(i({ref:a},c),{},{components:s})):n.createElement(p,i({ref:a},c))}));function k(e,a){var s=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var r=s.length,i=new Array(r);i[0]=d;var l={};for(var m in a)hasOwnProperty.call(a,m)&&(l[m]=a[m]);l.originalType=e,l.mdxType="string"==typeof e?e:t,i[1]=l;for(var o=2;o<r;o++)i[o]=s[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,s)}d.displayName="MDXCreateElement"},24365:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>m,contentTitle:()=>i,default:()=>v,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var n=s(87462),t=(s(67294),s(3905));const r={title:"Measuring Java"},i=void 0,l={unversionedId:"Recipes/Metrics/MeasuringJava/index",id:"Recipes/Metrics/MeasuringJava/index",title:"Measuring Java",description:"Synopsis",source:"@site/docs/Recipes/Metrics/MeasuringJava/index.md",sourceDirName:"Recipes/Metrics/MeasuringJava",slug:"/Recipes/Metrics/MeasuringJava/",permalink:"/docs/Recipes/Metrics/MeasuringJava/",draft:!1,tags:[],version:"current",frontMatter:{title:"Measuring Java"},sidebar:"tutorialSidebar",previous:{title:"Metrics",permalink:"/docs/Recipes/Metrics/"},next:{title:"Measuring Classes",permalink:"/docs/Recipes/Metrics/MeasuringJava/MeasuringClasses/"}},m={},o=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4},{value:"Pitfalls",id:"pitfalls",level:4}],c={toc:o};function v(e){let{components:a,...s}=e;return(0,t.kt)("wrapper",(0,n.Z)({},c,s,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h4",{id:"synopsis"},"Synopsis"),(0,t.kt)("p",null,"A few steps using the M3 model to compute basic metrics for a Java project in Eclipse."),(0,t.kt)("h4",{id:"description"},"Description"),(0,t.kt)("p",null,"This is a recipe for computing basic or more advanced metrics from a Java project in Eclipse. We assume:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"You have Rascal installed in an Eclipse instance."),(0,t.kt)("li",{parentName:"ul"},"You have a Java project in your Eclipse workspace that compiles without errors. Let's call it ",(0,t.kt)("inlineCode",{parentName:"li"},"HelloWorld"),".")),(0,t.kt)("p",null,"Now we will follow the ",(0,t.kt)("a",{parentName:"p",href:"/docs/WhyRascal/EASY/"},"EASY")," paradigm:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"a library will be used to ",(0,t.kt)("em",{parentName:"li"},"parse")," the Java code generating ","[Rascalopedia:AbstractSyntaxTree]"),(0,t.kt)("li",{parentName:"ul"},"the same library will generate a ","[Rascal:Values/Relation]","al model to represent interesting facts between Java source code artifacts"),(0,t.kt)("li",{parentName:"ul"},"then we can write queries over the generated trees and relations using ","[Rascal:Expressions]",".")),(0,t.kt)("p",null,"These are a number of recipes for measuring different things about Java:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Recipes/Metrics/MeasuringJava/MeasuringClasses/"},"measuring classes")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Recipes/Metrics/MeasuringJava/MeasuringMethods/"},"measuring methods"))),(0,t.kt)("h4",{id:"examples"},"Examples"),(0,t.kt)("p",null,"First we import the basic data types for representing Java. The model is called ",(0,t.kt)("em",{parentName:"p"},"M3"),", and its definition is split acros a generic\nlanguage independent module called ","[Rascal:analysis/m3/Core]"," and a Java specific part called ","[Rascal:lang/java/m3/Core]",". Have a look at the documentation\nof these modules later. For now we will go through using them in a few examples."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import lang::java::m3::Core;\nok\nrascal>import lang::java::m3::AST;\nok\n")),(0,t.kt)("p",null,'"Snakes and Ladders" is an example Java project of which we have stored the source code in ',(0,t.kt)("inlineCode",{parentName:"p"},"|tmp:///snakes-and-ladders/src|")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>|tmp:///snakes-and-ladders/src/snakes/|.ls\nlist[loc]: [\n  |tmp:///snakes-and-ladders/src/snakes/Die.java|,\n  |tmp:///snakes-and-ladders/src/snakes/SimpleGameTest.java|,\n  |tmp:///snakes-and-ladders/src/snakes/LastSquare.java|,\n  |tmp:///snakes-and-ladders/src/snakes/Snake.java|,\n  |tmp:///snakes-and-ladders/src/snakes/Ladder.java|,\n  |tmp:///snakes-and-ladders/src/snakes/FirstSquare.java|,\n  |tmp:///snakes-and-ladders/src/snakes/DieTest.java|,\n  |tmp:///snakes-and-ladders/src/snakes/Player.java|,\n  |tmp:///snakes-and-ladders/src/snakes/Game.java|,\n  |tmp:///snakes-and-ladders/src/snakes/ISquare.java|,\n  |tmp:///snakes-and-ladders/src/snakes/Square.java|\n]\n")),(0,t.kt)("p",null,"Now we can extract our overview model, using the classpath we derived:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>myModel = createM3FromDirectory(|tmp:///snakes-and-ladders/src|);\nM3: m3(\n  |tmp:///snakes-and-ladders/src|,\n  annotations={\n    <|java+method:///snakes/SimpleGameTest/move1strings(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/Snake/squareLabel()|,|java+interface:///java/lang/Override|>,\n    <|java+method:///snakes/Ladder/landHereOrGoHome()|,|java+interface:///java/lang/Override|>,\n    <|java+method:///snakes/SimpleGameTest/newGame()|,|java+class:///Test|>,\n    <|java+method:///snakes/SimpleGameTest/move8jillWins(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/FirstSquare/isFirstSquare()|,|java+interface:///java/lang/Override|>,\n    <|java+method:///snakes/Ladder/squareLabel()|,|java+interface:///java/lang/Override|>,\n    <|java+method:///snakes/FirstSquare/isOccupied()|,|java+interface:///java/lang/Override|>,\n    <|java+method:///snakes/SimpleGameTest/initialStrings(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/SimpleGameTest/move4jillSnake(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/DieTest/testInRange()|,|java+class:///Test|>,\n    <|java+method:///snakes/DieTest/testMinReached()|,|java+class:///Test|>,\n    <|java+class:///snakes/SimpleGameTest|,|java+class:///RunWith|>,\n    <|java+method:///snakes/SimpleGameTest/move2jackBackwards(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/DieTest/testMaxReached()|,|java+class:///Test|>,\n    <|java+method:///snakes/SimpleGameTest/move5jackLadder(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/SimpleGameTest/move6jill(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/FirstSquare/enter(snakes.Player)|,|java+interface:///java/lang/Override|>,\n    <|java+method:///snakes/LastSquare/isLastSquare()|,|java+interface:///java/lang/Override|>,\n    <|java+method:///snakes/FirstSquare/leave(snakes.Player)|,|java+interface:///java/lang/Override|>,\n    <|java+method:///snakes/SimpleGameTest/move3jackMeetsJill(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/SimpleGameTest/move2jillLadder(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/SimpleGameTest/move7jackBouncesBackToJill(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/SimpleGameTest/move1jack(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/FirstSquare/player()|,|java+interface:///java/lang/Override|>\n  },\n  typeDependency={\n    <|java+method:///snakes/Game/winner()|,|java+class:///snakes/Game|>,\n    <|java+method:///snakes/Game/winner()|,|java+class:///snakes/Player|>,\n    <|java+parameter:///snakes/Player/joinGame(snakes.Game)/scope(game)/scope(0)/game|,|java+class:///snakes/Game|>,\n    <|java+field:///snakes/Game/winner|,|java+class:///snakes/Player|>,\n    <|java+method:///snakes/Square/nextSquare()|,|java+interface:///snakes/ISquare|>,\n    <|java+method:///snakes/Square/nextSquare()|,|java+class:///snakes/Game|>,\n    <|java+method:///snakes/Square/nextSquare()|,|java+primitiveType:///int|>,\n    <|java+method:///snakes/Square/nextSquare()|,|java+class:///snakes/Square|>,\n    <|java+method:///snakes/Square/moveAndLand(int)|,|java+interface:///snakes/ISquare|>,\n    <|java+method:///snakes/Square/moveAndLand(int)|,|java+class:///snakes/Game|>,\n    <|java+method:///snakes/Square/moveAndLand(int)|,|java+primitiveType:///int|>,\n    <|java+method:///snakes/Square/moveAndLand(int)|,|java+class:///snakes/Square|>,\n    <|java+method:///snakes/SimpleGameTest/move1strings(snakes.Game)|,|java+class:///java/lang/String|>,\n    <|java+method:///snakes/SimpleGameTest/move1strings(snakes.Game)|,|java+interface:///snakes/ISquare|>,\n    <|java+method:///snakes/SimpleGameTest/move1strings(snakes.Game)|,|java+class:///snakes/Game|>,\n    <|java+method:///snakes/SimpleGameTest/move1strings(snakes.Game)|,|java+class:///java/lang/Object|>,\n    <|java+method:///snakes/SimpleGameTest/move1strings(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/Game/initSquare(int,snakes.ISquare)|,|java+interface:///snakes/ISquare|>,\n    ...\n")),(0,t.kt)("p",null,"Some projects have extensive classpaths which the M3 extractor requires for accurate Java analysis.\nYou can use this code to extract a classpath if the project is a Maven project:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>import util::Reflective;\nok\nrascal>cp = getProjectPathConfig(|tmp:///snakes-and-ladders|).javaCompilerPath;\nlist[loc]: [\n  |file:///Users/jurgenv/.vscode/extensions/usethesource.rascalmpl-0.6.1-head/assets/jars/rascal-lsp.jar|,\n  |file:///Users/jurgenv/.vscode/extensions/usethesource.rascalmpl-0.6.1-head/assets/jars/rascal.jar|,\n  |file:///Users/jurgenv/.m2/repository/org/rascalmpl/rascal/0.26.1/rascal-0.26.1.jar|\n]\n")),(0,t.kt)("p",null,"and then pass it into the M3 extractor (this project does not have dependencies)"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>myModel = createM3FromDirectory(|tmp:///snakes-and-ladders/src|, classPath=cp);\nM3: m3(\n  |tmp:///snakes-and-ladders/src|,\n  annotations={\n    <|java+method:///snakes/SimpleGameTest/move1strings(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/Snake/squareLabel()|,|java+interface:///java/lang/Override|>,\n    <|java+method:///snakes/Ladder/landHereOrGoHome()|,|java+interface:///java/lang/Override|>,\n    <|java+method:///snakes/SimpleGameTest/newGame()|,|java+interface:///org/junit/Test|>,\n    <|java+method:///snakes/SimpleGameTest/move8jillWins(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/FirstSquare/isFirstSquare()|,|java+interface:///java/lang/Override|>,\n    <|java+method:///snakes/Ladder/squareLabel()|,|java+interface:///java/lang/Override|>,\n    <|java+method:///snakes/FirstSquare/isOccupied()|,|java+interface:///java/lang/Override|>,\n    <|java+method:///snakes/SimpleGameTest/initialStrings(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/SimpleGameTest/move4jillSnake(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/DieTest/testInRange()|,|java+interface:///org/junit/Test|>,\n    <|java+method:///snakes/DieTest/testMinReached()|,|java+interface:///org/junit/Test|>,\n    <|java+class:///snakes/SimpleGameTest|,|java+interface:///org/junit/runner/RunWith|>,\n    <|java+method:///snakes/SimpleGameTest/move2jackBackwards(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/DieTest/testMaxReached()|,|java+interface:///org/junit/Test|>,\n    <|java+method:///snakes/SimpleGameTest/move5jackLadder(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/SimpleGameTest/move6jill(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/FirstSquare/enter(snakes.Player)|,|java+interface:///java/lang/Override|>,\n    <|java+method:///snakes/LastSquare/isLastSquare()|,|java+interface:///java/lang/Override|>,\n    <|java+method:///snakes/FirstSquare/leave(snakes.Player)|,|java+interface:///java/lang/Override|>,\n    <|java+method:///snakes/SimpleGameTest/move3jackMeetsJill(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/SimpleGameTest/move2jillLadder(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/SimpleGameTest/move7jackBouncesBackToJill(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/SimpleGameTest/move1jack(snakes.Game)|,|java+class:///Given|>,\n    <|java+method:///snakes/FirstSquare/player()|,|java+interface:///java/lang/Override|>\n  },\n  typeDependency={\n    <|java+method:///snakes/Game/winner()|,|java+class:///snakes/Game|>,\n    <|java+method:///snakes/Game/winner()|,|java+class:///snakes/Player|>,\n    <|java+parameter:///snakes/Player/joinGame(snakes.Game)/scope(game)/scope(0)/game|,|java+class:///snakes/Game|>,\n    <|java+field:///snakes/Game/winner|,|java+class:///snakes/Player|>,\n    <|java+method:///snakes/Square/nextSquare()|,|java+interface:///snakes/ISquare|>,\n    <|java+method:///snakes/Square/nextSquare()|,|java+class:///snakes/Game|>,\n    <|java+method:///snakes/Square/nextSquare()|,|java+primitiveType:///int|>,\n    <|java+method:///snakes/Square/nextSquare()|,|java+class:///snakes/Square|>,\n    <|java+method:///snakes/Square/moveAndLand(int)|,|java+interface:///snakes/ISquare|>,\n    <|java+method:///snakes/Square/moveAndLand(int)|,|java+class:///snakes/Game|>,\n    <|java+method:///snakes/Square/moveAndLand(int)|,|java+primitiveType:///int|>,\n    <|java+method:///snakes/Square/moveAndLand(int)|,|java+class:///snakes/Square|>,\n    <|java+method:///snakes/SimpleGameTest/move1strings(snakes.Game)|,|java+class:///java/lang/String|>,\n    <|java+method:///snakes/SimpleGameTest/move1strings(snakes.Game)|,|java+interface:///snakes/ISquare|>,\n    <|java+method:///snakes/SimpleGameTest/move1strings(snakes.Game)|,|java+class:///snakes/Game|>,\n    <|java+method:///snakes/SimpleGameTest/move1strings(snakes.Game)|,|java+class:///org/junit/Assert|>,\n    <|java+method:///snakes/SimpleGameTest/move1strings(snakes.Game)|,|java+class:///java/lang/Object|>,\n    <|java+method:///snakes/SimpleGameTest/move1strings(snakes.Game)...\n")),(0,t.kt)("h4",{id:"benefits"},"Benefits"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Notice that ",(0,t.kt)("em",{parentName:"li"},"all")," these ",(0,t.kt)("a",{parentName:"li",href:"/docs/Rascal/Expressions/Values/Location/"},"Location")," literals are hyperlinks and you can click on them to go the source code that they point to. Try it!"),(0,t.kt)("li",{parentName:"ul"},"M3 models are great for metrics, but also they are the basis for many other static analyses"),(0,t.kt)("li",{parentName:"ul"},"See ",(0,t.kt)("a",{parentName:"li",href:"/docs/Recipes/Metrics/MeasuringJava/MeasuringClasses/"},"measuring classes")," and ",(0,t.kt)("a",{parentName:"li",href:"/docs/Recipes/Metrics/MeasuringJava/MeasuringMethods/"},"measuring methods")," for more benefits")),(0,t.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"See ",(0,t.kt)("a",{parentName:"li",href:"/docs/Recipes/Metrics/MeasuringJava/MeasuringClasses/"},"measuring classes")," and ",(0,t.kt)("a",{parentName:"li",href:"/docs/Recipes/Metrics/MeasuringJava/MeasuringMethods/"},"measuring methods")," for more pitfalls")))}v.isMDXComponent=!0}}]);