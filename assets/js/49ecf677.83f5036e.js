"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[71880],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>y});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(r),y=a,m=d["".concat(p,".").concat(y)]||d[y]||c[y]||o;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},22833:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(83117),a=(r(67294),r(3905));const o={title:"Type"},i=void 0,s={unversionedId:"Tutor/Markup/QuestionMarkup/Type/index",id:"Tutor/Markup/QuestionMarkup/Type/index",title:"Type",description:"Synopsis",source:"@site/docs/Tutor/Markup/QuestionMarkup/Type/index.md",sourceDirName:"Tutor/Markup/QuestionMarkup/Type",slug:"/Tutor/Markup/QuestionMarkup/Type/",permalink:"/docs/Tutor/Markup/QuestionMarkup/Type/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Tutor/Markup/QuestionMarkup/Type/index.md",tags:[],version:"current",frontMatter:{title:"Type"},sidebar:"tutorialSidebar",previous:{title:"Text",permalink:"/docs/Tutor/Markup/QuestionMarkup/Text/"},next:{title:"TypeDescriptor",permalink:"/docs/Tutor/Markup/QuestionMarkup/TypeDescriptor/"}},p={},l=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Question 1",id:"question-1",level:2},{value:"Question 2",id:"question-2",level:2}],u={toc:l};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"A question about a Rascal type."),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"QType OptName : TypeDescriptor")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"QType OptName : QSteps Test Listing"))),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"A type question presents a Rascal expressions and poses a question about its type."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"OptName")," is an optional name of the question (enclosed between ",(0,a.kt)("inlineCode",{parentName:"p"},"[")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"]"),").\nIf ",(0,a.kt)("em",{parentName:"p"},"OptName")," is missing, the question gets a unique number as name."),(0,a.kt)("p",null,"The desired type is given by a ",(0,a.kt)("a",{parentName:"p",href:"../../../../Tutor/Markup/QuestionMarkup/TypeDescriptor"},"Type descriptor"),"."),(0,a.kt)("p",null,"The first form presents the value generated for the ",(0,a.kt)("em",{parentName:"p"},"TypeDescriptor")," and asks about its type."),(0,a.kt)("p",null,"The second form allows more preparatory steps and also allows adding a listing to the question."),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"See the effect of the following type questions in the Questions section below."),(0,a.kt)("h2",{id:"question-1"},"Question 1"),(0,a.kt)("p",null,"The following question can be paraphrased as: ",(0,a.kt)("em",{parentName:"p"},"I give you an arbitrary set of integers, what is its type?")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"QType: <A:set[int]>\n")),(0,a.kt)("h2",{id:"question-2"},"Question 2"),(0,a.kt)("p",null,"The following question can be paraphrased as: ",(0,a.kt)("em",{parentName:"p"},"I give you an addition of a set of integers, strings or reals and another set of the same type; what is the type of the result?")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"QType: <A:set[arb[int,str,real]]> + <B:same[A]>\n")))}c.isMDXComponent=!0}}]);