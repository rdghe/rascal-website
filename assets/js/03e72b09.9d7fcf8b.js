"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[72166],{3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>m});var l=i(67294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function n(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,l)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?n(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):n(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,l,r=function(e,t){if(null==e)return{};var i,l,r={},n=Object.keys(e);for(l=0;l<n.length;l++)i=n[l],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(l=0;l<n.length;l++)i=n[l],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var a=l.createContext({}),u=function(e){var t=l.useContext(a),i=t;return e&&(i="function"==typeof e?e(t):s(s({},t),e)),i},c=function(e){var t=u(e.components);return l.createElement(a.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var i=e.components,r=e.mdxType,n=e.originalType,a=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(i),m=r,k=d["".concat(a,".").concat(m)]||d[m]||p[m]||n;return i?l.createElement(k,s(s({ref:t},c),{},{components:i})):l.createElement(k,s({ref:t},c))}));function m(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=i.length,s=new Array(n);s[0]=d;var o={};for(var a in t)hasOwnProperty.call(t,a)&&(o[a]=t[a]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var u=2;u<n;u++)s[u]=i[u];return l.createElement.apply(null,s)}return l.createElement.apply(null,i)}d.displayName="MDXCreateElement"},91237:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>n,metadata:()=>o,toc:()=>u});var l=i(87462),r=(i(67294),i(3905));const n={title:"module util::ShellExec"},s=void 0,o={unversionedId:"Library/util/ShellExec",id:"Library/util/ShellExec",title:"module util::ShellExec",description:"Usage",source:"@site/docs/Library/util/ShellExec.md",sourceDirName:"Library/util",slug:"/Library/util/ShellExec",permalink:"/docs/Library/util/ShellExec",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Library/util/ShellExec.md",tags:[],version:"current",frontMatter:{title:"module util::ShellExec"},sidebar:"tutorialSidebar",previous:{title:"module util::SemVer",permalink:"/docs/Library/util/SemVer"},next:{title:"module util::SystemAPI",permalink:"/docs/Library/util/SystemAPI"}},a={},u=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"function createProcess",id:"util-ShellExec-createProcess",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"function exec",id:"util-ShellExec-exec",level:2},{value:"Synopsis",id:"synopsis-2",level:4},{value:"function execWithCode",id:"util-ShellExec-execWithCode",level:2},{value:"function killProcess",id:"util-ShellExec-killProcess",level:2},{value:"Synopsis",id:"synopsis-3",level:4},{value:"function isAlive",id:"util-ShellExec-isAlive",level:2},{value:"Synopsis",id:"synopsis-4",level:4},{value:"function isZombie",id:"util-ShellExec-isZombie",level:2},{value:"Synopsis",id:"synopsis-5",level:4},{value:"function exitCode",id:"util-ShellExec-exitCode",level:2},{value:"Synopsis",id:"synopsis-6",level:4},{value:"function readFrom",id:"util-ShellExec-readFrom",level:2},{value:"Synopsis",id:"synopsis-7",level:4},{value:"function readWithWait",id:"util-ShellExec-readWithWait",level:2},{value:"Synopsis",id:"synopsis-8",level:4},{value:"function readFromErr",id:"util-ShellExec-readFromErr",level:2},{value:"Synopsis",id:"synopsis-9",level:4},{value:"function readLineFromErr",id:"util-ShellExec-readLineFromErr",level:2},{value:"Synopsis",id:"synopsis-10",level:4},{value:"function readEntireStream",id:"util-ShellExec-readEntireStream",level:2},{value:"Synopsis",id:"synopsis-11",level:4},{value:"function readEntireErrStream",id:"util-ShellExec-readEntireErrStream",level:2},{value:"Synopsis",id:"synopsis-12",level:4},{value:"function writeTo",id:"util-ShellExec-writeTo",level:2},{value:"Synopsis",id:"synopsis-13",level:4},{value:"alias PID",id:"util-ShellExec-PID",level:2},{value:"Synopsis",id:"synopsis-14",level:4},{value:"Description",id:"description",level:4}],c={toc:u};function p(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,l.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"import util::ShellExec;")),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Execute and manage external processes."),(0,r.kt)("h2",{id:"util-ShellExec-createProcess"},"function createProcess"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PID createProcess(str processCommand, loc workingDir=|cwd:///|, list[str] args = [], map[str,str] envVars = ())")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PID createProcess(loc processCommand, loc workingDir=|cwd:///|, list[value] args = [], map[str, value] envVars = ())"))),(0,r.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,r.kt)("p",null,"Start a new external process."),(0,r.kt)("h2",{id:"util-ShellExec-exec"},"function exec"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str exec(str processCommand, loc workingDir=|cwd:///|, list[str] args = [], map[str, str] env = ())")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str exec(loc processCommand, loc workingDir=|cwd:///|, list[value] args = [], map[str, value] env = ())"))),(0,r.kt)("h4",{id:"synopsis-2"},"Synopsis"),(0,r.kt)("p",null,"start, run and kill an external process returning its output as a string."),(0,r.kt)("h2",{id:"util-ShellExec-execWithCode"},"function execWithCode"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tuple[str output, int exitCode] execWithCode(str processCommand, loc workingDir=|cwd:///|, list[str] args = [], map[str, str] env = ())")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tuple[str output, int exitCode] execWithCode(loc processCommand, loc workingDir=|cwd:///|, list[value] args = [], map[str, value] env = ())"))),(0,r.kt)("h2",{id:"util-ShellExec-killProcess"},"function killProcess"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"int killProcess(PID processId, bool force=false)"))),(0,r.kt)("h4",{id:"synopsis-3"},"Synopsis"),(0,r.kt)("p",null,"Kill a running process, or a zombie process (a process which is not alive yet not killed)"),(0,r.kt)("h2",{id:"util-ShellExec-isAlive"},"function isAlive"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bool isAlive(PID processId)"))),(0,r.kt)("h4",{id:"synopsis-4"},"Synopsis"),(0,r.kt)("p",null,"Check whether a process is still alive"),(0,r.kt)("h2",{id:"util-ShellExec-isZombie"},"function isZombie"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bool isZombie(PID processId)"))),(0,r.kt)("h4",{id:"synopsis-5"},"Synopsis"),(0,r.kt)("p",null,"Check whether a process is still registered but not actually running anymore. A zombie process may be cleaned up using killProcess."),(0,r.kt)("h2",{id:"util-ShellExec-exitCode"},"function exitCode"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"int exitCode(PID processId)"))),(0,r.kt)("h4",{id:"synopsis-6"},"Synopsis"),(0,r.kt)("p",null,"Waits for the process to exit and then returns its return code. This is a blocking operation."),(0,r.kt)("h2",{id:"util-ShellExec-readFrom"},"function readFrom"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str readFrom(PID processId)"))),(0,r.kt)("h4",{id:"synopsis-7"},"Synopsis"),(0,r.kt)("p",null,"Read from an existing process's output stream. This is non-blocking."),(0,r.kt)("h2",{id:"util-ShellExec-readWithWait"},"function readWithWait"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str readWithWait(PID processId, int wait)"))),(0,r.kt)("h4",{id:"synopsis-8"},"Synopsis"),(0,r.kt)("p",null,"Read from an existing process's output stream with a given wait timeout. Some processes are a little slower in producing output. The wait is used to give the process some extra time in producing output. This is non-blocking apart from the waiting."),(0,r.kt)("h2",{id:"util-ShellExec-readFromErr"},"function readFromErr"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str readFromErr(PID processId)"))),(0,r.kt)("h4",{id:"synopsis-9"},"Synopsis"),(0,r.kt)("p",null,"Read from an existing process's error output stream. This is non-blocking."),(0,r.kt)("h2",{id:"util-ShellExec-readLineFromErr"},"function readLineFromErr"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str readLineFromErr(PID processId, int wait=200, int maxTries=5)"))),(0,r.kt)("h4",{id:"synopsis-10"},"Synopsis"),(0,r.kt)("p",null,"Read from an existing process's error output stream. This blocks until a full line is read and\nwaits for one second maximally for this line to appear."),(0,r.kt)("h2",{id:"util-ShellExec-readEntireStream"},"function readEntireStream"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str readEntireStream(PID processId)"))),(0,r.kt)("h4",{id:"synopsis-11"},"Synopsis"),(0,r.kt)("p",null,"Read the entire stream from an existing process's output stream. This is blocking."),(0,r.kt)("h2",{id:"util-ShellExec-readEntireErrStream"},"function readEntireErrStream"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str readEntireErrStream(PID processId)"))),(0,r.kt)("h4",{id:"synopsis-12"},"Synopsis"),(0,r.kt)("p",null,"Read the entire error stream from an existing process's output stream. This is blocking."),(0,r.kt)("h2",{id:"util-ShellExec-writeTo"},"function writeTo"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"void writeTo(PID processId, str msg)"))),(0,r.kt)("h4",{id:"synopsis-13"},"Synopsis"),(0,r.kt)("p",null,"Write to an existing process's input stream."),(0,r.kt)("h2",{id:"util-ShellExec-PID"},"alias PID"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"int"))),(0,r.kt)("h4",{id:"synopsis-14"},"Synopsis"),(0,r.kt)("p",null,"Process Identifiers (PID)."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"A PID is returned by ",(0,r.kt)("a",{parentName:"p",href:"/docs/Library/util/ShellExec#util::ShellExec-createProcess"},"create process")," and is required for any further interaction with the created process."))}p.isMDXComponent=!0}}]);