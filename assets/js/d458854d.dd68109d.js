"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[71801],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},52985:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={title:"No Layout"},l=void 0,o={unversionedId:"Recipes/Languages/Exp/Concrete/NoLayout/index",id:"Recipes/Languages/Exp/Concrete/NoLayout/index",title:"No Layout",description:"Synopsis",source:"@site/docs/Recipes/Languages/Exp/Concrete/NoLayout/index.md",sourceDirName:"Recipes/Languages/Exp/Concrete/NoLayout",slug:"/Recipes/Languages/Exp/Concrete/NoLayout/",permalink:"/docs/Recipes/Languages/Exp/Concrete/NoLayout/",draft:!1,tags:[],version:"current",frontMatter:{title:"No Layout"},sidebar:"tutorialSidebar",previous:{title:"Concrete",permalink:"/docs/Recipes/Languages/Exp/Concrete/"},next:{title:"With Layout",permalink:"/docs/Recipes/Languages/Exp/Concrete/WithLayout/"}},s={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"A version of Exp based on concrete syntax."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"We describe howto write a grammar for Exp and how to use it to implement an evaluator."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Here is the grammar for Exp:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'module demo::lang::Exp::Concrete::NoLayout::Syntax\n    \nlexical IntegerLiteral = [0-9]+;      \u2776  \n\nstart syntax Exp             \u2777  \n  = IntegerLiteral           \u2778  \n  | bracket "(" Exp ")"      \u2779  \n  > left Exp "*" Exp         \u277a  \n  > left Exp "+" Exp         \u277b  \n  ;\n\n')),(0,r.kt)("p",null,"Notes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u2776  Defines a lexical syntax rule for IntegerLiterals; they consist of one or more digits."),(0,r.kt)("li",{parentName:"ul"},"\u2777  Defines the alternatives for Exp. The keyword ",(0,r.kt)("inlineCode",{parentName:"li"},"start")," means that this is a start symbol of the grammar."),(0,r.kt)("li",{parentName:"ul"},"\u2778  Defines alternative #1: an ",(0,r.kt)("inlineCode",{parentName:"li"},"IntegerLiteral"),"."),(0,r.kt)("li",{parentName:"ul"},"\u2779  Defines alternative #2: parentheses. The ",(0,r.kt)("inlineCode",{parentName:"li"},"|")," says that this alternative has the same priority as the previous one.\nThe keyword ",(0,r.kt)("inlineCode",{parentName:"li"},"bracket")," marks this as an alternative that defines parentheses."),(0,r.kt)("li",{parentName:"ul"},"\u277a  Defines alternative #3: multiplication. The ",(0,r.kt)("inlineCode",{parentName:"li"},">")," says that the previous rule has a higher priority than the current one.\nThe keyword ",(0,r.kt)("inlineCode",{parentName:"li"},"left")," marks this as a left-associative rule."),(0,r.kt)("li",{parentName:"ul"},"\u277b  Defines alternative #4: addition. The ",(0,r.kt)("inlineCode",{parentName:"li"},">")," says again that the previous rule has a higher priority than the current one.\nThe keyword ",(0,r.kt)("inlineCode",{parentName:"li"},"left")," marks this as a left-associative rule.")),(0,r.kt)("p",null,"Now that the grammar is in place we want to use it to build an evaluator. Here is how:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'module demo::lang::Exp::Concrete::NoLayout::Eval\nimport demo::lang::Exp::Concrete::NoLayout::Syntax;\n\nimport String;\nimport ParseTree;\n\nint eval(str txt) = eval(parse(#Exp, txt));      \u2777  \n\nint eval((Exp)`<IntegerLiteral l>`) = toInt("<l>");            \u2778  \nint eval((Exp)`<Exp e1>*<Exp e2>`) = eval(e1) * eval(e2);      \u2779  \nint eval((Exp)`<Exp e1>+<Exp e2>`) = eval(e1) + eval(e2);      \u277a  \nint eval((Exp)`(<Exp e>)`) = eval(e);\ntest bool tstEval2() = eval("7*3") == 21;\ntest bool tstEval3() = eval("7+3") == 10;\ntest bool tstEval4() = eval("3+4*5") == 23;\n\n')),(0,r.kt)("p",null,"Notes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u2776  We import ","[Rascal:ParseTree]"," because we will need the ",(0,r.kt)("inlineCode",{parentName:"li"},"parse")," function below."),(0,r.kt)("li",{parentName:"ul"},"\u2777  The main function ",(0,r.kt)("inlineCode",{parentName:"li"},"eval")," that evaluates an expression as string to an integer. It proceeds in two steps:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"parse(#Exp, txt)")," parses the given ",(0,r.kt)("inlineCode",{parentName:"li"},"txt")," according to non-terminal ",(0,r.kt)("inlineCode",{parentName:"li"},"Exp")," as defined by the grammar.\nThe result is a parse tree."),(0,r.kt)("li",{parentName:"ul"},"This parse tree is given to another eval function that will reduce the tree to an integer."))),(0,r.kt)("li",{parentName:"ul"},"\u2778  Converts an IntegerLiteral to an integer. Let's dissect this further:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Exp")," preceding the concrete pattern, unambiguously defines the type of the pattern.\nThis is good practice to avoid ambiguities."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<IntegerLiteral l>")," matches an IntegerLiteral and binds it (a parse tree fragment) to variable ",(0,r.kt)("inlineCode",{parentName:"li"},"l"),"."),(0,r.kt)("li",{parentName:"ul"},"In the function body, ",(0,r.kt)("inlineCode",{parentName:"li"},'toInt("<l>")'),", the parse tree fragment is inserted in a string -- effectively unparsing it --\nand that string is converted to an integer."))),(0,r.kt)("li",{parentName:"ul"},"\u2779  Handle the multiplication case."),(0,r.kt)("li",{parentName:"ul"},"\u277a  Handle the addition case."),(0,r.kt)("li",{parentName:"ul"},"\u277b  Handles the case of parentheses.")),(0,r.kt)("p",null,"What remains, is to check that ",(0,r.kt)("inlineCode",{parentName:"p"},"eval")," works as expected."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import demo::lang::Exp::Concrete::NoLayout::Syntax;\nok\nrascal>import ParseTree;\nok\n")),(0,r.kt)("p",null,"Just checking that ",(0,r.kt)("inlineCode",{parentName:"p"},"parse")," returns a sort of parse tree:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},'rascal>parse(#Exp, "2+3");\nExp: (Exp) `2+3`\n')),(0,r.kt)("p",null,"You will see such parse trees only once, unless you are a researcher in parsing ;-)\nHere is a demonstration of ",(0,r.kt)("inlineCode",{parentName:"p"},"eval"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},'rascal>import demo::lang::Exp::Concrete::NoLayout::Eval;\nok\nrascal>eval("2+3");\nint: 5\nrascal>eval("2+3*4");\nint: 14\nrascal>eval("(2+3)*4");\nint: 20\n')))}u.isMDXComponent=!0}}]);