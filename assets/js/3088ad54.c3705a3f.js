"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[25555],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>b});var n=t(67294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=n.createContext({}),u=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=u(e.components);return n.createElement(s.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(t),b=i,f=c["".concat(s,".").concat(b)]||c[b]||m[b]||r;return t?n.createElement(f,l(l({ref:a},p),{},{components:t})):n.createElement(f,l({ref:a},p))}));function b(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=c;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=t[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},99567:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var n=t(83117),i=(t(67294),t(3905));const r={title:"lang::java::syntax::Disambiguate"},l=void 0,o={unversionedId:"Library/lang/java/syntax/Disambiguate",id:"Library/lang/java/syntax/Disambiguate",title:"lang::java::\\syntax::Disambiguate",description:"Usage",source:"@site/docs/Library/lang/java/syntax/Disambiguate.md",sourceDirName:"Library/lang/java/syntax",slug:"/Library/lang/java/syntax/Disambiguate",permalink:"/docs/Library/lang/java/syntax/Disambiguate",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/lang/java/syntax/Disambiguate.md",tags:[],version:"current",frontMatter:{title:"lang::java::\\syntax::Disambiguate"},sidebar:"tutorialSidebar",previous:{title:"lang::java::syntax",permalink:"/docs/Library/lang/java/syntax/"},next:{title:"lang::java::\\syntax::Java15",permalink:"/docs/Library/lang/java/syntax/Java15"}},s={},u=[{value:"Usage",id:"usage",level:4},{value:"function isNumeric",id:"lang-java-syntax-Disambiguate-isNumeric",level:2},{value:"function isPrefix",id:"lang-java-syntax-Disambiguate-isPrefix",level:2},{value:"function amb",id:"lang-java-syntax-Disambiguate-amb",level:2},{value:"function containsPrefixExpressions",id:"lang-java-syntax-Disambiguate-containsPrefixExpressions",level:2},{value:"function containsPrefixExpression",id:"lang-java-syntax-Disambiguate-containsPrefixExpression",level:2}],p={toc:u};function m(e){let{components:a,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"import lang::java::\\syntax::Disambiguate;")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Import this module to Disambiguate the ambiguity cause by the prefix operators +/- and infix operators +/-.\nAn example of this ambiguity is `A + B`` . This could be `A (+B)` or `(A) + (B)`.\nWe need to have a symbol table to decide if A is a type and thus a TypeCast, or it is a field/variable access.\n\nJava lacks operator overloading, therefore, prefix operators only work on numeric types.\nMoreover, there is no support for custom covariance and contravariance.\nTherefore, only if (A) is a primary/boxed numeric type can it be a prefix expression.\n\nWe therefore have added this complete but not sound disambiguation as a separate module.\n\nThese following cases will result in a incorrect parse tree:\n\n- Shadowing of Integer/Double/Float\n- An invalid type cast: (String)+(A) where A has a numeric type\n  (This expression would be an uncompilable, and we would disambiguate it as a infix expression) \n")),(0,i.kt)("h2",{id:"lang-java-\\syntax-Disambiguate-isNumeric"},"function isNumeric"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isNumeric((RefType)`Byte`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isNumeric((RefType)`java.lang.Byte`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isNumeric((RefType)`Character`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isNumeric((RefType)`java.lang.Character`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isNumeric((RefType)`Short`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isNumeric((RefType)`java.lang.Short`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isNumeric((RefType)`Integer`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isNumeric((RefType)`java.lang.Integer`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isNumeric((RefType)`Long`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isNumeric((RefType)`java.lang.Long`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isNumeric((RefType)`Float`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isNumeric((RefType)`java.lang.Float`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isNumeric((RefType)`Double`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isNumeric((RefType)`java.lang.Double`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default bool isNumeric(RefType r)"))),(0,i.kt)("h2",{id:"lang-java-\\syntax-Disambiguate-isPrefix"},"function isPrefix"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isPrefix((Expr)`+ <Expr _>`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isPrefix((Expr)`++ <Expr _>`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isPrefix((Expr)`- <Expr _>`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isPrefix((Expr)`-- <Expr _>`)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default bool isPrefix(Expr x)"))),(0,i.kt)("h2",{id:"lang-java-\\syntax-Disambiguate-amb"},"function amb"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Tree amb(set[Tree] alts)"))),(0,i.kt)("h2",{id:"lang-java-\\syntax-Disambiguate-containsPrefixExpressions"},"function containsPrefixExpressions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool containsPrefixExpressions(set[Tree] trees)"))),(0,i.kt)("h2",{id:"lang-java-\\syntax-Disambiguate-containsPrefixExpression"},"function containsPrefixExpression"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool containsPrefixExpression(Tree t)"))))}m.isMDXComponent=!0}}]);