"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[57980],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||l;return r?n.createElement(f,i(i({ref:t},d),{},{components:r})):n.createElement(f,i({ref:t},d))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},94587:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var n=r(83117),a=(r(67294),r(3905));const l={title:"RedeclaredField"},i=void 0,o={unversionedId:"CompileTimeErrors/RedeclaredField/index",id:"CompileTimeErrors/RedeclaredField/index",title:"RedeclaredField",description:"Synopsis",source:"@site/docs/CompileTimeErrors/RedeclaredField/index.md",sourceDirName:"CompileTimeErrors/RedeclaredField",slug:"/CompileTimeErrors/RedeclaredField/",permalink:"/docs/CompileTimeErrors/RedeclaredField/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/CompileTimeErrors/RedeclaredField/index.md",tags:[],version:"current",frontMatter:{title:"RedeclaredField"},sidebar:"tutorialSidebar",previous:{title:"PartiallyLabeledFields",permalink:"/docs/CompileTimeErrors/PartiallyLabeledFields/"},next:{title:"RedeclaredType",permalink:"/docs/CompileTimeErrors/RedeclaredType/"}},s={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Usage",id:"usage",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],d={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"A field name is redeclared."),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("h4",{id:"types"},"Types"),(0,a.kt)("h4",{id:"function"},"Function"),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"The definition of an ",(0,a.kt)("a",{parentName:"p",href:"/docs/Rascal/Declarations/AlgebraicDataType"},"algebraic data type")," consists of a number of constructor functions.\nEach constructor has named fields but the same field name may only be used in different constructors\nif it has the same type in all occurrences in the declaration."),(0,a.kt)("p",null,"Remedy: rename one of the fields in the declaration."),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"This is correct since all occurrences of ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," have type ",(0,a.kt)("inlineCode",{parentName:"p"},"int"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>data D = d1(int key) | d2(str name, int key);\nok\n")),(0,a.kt)("p",null,"This is incorrect since ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," is used as ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," and as ",(0,a.kt)("inlineCode",{parentName:"p"},"str"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>data D = d1(int key) | d2(str key);\nok\n")),(0,a.kt)("p",null,"This can be corrected by choosing other names for the labels:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>data D = d1(int intKey) | d2(str strKey);\nok\n")),(0,a.kt)("p",null,"A tuple declaration with a duplicate field name also gives an error:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>tuple[int x, str x] Q = <3,"abc">;\nok\n')),(0,a.kt)("h4",{id:"benefits"},"Benefits"))}p.isMDXComponent=!0}}]);