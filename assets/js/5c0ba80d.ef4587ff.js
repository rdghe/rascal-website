"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[70894],{3905:(e,t,l)=>{l.d(t,{Zo:()=>u,kt:()=>c});var i=l(67294);function n(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function a(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,i)}return l}function s(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?a(Object(l),!0).forEach((function(t){n(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):a(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function r(e,t){if(null==e)return{};var l,i,n=function(e,t){if(null==e)return{};var l,i,n={},a=Object.keys(e);for(i=0;i<a.length;i++)l=a[i],t.indexOf(l)>=0||(n[l]=e[l]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)l=a[i],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var p=i.createContext({}),o=function(e){var t=i.useContext(p),l=t;return e&&(l="function"==typeof e?e(t):s(s({},t),e)),l},u=function(e){var t=o(e.components);return i.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var l=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=o(l),c=n,k=d["".concat(p,".").concat(c)]||d[c]||m[c]||a;return l?i.createElement(k,s(s({ref:t},u),{},{components:l})):i.createElement(k,s({ref:t},u))}));function c(e,t){var l=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=l.length,s=new Array(a);s[0]=d;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:n,s[1]=r;for(var o=2;o<a;o++)s[o]=l[o];return i.createElement.apply(null,s)}return i.createElement.apply(null,l)}d.displayName="MDXCreateElement"},95365:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>o});var i=l(83117),n=(l(67294),l(3905));const a={title:"module List"},s=void 0,r={unversionedId:"Library/List",id:"Library/List",title:"module List",description:"Usage",source:"@site/docs/Library/List.md",sourceDirName:"Library",slug:"/Library/List",permalink:"/docs/Library/List",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/List.md",tags:[],version:"current",frontMatter:{title:"module List"},sidebar:"tutorialSidebar",previous:{title:"module IO",permalink:"/docs/Library/IO"},next:{title:"module ListRelation",permalink:"/docs/Library/ListRelation"}},p={},o=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"function concat",id:"List-concat",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Examples",id:"examples",level:4},{value:"function delete",id:"List-delete",level:2},{value:"Synopsis",id:"synopsis-2",level:4},{value:"Description",id:"description-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"function distribution",id:"List-distribution",level:2},{value:"Synopsis",id:"synopsis-3",level:4},{value:"Examples",id:"examples-2",level:4},{value:"function drop",id:"List-drop",level:2},{value:"Synopsis",id:"synopsis-4",level:4},{value:"Description",id:"description-2",level:4},{value:"Examples",id:"examples-3",level:4},{value:"function dup",id:"List-dup",level:2},{value:"Synopsis",id:"synopsis-5",level:4},{value:"Examples",id:"examples-4",level:4},{value:"function elementAt",id:"List-elementAt",level:2},{value:"function getOneFrom",id:"List-getOneFrom",level:2},{value:"Synopsis",id:"synopsis-6",level:4},{value:"Description",id:"description-3",level:4},{value:"Examples",id:"examples-5",level:4},{value:"function getFirstFrom",id:"List-getFirstFrom",level:2},{value:"Synopsis",id:"synopsis-7",level:4},{value:"Description",id:"description-4",level:4},{value:"function head",id:"List-head",level:2},{value:"Synopsis",id:"synopsis-8",level:4},{value:"Description",id:"description-5",level:4},{value:"Examples",id:"examples-6",level:4},{value:"function headTail",id:"List-headTail",level:2},{value:"Synopsis",id:"synopsis-9",level:4},{value:"Description",id:"description-6",level:4},{value:"Examples",id:"examples-7",level:4},{value:"function index",id:"List-index",level:2},{value:"Synopsis",id:"synopsis-10",level:4},{value:"Description",id:"description-7",level:4},{value:"Examples",id:"examples-8",level:4},{value:"Benefits",id:"benefits",level:4},{value:"function indexOf",id:"List-indexOf",level:2},{value:"Synopsis",id:"synopsis-11",level:4},{value:"Description",id:"description-8",level:4},{value:"Examples",id:"examples-9",level:4},{value:"function insertAt",id:"List-insertAt",level:2},{value:"Synopsis",id:"synopsis-12",level:4},{value:"Description",id:"description-9",level:4},{value:"Examples",id:"examples-10",level:4},{value:"function intercalate",id:"List-intercalate",level:2},{value:"Synopsis",id:"synopsis-13",level:4},{value:"Examples",id:"examples-11",level:4},{value:"function intersperse",id:"List-intersperse",level:2},{value:"Synopsis",id:"synopsis-14",level:4},{value:"Examples",id:"examples-12",level:4},{value:"function isEmpty",id:"List-isEmpty",level:2},{value:"Synopsis",id:"synopsis-15",level:4},{value:"Description",id:"description-10",level:4},{value:"Examples",id:"examples-13",level:4},{value:"function last",id:"List-last",level:2},{value:"Synopsis",id:"synopsis-16",level:4},{value:"Description",id:"description-11",level:4},{value:"Examples",id:"examples-14",level:4},{value:"function lastIndexOf",id:"List-lastIndexOf",level:2},{value:"Synopsis",id:"synopsis-17",level:4},{value:"Description",id:"description-12",level:4},{value:"Examples",id:"examples-15",level:4},{value:"function mapper",id:"List-mapper",level:2},{value:"Synopsis",id:"synopsis-18",level:4},{value:"Description",id:"description-13",level:4},{value:"Examples",id:"examples-16",level:4},{value:"function max",id:"List-max",level:2},{value:"Synopsis",id:"synopsis-19",level:4},{value:"Examples",id:"examples-17",level:4},{value:"function merge",id:"List-merge",level:2},{value:"Synopsis",id:"synopsis-20",level:4},{value:"Description",id:"description-14",level:4},{value:"Examples",id:"examples-18",level:4},{value:"function min",id:"List-min",level:2},{value:"Synopsis",id:"synopsis-21",level:4},{value:"Examples",id:"examples-19",level:4},{value:"function mix",id:"List-mix",level:2},{value:"Synopsis",id:"synopsis-22",level:4},{value:"Description",id:"description-15",level:4},{value:"Examples",id:"examples-20",level:4},{value:"function permutations",id:"List-permutations",level:2},{value:"Synopsis",id:"synopsis-23",level:4},{value:"Examples",id:"examples-21",level:4},{value:"function permutationsBag",id:"List-permutationsBag",level:2},{value:"function pop",id:"List-pop",level:2},{value:"Synopsis",id:"synopsis-24",level:4},{value:"Description",id:"description-16",level:4},{value:"Examples",id:"examples-22",level:4},{value:"function prefix",id:"List-prefix",level:2},{value:"Synopsis",id:"synopsis-25",level:4},{value:"Examples",id:"examples-23",level:4},{value:"function push",id:"List-push",level:2},{value:"Synopsis",id:"synopsis-26",level:4},{value:"Description",id:"description-17",level:4},{value:"Examples",id:"examples-24",level:4},{value:"function reducer",id:"List-reducer",level:2},{value:"Synopsis",id:"synopsis-27",level:4},{value:"Description",id:"description-18",level:4},{value:"Examples",id:"examples-25",level:4},{value:"Pitfalls",id:"pitfalls",level:4},{value:"function remove",id:"List-remove",level:2},{value:"function removeFromBag",id:"List-removeFromBag",level:2},{value:"function reverse",id:"List-reverse",level:2},{value:"Synopsis",id:"synopsis-28",level:4},{value:"Description",id:"description-19",level:4},{value:"Examples",id:"examples-26",level:4},{value:"function size",id:"List-size",level:2},{value:"Synopsis",id:"synopsis-29",level:4},{value:"Examples",id:"examples-27",level:4},{value:"function slice",id:"List-slice",level:2},{value:"Synopsis",id:"synopsis-30",level:4},{value:"Description",id:"description-20",level:4},{value:"Examples",id:"examples-28",level:4},{value:"function sort",id:"List-sort",level:2},{value:"Synopsis",id:"synopsis-31",level:4},{value:"Description",id:"description-21",level:4},{value:"Examples",id:"examples-29",level:4},{value:"function isSorted",id:"List-isSorted",level:2},{value:"Synopsis",id:"synopsis-32",level:4},{value:"Description",id:"description-22",level:4},{value:"function shuffle",id:"List-shuffle",level:2},{value:"Synopsis",id:"synopsis-33",level:4},{value:"Description",id:"description-23",level:4},{value:"Examples",id:"examples-30",level:4},{value:"function split",id:"List-split",level:2},{value:"Synopsis",id:"synopsis-34",level:4},{value:"Examples",id:"examples-31",level:4},{value:"function sum",id:"List-sum",level:2},{value:"Synopsis",id:"synopsis-35",level:4},{value:"Examples",id:"examples-32",level:4},{value:"function tail",id:"List-tail",level:2},{value:"Synopsis",id:"synopsis-36",level:4},{value:"Description",id:"description-24",level:4},{value:"Examples",id:"examples-33",level:4},{value:"function take",id:"List-take",level:2},{value:"Synopsis",id:"synopsis-37",level:4},{value:"Description",id:"description-25",level:4},{value:"Examples",id:"examples-34",level:4},{value:"function takeOneFrom",id:"List-takeOneFrom",level:2},{value:"Synopsis",id:"synopsis-38",level:4},{value:"Description",id:"description-26",level:4},{value:"Examples",id:"examples-35",level:4},{value:"function takeWhile",id:"List-takeWhile",level:2},{value:"Synopsis",id:"synopsis-39",level:4},{value:"Examples",id:"examples-36",level:4},{value:"function toMap",id:"List-toMap",level:2},{value:"Synopsis",id:"synopsis-40",level:4},{value:"Description",id:"description-27",level:4},{value:"Examples",id:"examples-37",level:4},{value:"Pitfalls",id:"pitfalls-1",level:4},{value:"function toMapUnique",id:"List-toMapUnique",level:2},{value:"Synopsis",id:"synopsis-41",level:4},{value:"Description",id:"description-28",level:4},{value:"Examples",id:"examples-38",level:4},{value:"Pitfalls",id:"pitfalls-2",level:4},{value:"function top",id:"List-top",level:2},{value:"Synopsis",id:"synopsis-42",level:4},{value:"Description",id:"description-29",level:4},{value:"Examples",id:"examples-39",level:4},{value:"function toRel",id:"List-toRel",level:2},{value:"Synopsis",id:"synopsis-43",level:4},{value:"Description",id:"description-30",level:4},{value:"Examples",id:"examples-40",level:4},{value:"function toSet",id:"List-toSet",level:2},{value:"Synopsis",id:"synopsis-44",level:4},{value:"Description",id:"description-31",level:4},{value:"Examples",id:"examples-41",level:4},{value:"function toString",id:"List-toString",level:2},{value:"Synopsis",id:"synopsis-45",level:4},{value:"Description",id:"description-32",level:4},{value:"Examples",id:"examples-42",level:4},{value:"function itoString",id:"List-itoString",level:2},{value:"Synopsis",id:"synopsis-46",level:4},{value:"Description",id:"description-33",level:4},{value:"Examples",id:"examples-43",level:4},{value:"function unzip2",id:"List-unzip2",level:2},{value:"Synopsis",id:"synopsis-47",level:4},{value:"Description",id:"description-34",level:4},{value:"Examples",id:"examples-44",level:4},{value:"function unzip3",id:"List-unzip3",level:2},{value:"function upTill",id:"List-upTill",level:2},{value:"Synopsis",id:"synopsis-48",level:4},{value:"Description",id:"description-35",level:4},{value:"Examples",id:"examples-45",level:4},{value:"function zip2",id:"List-zip2",level:2},{value:"Synopsis",id:"synopsis-49",level:4},{value:"Description",id:"description-36",level:4},{value:"Examples",id:"examples-46",level:4},{value:"function zip3",id:"List-zip3",level:2}],u={toc:o};function m(e){let{components:t,...l}=e;return(0,n.kt)("wrapper",(0,i.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"usage"},"Usage"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"import List;")),(0,n.kt)("h4",{id:"synopsis"},"Synopsis"),(0,n.kt)("p",null,"Library functions for lists."),(0,n.kt)("h4",{id:"description"},"Description"),(0,n.kt)("p",null,"For operators on lists see ",(0,n.kt)("a",{parentName:"p",href:"../Rascal/Expressions/Values/List"},"List")," in the Rascal Language Reference."),(0,n.kt)("p",null,"The following functions are available for lists:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-concat"},"Library:function:List::concat")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-delete"},"Library:function:List::delete")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-distribution"},"Library:function:List::distribution")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-drop"},"Library:function:List::drop")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-dup"},"Library:function:List::dup")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-elementAt"},"Library:function:List::element at")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-getFirstFrom"},"Library:function:List::get first from")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-getOneFrom"},"Library:function:List::get one from")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-head"},"Library:function:List::head")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-headTail"},"Library:function:List::head tail")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-index"},"Library:function:List::index")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-indexOf"},"Library:function:List::index of")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-insertAt"},"Library:function:List::insert at")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-intercalate"},"Library:function:List::intercalate")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-intersperse"},"Library:function:List::intersperse")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-isEmpty"},"Library:function:List::is empty")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-isSorted"},"Library:function:List::is sorted")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-itoString"},"Library:function:List::ito string")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-last"},"Library:function:List::last")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-lastIndexOf"},"Library:function:List::last index of")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-mapper"},"Library:function:List::mapper")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-max"},"Library:function:List::max")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-merge"},"Library:function:List::merge")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-min"},"Library:function:List::min")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-mix"},"Library:function:List::mix")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-permutations"},"Library:function:List::permutations")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-permutationsBag"},"Library:function:List::permutations bag")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-pop"},"Library:function:List::pop")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-prefix"},"Library:function:List::prefix")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-push"},"Library:function:List::push")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-reducer"},"Library:function:List::reducer")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-remove"},"Library:function:List::remove")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-removeFromBag"},"Library:function:List::remove from bag")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-reverse"},"Library:function:List::reverse")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-shuffle"},"Library:function:List::shuffle")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-size"},"Library:function:List::size")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-slice"},"Library:function:List::slice")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-sort"},"Library:function:List::sort")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-split"},"Library:function:List::split")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-sum"},"Library:function:List::sum")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-tail"},"Library:function:List::tail")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-take"},"Library:function:List::take")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-takeOneFrom"},"Library:function:List::take one from")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-takeWhile"},"Library:function:List::take while")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-toMap"},"Library:function:List::to map")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-toMapUnique"},"Library:function:List::to map unique")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-toRel"},"Library:function:List::to rel")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-toSet"},"Library:function:List::to set")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-toString"},"Library:function:List::to string")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-top"},"Library:function:List::top")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-unzip2"},"Library:function:List::unzip2")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-unzip3"},"Library:function:List::unzip3")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-upTill"},"Library:function:List::up till")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-zip2"},"Library:function:List::zip2")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-zip3"},"Library:function:List::zip3"))),(0,n.kt)("h2",{id:"List-concat"},"function concat"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] concat(list[list[&T]] xxs)"))),(0,n.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,n.kt)("p",null,"Concatenate a list of lists."),(0,n.kt)("h4",{id:"examples"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import List;\nok\nrascal>concat([]);\nlist[void]: []\nrascal>concat([[]]);\nlist[void]: []\nrascal>concat([[1]]);\nlist[int]: [1]\nrascal>concat([[1],[],[2,3]]);\nlist[int]: [1,2,3]\nrascal>concat([[1,2],[3],[4,5],[]]);\nlist[int]: [1,2,3,4,5]\n")),(0,n.kt)("h2",{id:"List-delete"},"function delete"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] delete(list[&T] lst, int n)"))),(0,n.kt)("h4",{id:"synopsis-2"},"Synopsis"),(0,n.kt)("p",null,"Delete an element from a list."),(0,n.kt)("h4",{id:"description-1"},"Description"),(0,n.kt)("p",null,"Delete the ",(0,n.kt)("inlineCode",{parentName:"p"},"n"),"-th element from a list. A new list without the ",(0,n.kt)("inlineCode",{parentName:"p"},"n"),"-th element is returned as result.\nThe ",(0,n.kt)("inlineCode",{parentName:"p"},"IndexOutOfBounds")," exception is thrown when n is not a valid index."),(0,n.kt)("h4",{id:"examples-1"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>delete([1, 2, 3], 1);\nlist[int]: [1,3]\nrascal>delete(["zebra", "elephant", "snake", "owl"], 2);\nlist[str]: ["zebra","elephant","owl"]\n')),(0,n.kt)("h2",{id:"List-distribution"},"function distribution"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"map[&T element, int occurs] distribution(list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-3"},"Synopsis"),(0,n.kt)("p",null,"Get the distribution of the elements of the list. That\nis how often does each element occur in the list? "),(0,n.kt)("h4",{id:"examples-2"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import List;\nok\nrascal>distribution([4,4,4,3,1,2,1,1,3,4]);\nmap[int element, int occurs]: (1:3,3:2,2:1,4:4)\n")),(0,n.kt)("h2",{id:"List-drop"},"function drop"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] drop(int n, list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-4"},"Synopsis"),(0,n.kt)("p",null,"Drop elements from the head of a list."),(0,n.kt)("h4",{id:"description-2"},"Description"),(0,n.kt)("p",null,"Drop ",(0,n.kt)("inlineCode",{parentName:"p"},"n")," elements (or ",(0,n.kt)("inlineCode",{parentName:"p"},"size(lst)")," elements if ",(0,n.kt)("inlineCode",{parentName:"p"},"size(lst) < n"),") from the head of ",(0,n.kt)("inlineCode",{parentName:"p"},"lst"),".\nSee ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-take"},"take")," to get elements from the head of a list]."),(0,n.kt)("h4",{id:"examples-3"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>drop(2, [5, 1, 7, 3]);\nlist[int]: [7,3]\nrascal>drop(10, [5, 1, 7, 3]);\nlist[int]: []\nrascal>drop(2, ["zebra", "elephant", "snake", "owl"]);\nlist[str]: ["snake","owl"]\n')),(0,n.kt)("h2",{id:"List-dup"},"function dup"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] dup(list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-5"},"Synopsis"),(0,n.kt)("p",null,"Remove multiple occurrences of elements in a list. The first occurrence remains."),(0,n.kt)("h4",{id:"examples-4"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import List;\nok\nrascal>dup([3, 1, 5, 3, 1, 7, 1, 2]);\nlist[int]: [3,1,5,7,2]\n")),(0,n.kt)("h2",{id:"List-elementAt"},"function elementAt"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"&T elementAt(list[&T] lst, int index)"))),(0,n.kt)("h2",{id:"List-getOneFrom"},"function getOneFrom"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"&T getOneFrom(list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-6"},"Synopsis"),(0,n.kt)("p",null,"Pick a random element from a list."),(0,n.kt)("h4",{id:"description-3"},"Description"),(0,n.kt)("p",null,"Get an arbitrary element from a list. See ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-takeOneFrom"},"take one from")," for a function that also removes the selected element."),(0,n.kt)("h4",{id:"examples-5"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>getOneFrom(["zebra", "elephant", "snake", "owl"]);\nstr: "snake"\nrascal>getOneFrom(["zebra", "elephant", "snake", "owl"]);\nstr: "elephant"\nrascal>getOneFrom(["zebra", "elephant", "snake", "owl"]);\nstr: "snake"\n')),(0,n.kt)("h2",{id:"List-getFirstFrom"},"function getFirstFrom"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"&T getFirstFrom([&T f, *&T _])")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"&T getFirstFrom(list[&T] _ :[])"))),(0,n.kt)("h4",{id:"synopsis-7"},"Synopsis"),(0,n.kt)("p",null,"Pick first element from a list."),(0,n.kt)("h4",{id:"description-4"},"Description"),(0,n.kt)("p",null,"Get the first element from a list. As opposed to ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-getOneFrom"},"get one from")," this function always returns the same (first) list element."),(0,n.kt)("h2",{id:"List-head"},"function head"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"&T head([&T h, *&T _])")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"&T head(list[&T] _:[])")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] head(list[&T] lst, int n) throws IndexOutOfBounds"))),(0,n.kt)("h4",{id:"synopsis-8"},"Synopsis"),(0,n.kt)("p",null,"Get the first element(s) from a list."),(0,n.kt)("h4",{id:"description-5"},"Description"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Returns the first element of a list or throws ",(0,n.kt)("inlineCode",{parentName:"li"},"EmptyList")," when the list is empty.\nThis is identical to ",(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-top"},"top"),"."),(0,n.kt)("li",{parentName:"ul"},"Returns the first ",(0,n.kt)("inlineCode",{parentName:"li"},"n")," elements of a list or throws ",(0,n.kt)("inlineCode",{parentName:"li"},"IndexOutOfBounds")," when the list is too short.\nThis is similar to ",(0,n.kt)("a",{parentName:"li",href:"/docs/Library/List#List-take"},"take"),".")),(0,n.kt)("h4",{id:"examples-6"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import List;\nok\n")),(0,n.kt)("p",null,"Get the first element:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>head([1, 2, 3]);\nint: 1\nrascal>head(["zebra", "elephant", "snake", "owl"]);\nstr: "zebra"\n')),(0,n.kt)("p",null,"An exception is thrown when taking the head of an empty list:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>head([]);\n|std:///List.rsc|(4522,9,<195,38>,<195,47>): EmptyList()\n    at head(|std:///List.rsc|(4484,52,<195,0>,<195,52>))\n    at $shell$(|prompt:///|(0,9,<1,0>,<1,9>))\nok\n")),(0,n.kt)("p",null,"Get the first n elements:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>head([1, 2, 3, 4], 2);\nlist[int]: [1,2]\nrascal>head(["zebra", "elephant", "snake", "owl"], 2);\nlist[str]: ["zebra","elephant"]\n')),(0,n.kt)("p",null,"An exception is thrown when the second argument exceeds the length of the list:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>head([1, 2, 3, 5], 5);\n|std:///List.rsc|(4576,113,<198,0>,<199,71>): IndexOutOfBounds(4)\n    at *** somewhere ***(|std:///List.rsc|(4576,113,<198,0>,<199,71>))\n    at head(|prompt:///|(19,1,<1,19>,<1,20>))\nok\n")),(0,n.kt)("h2",{id:"List-headTail"},"function headTail"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"tuple[&T, list[&T]] headTail([&T h, *&T t])")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"tuple[&T, list[&T]] headTail(list[&T] _:[])"))),(0,n.kt)("h4",{id:"synopsis-9"},"Synopsis"),(0,n.kt)("p",null,"Split a list in a head and a tail."),(0,n.kt)("h4",{id:"description-6"},"Description"),(0,n.kt)("p",null,"This function is identical to ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-pop"},"pop"),"."),(0,n.kt)("h4",{id:"examples-7"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>headTail([3, 1, 4, 5]);\ntuple[int,list[int]]: <3,[1,4,5]>\nrascal>pop([3, 1, 4, 5]);\ntuple[int,list[int]]: <3,[1,4,5]>\nrascal>headTail(["zebra", "elephant", "snake", "owl"]);\ntuple[str,list[str]]: <"zebra",["elephant","snake","owl"]>\n')),(0,n.kt)("h2",{id:"List-index"},"function index"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[int] index(list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-10"},"Synopsis"),(0,n.kt)("p",null,"A list of legal index values of a list."),(0,n.kt)("h4",{id:"description-7"},"Description"),(0,n.kt)("p",null,"Returns a list of all legal index values for a given list ",(0,n.kt)("inlineCode",{parentName:"p"},"lst"),"."),(0,n.kt)("h4",{id:"examples-8"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>index([1, 3, 5]);\nlist[int]: [0,1,2]\nrascal>index(["zebra", "elephant", "snake", "owl"]);\nlist[int]: [0,1,2,3]\n')),(0,n.kt)("h4",{id:"benefits"},"Benefits"),(0,n.kt)("p",null,"This function is useful in ",(0,n.kt)("a",{parentName:"p",href:"../Rascal/Statements/For"},"for")," loops over lists."),(0,n.kt)("h2",{id:"List-indexOf"},"function indexOf"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"int indexOf(list[&T] lst, &T elt)"))),(0,n.kt)("h4",{id:"synopsis-11"},"Synopsis"),(0,n.kt)("p",null,"Index of first occurrence of an element in a list."),(0,n.kt)("h4",{id:"description-8"},"Description"),(0,n.kt)("p",null,"Return index of first occurrence of ",(0,n.kt)("inlineCode",{parentName:"p"},"elt")," in ",(0,n.kt)("inlineCode",{parentName:"p"},"lst"),", or ",(0,n.kt)("inlineCode",{parentName:"p"},"-1")," if ",(0,n.kt)("inlineCode",{parentName:"p"},"elt")," is not found.\nAlso see ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-lastIndexOf"},"last index of"),"."),(0,n.kt)("h4",{id:"examples-9"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>indexOf([3, 1, 4, 5], 4);\nint: 2\nrascal>indexOf([3, 1, 4, 5], 7);\nint: -1\nrascal>indexOf(["zebra", "elephant", "snake", "owl"], "snake");\nint: 2\nrascal>indexOf(["zebra", "elephant", "snake", "owl"], "eagle");\nint: -1\n')),(0,n.kt)("h2",{id:"List-insertAt"},"function insertAt"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] insertAt(list[&T] lst, int n, &T elm) throws IndexOutOfBounds"))),(0,n.kt)("h4",{id:"synopsis-12"},"Synopsis"),(0,n.kt)("p",null,"Insert an element at a specific position in a list."),(0,n.kt)("h4",{id:"description-9"},"Description"),(0,n.kt)("p",null,"Returns a new list with the value of ",(0,n.kt)("inlineCode",{parentName:"p"},"elm")," inserted at index position ",(0,n.kt)("inlineCode",{parentName:"p"},"n")," of the old list."),(0,n.kt)("h4",{id:"examples-10"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>insertAt([1,2,3], 1, 5);\nlist[int]: [1,5,2,3]\nrascal>insertAt(["zebra", "elephant", "snake", "owl"], 2, "eagle");\nlist[str]: ["zebra","elephant","eagle","snake","owl"]\n')),(0,n.kt)("p",null,"An exception is thrown when the index position is outside the list:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>insertAt([1,2,3], 10, 5);\n|std:///List.rsc|(6047,579,<273,0>,<294,83>): IndexOutOfBounds(10)\n    at *** somewhere ***(|std:///List.rsc|(6047,579,<273,0>,<294,83>))\n    at insertAt(|prompt:///|(22,1,<1,22>,<1,23>))\nok\n")),(0,n.kt)("h2",{id:"List-intercalate"},"function intercalate"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str intercalate(str sep, list[value] l)"))),(0,n.kt)("h4",{id:"synopsis-13"},"Synopsis"),(0,n.kt)("p",null,"Join a list of values into a string separated by a separator."),(0,n.kt)("h4",{id:"examples-11"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>intercalate("/", [3]);\nstr: "3"\nrascal>intercalate("/", [3, 1, 4, 5]);\nstr: "3/1/4/5"\nrascal>intercalate(", ", [3, 1, 4, 5]);\nstr: "3, 1, 4, 5"\nrascal>intercalate(", ", ["zebra", "elephant", "snake", "owl"]);\nstr: "zebra, elephant, snake, owl"\n')),(0,n.kt)("h2",{id:"List-intersperse"},"function intersperse"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] intersperse(&T sep, list[&T] xs)"))),(0,n.kt)("h4",{id:"synopsis-14"},"Synopsis"),(0,n.kt)("p",null,"Intersperses a list of values with a separator."),(0,n.kt)("h4",{id:"examples-12"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>intersperse(", ", ["a","b","c"]);\nlist[str]: ["a",", ","b",", ","c"]\nrascal>intersperse(0, [1, 2, 3]);\nlist[int]: [1,0,2,0,3]\nrascal>intersperse(1, []);\nlist[int]: []\nrascal>intersperse([], [1]);\nlist[value]: [1]\n')),(0,n.kt)("h2",{id:"List-isEmpty"},"function isEmpty"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"bool isEmpty(list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-15"},"Synopsis"),(0,n.kt)("p",null,"Test whether a list is empty."),(0,n.kt)("h4",{id:"description-10"},"Description"),(0,n.kt)("p",null,"Returns ",(0,n.kt)("inlineCode",{parentName:"p"},"true")," when a list is empty and ",(0,n.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,n.kt)("h4",{id:"examples-13"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import List;\nok\nrascal>isEmpty([]);\nbool: true\nrascal>isEmpty([1, 2, 3]);\nbool: false\n")),(0,n.kt)("h2",{id:"List-last"},"function last"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"&T last([*&T _, &T l])")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"&T last(list[&T] _:[])"))),(0,n.kt)("h4",{id:"synopsis-16"},"Synopsis"),(0,n.kt)("p",null,"Return the last element of a list, if any."),(0,n.kt)("h4",{id:"description-11"},"Description"),(0,n.kt)("p",null,"Also see ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-tail"},"tail")," that returns a list of one or more of the last elements of a list."),(0,n.kt)("h4",{id:"examples-14"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>last([1]);\nint: 1\nrascal>last([3, 1, 4, 5]);\nint: 5\nrascal>last(["zebra", "elephant", "snake", "owl"]);\nstr: "owl"\nrascal>tail([3, 1, 4, 5]);\nlist[int]: [1,4,5]\n')),(0,n.kt)("h2",{id:"List-lastIndexOf"},"function lastIndexOf"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"int lastIndexOf(list[&T] lst, &T elt)"))),(0,n.kt)("h4",{id:"synopsis-17"},"Synopsis"),(0,n.kt)("p",null,"Return index of last occurrence of elt in lst, or -1 if elt is not found."),(0,n.kt)("h4",{id:"description-12"},"Description"),(0,n.kt)("p",null,"Also see ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-indexOf"},"index of"),"."),(0,n.kt)("h4",{id:"examples-15"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>lastIndexOf([3, 1, 4, 5, 4], 4);\nint: 4\nrascal>lastIndexOf([3, 1, 4, 5, 4], 7);\nint: -1\nrascal>lastIndexOf(["zebra", "owl", "elephant", "snake", "owl"], "owl");\nint: 4\n')),(0,n.kt)("h2",{id:"List-mapper"},"function mapper"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&U] mapper(list[&T] lst, &U (&T) fn)"))),(0,n.kt)("h4",{id:"synopsis-18"},"Synopsis"),(0,n.kt)("p",null,"Apply a function to all list elements and return list of results."),(0,n.kt)("h4",{id:"description-13"},"Description"),(0,n.kt)("p",null,"Apply a function ",(0,n.kt)("inlineCode",{parentName:"p"},"fn")," to each element of ",(0,n.kt)("inlineCode",{parentName:"p"},"lst")," and return the list of results."),(0,n.kt)("h4",{id:"examples-16"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import List;\nok\nrascal>int incr(int x) { return x + 1; }\nint (int): function(|prompt:///|(0,33,<1,0>,<1,33>))\nrascal>mapper([1, 2, 3, 4], incr);\nlist[int]: [2,3,4,5]\n")),(0,n.kt)("h2",{id:"List-max"},"function max"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"&T max([&T h, *&T t])")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"&T max(list[&T] _:[])"))),(0,n.kt)("h4",{id:"synopsis-19"},"Synopsis"),(0,n.kt)("p",null,"Determine the largest element in a list."),(0,n.kt)("h4",{id:"examples-17"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>max([1, 3, 5, 2, 4]);\nint: 5\nrascal>max(["zebra", "elephant", "snake", "owl"]);\nstr: "zebra"\n')),(0,n.kt)("h2",{id:"List-merge"},"function merge"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] merge(list[&T] left, list[&T] right)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] merge(list[&T] left, list[&T] right, bool (&T a, &T b) lessOrEqual)"))),(0,n.kt)("h4",{id:"synopsis-20"},"Synopsis"),(0,n.kt)("p",null,"Merge the elements of two sorted lists into one list."),(0,n.kt)("h4",{id:"description-14"},"Description"),(0,n.kt)("p",null,"Merge the elements of two sorted lists into one list using the built-in ordering between values.\nOptional, a comparison function ",(0,n.kt)("inlineCode",{parentName:"p"},"lessOrEqual")," may be given for a user-defined ordering between values."),(0,n.kt)("h4",{id:"examples-18"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>merge([1, 3, 5], [2, 7, 9, 15]);\nlist[int]: [1,2,3,5,7,9,15]\nrascal>merge(["ape", "elephant", "owl", "snale", "zebra"], ["apple", "berry", "orange", "pineapple"]);\nlist[str]: ["ape","apple","berry","elephant","orange","owl","pineapple","snale","zebra"]\n')),(0,n.kt)("p",null,"Merge two lists of strings and use their length as ordering:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>merge(["ape", "owl", "snale", "zebra", "elephant"], ["apple", "berry", "orange", "pineapple"], bool(str x, str y){ return size(x) <= size(y); });\nlist[str]: ["ape","owl","snale","zebra","apple","berry","orange","elephant","pineapple"]\n')),(0,n.kt)("h2",{id:"List-min"},"function min"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"&T min([&T h, *&T t])")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"&T min(list[&T] _: [])"))),(0,n.kt)("h4",{id:"synopsis-21"},"Synopsis"),(0,n.kt)("p",null,"Determine the smallest element in a list."),(0,n.kt)("h4",{id:"examples-19"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>min([1, 3, 5, 2, 4]);\nint: 1\nrascal>min(["zebra", "elephant", "snake", "owl"]);\nstr: "elephant"\n')),(0,n.kt)("h2",{id:"List-mix"},"function mix"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] mix(list[&T] l, list[&T] r)"))),(0,n.kt)("h4",{id:"synopsis-22"},"Synopsis"),(0,n.kt)("p",null,"Mix the elements of two lists."),(0,n.kt)("h4",{id:"description-15"},"Description"),(0,n.kt)("p",null,"Let n be the minimum of the length of the two lists ",(0,n.kt)("inlineCode",{parentName:"p"},"l")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"r"),".\n",(0,n.kt)("inlineCode",{parentName:"p"},"mix")," returns a list in which the first ",(0,n.kt)("inlineCode",{parentName:"p"},"n")," elements are taken alternately from the left and the right list,\nfollowed by the remaining elements of the longest list."),(0,n.kt)("h4",{id:"examples-20"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>mix([3, 1, 7, 5, 9], [15, 25, 35]);\nlist[int]: [3,15,1,25,7,35,5,9]\nrascal>mix([3, 1, 7], [15, 25, 35, 45, 55]);\nlist[int]: [3,15,1,25,7,35,45,55]\nrascal>mix([3, 1, 7], ["elephant", "snake"]);\nlist[value]: [3,"elephant",1,"snake",7]\n')),(0,n.kt)("h2",{id:"List-permutations"},"function permutations"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"set[list[&T]] permutations(list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-23"},"Synopsis"),(0,n.kt)("p",null,"Compute all permutations of a list."),(0,n.kt)("h4",{id:"examples-21"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import List;\nok\nrascal>permutations([1,2,3]);\nset[list[int]]: {\n  [3,2,1],\n  [1,2,3],\n  [2,1,3],\n  [1,3,2],\n  [2,3,1],\n  [3,1,2]\n}\n")),(0,n.kt)("h2",{id:"List-permutationsBag"},"function permutationsBag"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"set[list[&T]] permutationsBag(map[&T element, int occurs] b)"))),(0,n.kt)("h2",{id:"List-pop"},"function pop"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"tuple[&T, list[&T]] pop(list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-24"},"Synopsis"),(0,n.kt)("p",null,"Pop top element from list, return a tuple."),(0,n.kt)("h4",{id:"description-16"},"Description"),(0,n.kt)("p",null,"This function is identical to ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-headTail"},"head tail"),".\nAlso see ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-push"},"push")," and ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-top"},"top"),"."),(0,n.kt)("h4",{id:"examples-22"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>pop([3, 1, 4, 5]);\ntuple[int,list[int]]: <3,[1,4,5]>\nrascal>headTail([3, 1, 4, 5]);\ntuple[int,list[int]]: <3,[1,4,5]>\nrascal>pop(["zebra", "elephant", "snake", "owl"]);\ntuple[str,list[str]]: <"zebra",["elephant","snake","owl"]>\n')),(0,n.kt)("h2",{id:"List-prefix"},"function prefix"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] prefix(list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-25"},"Synopsis"),(0,n.kt)("p",null,"Return all but the last element of a list."),(0,n.kt)("h4",{id:"examples-23"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>prefix([3, 1, 4, 5]);\nlist[int]: [3,1,4]\nrascal>prefix([]);\nlist[void]: []\nrascal>prefix(["zebra", "elephant", "snake", "owl"]);\nlist[str]: ["zebra","elephant","snake"]\n')),(0,n.kt)("h2",{id:"List-push"},"function push"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] push(&T elem, list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-26"},"Synopsis"),(0,n.kt)("p",null,"Push an element in front of a list."),(0,n.kt)("h4",{id:"description-17"},"Description"),(0,n.kt)("p",null,"Also see ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-pop"},"pop")," and ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-top"},"top"),"."),(0,n.kt)("h4",{id:"examples-24"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>push(7, [3, 1, 4, 5]);\nlist[int]: [7,3,1,4,5]\nrascal>push("eagle", ["zebra", "elephant", "snake", "owl"]);\nlist[str]: ["eagle","zebra","elephant","snake","owl"]\n')),(0,n.kt)("h2",{id:"List-reducer"},"function reducer"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"&T reducer(list[&T] lst, &T (&T, &T) fn, &T unit)"))),(0,n.kt)("h4",{id:"synopsis-27"},"Synopsis"),(0,n.kt)("p",null,"Apply a function to successive elements of list and combine the results (",(0,n.kt)("strong",{parentName:"p"},"deprecated"),")."),(0,n.kt)("h4",{id:"description-18"},"Description"),(0,n.kt)("p",null,"Apply the function ",(0,n.kt)("inlineCode",{parentName:"p"},"fn")," to successive elements of list ",(0,n.kt)("inlineCode",{parentName:"p"},"lst")," starting with ",(0,n.kt)("inlineCode",{parentName:"p"},"unit"),"."),(0,n.kt)("h4",{id:"examples-25"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import List;\nok\nrascal>int add(int x, int y) { return x + y; }\nint (int, int): function(|prompt:///|(0,39,<1,0>,<1,39>))\nrascal>reducer([10, 20, 30, 40], add, 0); \nint: 100\n")),(0,n.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,n.kt)("p",null,"WARNING:\nThis function is ",(0,n.kt)("em",{parentName:"p"},"deprecated"),", use a ",(0,n.kt)("a",{parentName:"p",href:"../Rascal/Expressions/Reducer"},"reducer")," instead."),(0,n.kt)("h2",{id:"List-remove"},"function remove"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] remove(list[&T] lst, int indexToDelete)"))),(0,n.kt)("h2",{id:"List-removeFromBag"},"function removeFromBag"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"map[&T element, int occurs] removeFromBag(map[&T element, int occurs] b, &T el)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"map[&T element, int occurs] removeFromBag(map[&T element, int occurs] b, &T el, int nr)"))),(0,n.kt)("h2",{id:"List-reverse"},"function reverse"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] reverse(list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-28"},"Synopsis"),(0,n.kt)("p",null,"Reverse a list."),(0,n.kt)("h4",{id:"description-19"},"Description"),(0,n.kt)("p",null,"Returns a list with the elements of ",(0,n.kt)("inlineCode",{parentName:"p"},"lst")," in reverse order."),(0,n.kt)("h4",{id:"examples-26"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>reverse([1,4,2,3]);\nlist[int]: [3,2,4,1]\nrascal>reverse(["zebra", "elephant", "snake", "owl"]);\nlist[str]: ["owl","snake","elephant","zebra"]\n')),(0,n.kt)("h2",{id:"List-size"},"function size"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"int size(list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-29"},"Synopsis"),(0,n.kt)("p",null,"Determine the number of elements in a list."),(0,n.kt)("h4",{id:"examples-27"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>size([20, 10, 30]);\nint: 3\nrascal>size(["zebra", "elephant", "snake", "owl"]);\nint: 4\n')),(0,n.kt)("h2",{id:"List-slice"},"function slice"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] slice(list[&T] lst, int begin, int len)"))),(0,n.kt)("h4",{id:"synopsis-30"},"Synopsis"),(0,n.kt)("p",null,"Compute a sublist of a list."),(0,n.kt)("h4",{id:"description-20"},"Description"),(0,n.kt)("p",null,"Returns a sublist of ",(0,n.kt)("inlineCode",{parentName:"p"},"lst")," from index ",(0,n.kt)("inlineCode",{parentName:"p"},"start")," of length ",(0,n.kt)("inlineCode",{parentName:"p"},"len"),"."),(0,n.kt)("p",null,"NOTE: In most cases it is better to use the built-in ",(0,n.kt)("a",{parentName:"p",href:"../Rascal/Expressions/Values/List/Slice"},"slice")," notation,\nsee the example below."),(0,n.kt)("h4",{id:"examples-28"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>slice([10, 20, 30, 40, 50, 60], 2, 3);\nlist[int]: [30,40,50]\nrascal>slice(["zebra", "elephant", "snake", "owl"], 1, 2);\nlist[str]: ["elephant","snake"]\n')),(0,n.kt)("p",null,"Here are the equivalent expressions using the slice notation:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>[10, 20, 30, 40, 50, 60][2 .. 5];\nlist[int]: [30,40,50]\nrascal>["zebra", "elephant", "snake", "owl"][1 .. 3];\nlist[str]: ["elephant","snake"]\n')),(0,n.kt)("p",null,"WARNING: In the slice notation the upper bound is exclusive."),(0,n.kt)("h2",{id:"List-sort"},"function sort"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] sort(list[&T] lst)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] sort(list[&T] l, bool (&T a, &T b) less)"))),(0,n.kt)("h4",{id:"synopsis-31"},"Synopsis"),(0,n.kt)("p",null,"Sort the elements of a list."),(0,n.kt)("h4",{id:"description-21"},"Description"),(0,n.kt)("p",null,"Sort the elements of a list:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Use the built-in ordering on values to compare list elements."),(0,n.kt)("li",{parentName:"ul"},"Give an additional ",(0,n.kt)("inlineCode",{parentName:"li"},"lessThan")," function that will be used to compare elements.")),(0,n.kt)("h4",{id:"examples-29"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>import String;\nok\nrascal>sort([10, 4, -2, 11, 100, 5]);\nlist[int]: [-2,4,5,10,11,100]\nrascal>fruits = ["mango", "strawberry", "pear", "pineapple", "banana", "grape", "kiwi"];\nlist[str]: ["mango","strawberry","pear","pineapple","banana","grape","kiwi"]\nrascal>sort(fruits);\nlist[str]: ["banana","grape","kiwi","mango","pear","pineapple","strawberry"]\nrascal>sort(fruits, bool(str a, str b){ return size(a) > size(b); });\nlist[str]: ["strawberry","pineapple","banana","grape","mango","pear","kiwi"]\n')),(0,n.kt)("h2",{id:"List-isSorted"},"function isSorted"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"bool isSorted(list[&T] l, bool (&T a, &T b) less = bool (&T a, &T b) { return a < b; })"))),(0,n.kt)("h4",{id:"synopsis-32"},"Synopsis"),(0,n.kt)("p",null,"Check whether a list is sorted or not."),(0,n.kt)("h4",{id:"description-22"},"Description"),(0,n.kt)("p",null,'Checks whether or not a list is sorted by searching for any out-of-order elements.\nThe empty list is defined to be "sorted" and what sorted means is defined the\nhigher-order parameter "less" which should implement a partial-order relation\nbetween the two parameters.'),(0,n.kt)("h2",{id:"List-shuffle"},"function shuffle"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] shuffle(list[&T] l)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] shuffle(list[&T] l, int seed)"))),(0,n.kt)("h4",{id:"synopsis-33"},"Synopsis"),(0,n.kt)("p",null,"Shuffle a list."),(0,n.kt)("h4",{id:"description-23"},"Description"),(0,n.kt)("p",null,"Returns a random (unbiased) shuffled list."),(0,n.kt)("h4",{id:"examples-30"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>shuffle([1,4,2,3]);\nlist[int]: [4,1,2,3]\nrascal>shuffle(["zebra", "elephant", "snake", "owl"]);\nlist[str]: ["owl","zebra","elephant","snake"]\n')),(0,n.kt)("h2",{id:"List-split"},"function split"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"tuple[list[&T],list[&T]] split(list[&T] l)"))),(0,n.kt)("h4",{id:"synopsis-34"},"Synopsis"),(0,n.kt)("p",null,"Split a list into two halves."),(0,n.kt)("h4",{id:"examples-31"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>split([3, 1, 4, 5, 7]);\ntuple[list[int],list[int]]: <[3,1],[4,5,7]>\nrascal>split(["zebra", "elephant", "snake", "owl"]);\ntuple[list[str],list[str]]: <["zebra","elephant"],["snake","owl"]>\n')),(0,n.kt)("h2",{id:"List-sum"},"function sum"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"(&T <:num) sum([(&T <: num) hd, *(&T <: num) tl])")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"(&T <:num) sum(list[&T] _: [])"))),(0,n.kt)("h4",{id:"synopsis-35"},"Synopsis"),(0,n.kt)("p",null,"Sum the elements of a list."),(0,n.kt)("h4",{id:"examples-32"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import List;\nok\nrascal>sum([3, 1, 4, 5]);\nint: 13\nrascal>sum([3, 1.5, 4, 5]);\nnum: 13.5\n")),(0,n.kt)("h2",{id:"List-tail"},"function tail"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] tail([&T _, *&T t])")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] tail(list[&T] _:[])")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] tail(list[&T] lst, int len) throws IndexOutOfBounds"))),(0,n.kt)("h4",{id:"synopsis-36"},"Synopsis"),(0,n.kt)("p",null,"Get the tail element(s) from a list."),(0,n.kt)("h4",{id:"description-24"},"Description"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Return a list consisting of all but the first element of ",(0,n.kt)("inlineCode",{parentName:"li"},"lst"),"."),(0,n.kt)("li",{parentName:"ul"},"Return a list consisting of the last ",(0,n.kt)("inlineCode",{parentName:"li"},"n")," elements of ",(0,n.kt)("inlineCode",{parentName:"li"},"lst"),".")),(0,n.kt)("h4",{id:"examples-33"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"")),(0,n.kt)("p",null,"All but first element:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import List;\nok\nrascal>tail([10,20,30]);\nlist[int]: [20,30]\n")),(0,n.kt)("p",null,"Try an error case:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>tail([]);\n|std:///List.rsc|(18315,9,<841,44>,<841,53>): EmptyList()\n    at tail(|std:///List.rsc|(18271,58,<841,0>,<841,58>))\n    at $shell$(|prompt:///|(0,9,<1,0>,<1,9>))\nok\n")),(0,n.kt)("p",null,"Last n elements:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>tail([10, 20, 30, 40, 50, 60], 3);\nlist[int]: [40,50,60]\n")),(0,n.kt)("p",null,"Try an error case:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>tail([10, 20, 30, 40, 50, 60], 10);\n|std:///List.rsc|(18332,115,<843,0>,<844,73>): IndexOutOfBounds(4)\n    at *** somewhere ***(|std:///List.rsc|(18332,115,<843,0>,<844,73>))\n    at tail(|prompt:///|(31,2,<1,31>,<1,33>))\nok\n")),(0,n.kt)("h2",{id:"List-take"},"function take"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] take(int n, list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-37"},"Synopsis"),(0,n.kt)("p",null,"Get number of elements from the head of a list."),(0,n.kt)("h4",{id:"description-25"},"Description"),(0,n.kt)("p",null,"Get ",(0,n.kt)("inlineCode",{parentName:"p"},"n")," elements (or ",(0,n.kt)("inlineCode",{parentName:"p"},"size(lst)")," elements if ",(0,n.kt)("inlineCode",{parentName:"p"},"size(lst) < n"),") from the head of the list.\nSee ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-drop"},"drop")," to remove elements from the head of a list."),(0,n.kt)("h4",{id:"examples-34"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>take(2, [3, 1, 4, 5]);\nlist[int]: [3,1]\nrascal>take(6, [3, 1, 4, 5]);\nlist[int]: [3,1,4,5]\nrascal>take(2, ["zebra", "elephant", "snake", "owl"]);\nlist[str]: ["zebra","elephant"]\n')),(0,n.kt)("h2",{id:"List-takeOneFrom"},"function takeOneFrom"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"tuple[&T, list[&T]] takeOneFrom(list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-38"},"Synopsis"),(0,n.kt)("p",null,"Remove an arbitrary element from a list, returns the element and the modified list."),(0,n.kt)("h4",{id:"description-26"},"Description"),(0,n.kt)("p",null,"Select an arbitrary element from ",(0,n.kt)("inlineCode",{parentName:"p"},"lst"),", and return a tuple consisting of:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the selected element, and "),(0,n.kt)("li",{parentName:"ul"},"a new list consisting of all elements of ",(0,n.kt)("inlineCode",{parentName:"li"},"lst")," except the selected element.")),(0,n.kt)("p",null,"See ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-getOneFrom"},"get one from")," to only selected an element from a list."),(0,n.kt)("h4",{id:"examples-35"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>takeOneFrom([10,20,30,40,50]);\ntuple[int,list[int]]: <50,[10,20,30,40]>\nrascal>takeOneFrom([10,20,30,40,50]);\ntuple[int,list[int]]: <10,[20,30,40,50]>\nrascal>takeOneFrom([10,20,30,40,50]);\ntuple[int,list[int]]: <50,[10,20,30,40]>\nrascal>takeOneFrom(["zebra", "elephant", "snake", "owl"]);\ntuple[str,list[str]]: <"zebra",["elephant","snake","owl"]>\nrascal>takeOneFrom(["zebra", "elephant", "snake", "owl"]);\ntuple[str,list[str]]: <"zebra",["elephant","snake","owl"]>\nrascal>takeOneFrom(["zebra", "elephant", "snake", "owl"]);\ntuple[str,list[str]]: <"owl",["zebra","elephant","snake"]>\n')),(0,n.kt)("h2",{id:"List-takeWhile"},"function takeWhile"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[&T] takeWhile(list[&T] lst, bool (&T a) take)"))),(0,n.kt)("h4",{id:"synopsis-39"},"Synopsis"),(0,n.kt)("p",null,"Take elements from the front of the list as long as a predicate is true."),(0,n.kt)("h4",{id:"examples-36"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import List;\nok\nrascal>bool isEven(int a) = a mod 2 == 0;\nbool (int): function(|prompt:///|(0,34,<1,0>,<1,34>))\nrascal>takeWhile([2,4,6,8,1,2,3,4,5],isEven);\nlist[int]: [2,4,6,8]\n")),(0,n.kt)("h2",{id:"List-toMap"},"function toMap"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"map[&A,list[&B]] toMap(list[tuple[&A, &B]] lst) throws MultipleKey"))),(0,n.kt)("h4",{id:"synopsis-40"},"Synopsis"),(0,n.kt)("p",null,"Convert a list of pairs to a map; first elements are associated with a set of second elements."),(0,n.kt)("h4",{id:"description-27"},"Description"),(0,n.kt)("p",null,"Convert a list of tuples to a map in which the first element of each tuple is\nassociated with the set of second elements from all tuples with the same first element. Keys should be unique."),(0,n.kt)("h4",{id:"examples-37"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import List;\nok\nrascal>toMap([<1,10>, <1, 11>, <2, 20>, <3, 30>, <3, 31>]);\nmap[int, list[int]]: (\n  1:[10,11],\n  3:[30,31],\n  2:[20]\n)\n")),(0,n.kt)("h4",{id:"pitfalls-1"},"Pitfalls"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"toMap")," collects all values in tuples with the same first value in a set.\nContrast this with ",(0,n.kt)("inlineCode",{parentName:"p"},"toMapUnique")," that associates each first tuple value with the second tuple value,\nbut imposes the constraint that those keys are unique."),(0,n.kt)("h2",{id:"List-toMapUnique"},"function toMapUnique"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"map[&A,&B] toMapUnique(list[tuple[&A, &B]] lst) throws MultipleKey"))),(0,n.kt)("h4",{id:"synopsis-41"},"Synopsis"),(0,n.kt)("p",null,"Convert a list of tuples to a map; result must be a map."),(0,n.kt)("h4",{id:"description-28"},"Description"),(0,n.kt)("p",null,"Convert a list of tuples to a map; result must be a map."),(0,n.kt)("h4",{id:"examples-38"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import List;\nok\nrascal>toMapUnique([<1,10>, <2, 20>, <3, 30>]);\nmap[int, int]: (1:10,3:30,2:20)\n")),(0,n.kt)("p",null,"Let's explore an error case:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>toMapUnique([<1,10>, <1, 11>, <2, 20>, <3, 30>]);\n|std:///List.rsc|(20860,663,<941,0>,<966,79>): MultipleKey(1,10,11)\n    at *** somewhere ***(|std:///List.rsc|(20860,663,<941,0>,<966,79>))\n    at toMapUnique(|prompt:///|(43,2,<1,43>,<1,45>))\nok\n")),(0,n.kt)("h4",{id:"pitfalls-2"},"Pitfalls"),(0,n.kt)("p",null,"The keys in a map are unique by definition.\n",(0,n.kt)("inlineCode",{parentName:"p"},"toMapUnique")," throws a ",(0,n.kt)("inlineCode",{parentName:"p"},"MultipleKey")," exception when the list contains more than one tuple with the same first value."),(0,n.kt)("h2",{id:"List-top"},"function top"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"&T top([&T t, *&T _])"))),(0,n.kt)("h4",{id:"synopsis-42"},"Synopsis"),(0,n.kt)("p",null,"Take the top element of a list."),(0,n.kt)("h4",{id:"description-29"},"Description"),(0,n.kt)("p",null,"This function is identical to ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-head"},"head"),".\nAlso see ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-pop"},"pop")," and ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-push"},"push"),"."),(0,n.kt)("h4",{id:"examples-39"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>top([3, 1, 4, 5]);\nint: 3\nrascal>top(["zebra", "elephant", "snake", "owl"]);\nstr: "zebra"\n')),(0,n.kt)("h2",{id:"List-toRel"},"function toRel"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"rel[&T,&T] toRel(list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-43"},"Synopsis"),(0,n.kt)("p",null,"Convert a list to a relation."),(0,n.kt)("h4",{id:"description-30"},"Description"),(0,n.kt)("p",null,"  Convert a list to relation, where each tuple encodes which elements are followed by each other.\nThis function will return an empty relation for empty lists and for singleton lists."),(0,n.kt)("h4",{id:"examples-40"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>toRel([3, 1, 4, 5]);\nrel[int,int]: {\n  <1,4>,\n  <3,1>,\n  <4,5>\n}\nrascal>toRel(["zebra", "elephant", "snake", "owl"]);\nrel[str,str]: {\n  <"snake","owl">,\n  <"zebra","elephant">,\n  <"elephant","snake">\n}\n')),(0,n.kt)("h2",{id:"List-toSet"},"function toSet"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"set[&T] toSet(list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-44"},"Synopsis"),(0,n.kt)("p",null,"Convert a list to a set."),(0,n.kt)("h4",{id:"description-31"},"Description"),(0,n.kt)("p",null,"Convert ",(0,n.kt)("inlineCode",{parentName:"p"},"lst")," to a set."),(0,n.kt)("h4",{id:"examples-41"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>toSet([10, 20, 30, 40]);\nset[int]: {10,40,20,30}\nrascal>toSet(["zebra", "elephant", "snake", "owl"]);\nset[str]: {"snake","owl","zebra","elephant"}\n')),(0,n.kt)("p",null,"Note that the same can be done using splicing"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>l = [10,20,30,40];\nlist[int]: [10,20,30,40]\nrascal>s = {*l};\nset[int]: {10,40,20,30}\n")),(0,n.kt)("h2",{id:"List-toString"},"function toString"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str toString(list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-45"},"Synopsis"),(0,n.kt)("p",null,"Convert a list to a string."),(0,n.kt)("h4",{id:"description-32"},"Description"),(0,n.kt)("p",null,"Convert ",(0,n.kt)("inlineCode",{parentName:"p"},"lst")," to a string."),(0,n.kt)("h4",{id:"examples-42"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>toString([10, 20, 30]);\nstr: "[10,20,30]"\nrascal>toString(["zebra", "elephant", "snake", "owl"]);\nstr: "[\\"zebra\\",\\"elephant\\",\\"snake\\",\\"owl\\"]"\n')),(0,n.kt)("h2",{id:"List-itoString"},"function itoString"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str itoString(list[&T] lst)"))),(0,n.kt)("h4",{id:"synopsis-46"},"Synopsis"),(0,n.kt)("p",null,"Convert a list to an indented string."),(0,n.kt)("h4",{id:"description-33"},"Description"),(0,n.kt)("p",null,"Convert ",(0,n.kt)("inlineCode",{parentName:"p"},"lst")," to a indented string."),(0,n.kt)("h4",{id:"examples-43"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>itoString([10, 20, 30]);\nstr: "[10,20,30]"\nrascal>itoString(["zebra", "elephant", "snake", "owl"]);\nstr: "[\\"zebra\\",\\"elephant\\",\\"snake\\",\\"owl\\"]"\n')),(0,n.kt)("h2",{id:"List-unzip2"},"function unzip2"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"tuple[list[&T],list[&U]] unzip2(list[tuple[&T,&U]] lst)"))),(0,n.kt)("h4",{id:"synopsis-47"},"Synopsis"),(0,n.kt)("p",null,"Make a pair (triple) of lists from a list of pairs (triples)."),(0,n.kt)("h4",{id:"description-34"},"Description"),(0,n.kt)("p",null,"Also see ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-unzip3"},"unzip3"),";"),(0,n.kt)("h4",{id:"examples-44"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>unzip2([<3,"thirty">, <1,"ten">, <4,"forty">]);\ntuple[list[int],list[str]]: <[3,1,4],["thirty","ten","forty"]>\nrascal>unzip3([<3,"thirty",300>, <1,"ten",100>, <4,"forty",400>]);\ntuple[list[int],list[str],list[int]]: <[3,1,4],["thirty","ten","forty"],[300,100,400]>\n')),(0,n.kt)("h2",{id:"List-unzip3"},"function unzip3"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"tuple[list[&T],list[&U],list[&V]] unzip3(list[tuple[&T,&U,&V]] lst)"))),(0,n.kt)("h2",{id:"List-upTill"},"function upTill"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[int] upTill(int n)"))),(0,n.kt)("h4",{id:"synopsis-48"},"Synopsis"),(0,n.kt)("p",null,"Returns the list 0,1..n-1."),(0,n.kt)("h4",{id:"description-35"},"Description"),(0,n.kt)("p",null,"Returns the list ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),", .., ",(0,n.kt)("inlineCode",{parentName:"p"},"n-1"),", this is slightly faster than ",(0,n.kt)("inlineCode",{parentName:"p"},"[0..n]"),", since the returned values are shared."),(0,n.kt)("h4",{id:"examples-45"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import List;\nok\nrascal>upTill(10);\nlist[int]: [0,1,2,3,4,5,6,7,8,9]\n")),(0,n.kt)("h2",{id:"List-zip2"},"function zip2"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[tuple[&T first, &U second]] zip2(list[&T] a, list[&U] b)"))),(0,n.kt)("h4",{id:"synopsis-49"},"Synopsis"),(0,n.kt)("p",null,"Make a list of pairs from two (three) lists of the same length."),(0,n.kt)("h4",{id:"description-36"},"Description"),(0,n.kt)("p",null,"Also see ",(0,n.kt)("a",{parentName:"p",href:"/docs/Library/List#List-unzip3"},"unzip3"),"."),(0,n.kt)("h4",{id:"examples-46"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import List;\nok\nrascal>zip2([3, 1, 4], ["thirty", "ten", "forty"]);\nlrel[int first,str second]: [\n  <3,"thirty">,\n  <1,"ten">,\n  <4,"forty">\n]\nrascal>zip3([3, 1, 4], ["thirty", "ten", "forty"], [300, 100, 400]);\nlrel[int first,str second,int third]: [\n  <3,"thirty",300>,\n  <1,"ten",100>,\n  <4,"forty",400>\n]\n')),(0,n.kt)("h2",{id:"List-zip3"},"function zip3"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"list[tuple[&T first, &U second, &V third]] zip3(list[&T] a, list[&U] b, list[&V] c)"))))}m.isMDXComponent=!0}}]);