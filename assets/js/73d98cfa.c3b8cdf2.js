"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[33774],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,b=d["".concat(l,".").concat(m)]||d[m]||p[m]||s;return n?a.createElement(b,o(o({ref:t},u),{},{components:n})):a.createElement(b,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},49810:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=n(83117),r=(n(67294),n(3905));const s={title:"Assembly"},o=void 0,i={unversionedId:"Recipes/Languages/Pico/Assembly/index",id:"Recipes/Languages/Pico/Assembly/index",title:"Assembly",description:"Synopsis",source:"@site/docs/Recipes/Languages/Pico/Assembly/index.md",sourceDirName:"Recipes/Languages/Pico/Assembly",slug:"/Recipes/Languages/Pico/Assembly/",permalink:"/docs/Recipes/Languages/Pico/Assembly/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Recipes/Languages/Pico/Assembly/index.md",tags:[],version:"current",frontMatter:{title:"Assembly"},sidebar:"tutorialSidebar",previous:{title:"Abstract",permalink:"/docs/Recipes/Languages/Pico/Abstract/"},next:{title:"Compile",permalink:"/docs/Recipes/Languages/Pico/Compile/"}},l={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Usage",id:"usage",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Assembly language for Pico."),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("h4",{id:"types"},"Types"),(0,r.kt)("h4",{id:"function"},"Function"),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/docs/Recipes/Languages/Pico/Compile"},"Compile"),"r will translate Pico programs into the following assembly language."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"// tag::module[]\nmodule demo::lang::Pico::Assembly\n\nimport demo::lang::Pico::Abstract;\n\npublic data Instr =\n       dclNat(PicoId Id)    // Reserve a memory location for a natural variable\n     | dclStr(PicoId Id)    // Reserve a memory location for a string variable\n     | pushNat(int intCon)  // Push integer constant on the stack\n     | pushStr(str strCon)  // Push string constant on the stack\n     | rvalue(PicoId Id)    // Push the value of a variable on the stack\n     | lvalue(PicoId Id)    // Push the address of a variable on the stack\n     | assign()             // Assign value on top, to variable at address top-1\n     | add2()               // Replace top two stack values by their sum\n     | sub2()               // Replace top two stack values by their difference\n     | conc2()              // Replace top two stack values by their concatenation\n     | label(str label)     // Associate a label with the next instruction\n     | go(str  label)       // Go to instruction with given label\n     | gotrue(str label)    // Go to instruction with given label, if top equals 0\n     | gofalse(str label)   // Go to instruction with given label, if top not equal to 0\n     ;\n// tag::module[]     \n\n")),(0,r.kt)("h4",{id:"benefits"},"Benefits"))}p.isMDXComponent=!0}}]);