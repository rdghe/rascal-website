"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[98317],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(h,l(l({ref:t},c),{},{components:n})):r.createElement(h,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5437:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={title:"Working on the Interpreter"},l=void 0,o={unversionedId:"Developers/Interpreter/index",id:"Developers/Interpreter/index",title:"Working on the Interpreter",description:"Synopsis",source:"@site/docs/Developers/Interpreter/index.md",sourceDirName:"Developers/Interpreter",slug:"/Developers/Interpreter/",permalink:"/docs/Developers/Interpreter/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Developers/Interpreter/index.md",tags:[],version:"current",frontMatter:{title:"Working on the Interpreter"},sidebar:"tutorialSidebar",previous:{title:"Working on the Tutor Compiler",permalink:"/docs/Developers/TutorCompiler/"},next:{title:"Tutor",permalink:"/docs/Tutor/"}},s={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Things to know when working on the interpreter"),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The Rascal interpreter resides here: ",(0,a.kt)("a",{parentName:"li",href:"http://github.com/usethesource/rascal"},"http://github.com/usethesource/rascal")),(0,a.kt)("li",{parentName:"ul"},"The main design patterns used are:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The big encapsulator class is ",(0,a.kt)("inlineCode",{parentName:"li"},"Evaluator"),", it wraps all of the following."),(0,a.kt)("li",{parentName:"ul"},"Parser generation - the Rascal parser is bootstrapped in Rascal"),(0,a.kt)("li",{parentName:"ul"},"AST generation - the AST Java classes for Rascal are generated from the grammar",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"in ",(0,a.kt)("inlineCode",{parentName:"li"},"org.rascalmpl.ast"),' we find the generated classes that use the "Generation Gap" pattern'),(0,a.kt)("li",{parentName:"ul"},"in ",(0,a.kt)("inlineCode",{parentName:"li"},"org.rascalmpl.semantics.dynamic"),' we find all the hand-written sub-classes of the generated AST classes that hold the "interpreter" methods (see below) that give semantics to the AST nodes.'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ASTBuilder")," uses reflection to build an AST instance from a ",(0,a.kt)("a",{parentName:"li",href:"/docs/Library/ParseTree"},"parse tree")," instance. If a corresponding class exists in ",(0,a.kt)("inlineCode",{parentName:"li"},"semantics.dynamic")," then we instantiate it, otherwise we instantiate a clean AST node."))),(0,a.kt)("li",{parentName:"ul"},"Concrete syntax is implemented using simple reflection on the grammar that is in scope, then generating a parser and parsing all the fragments in it. Parsed fragments are mapped to Patterns or Expressions to get semantics."),(0,a.kt)("li",{parentName:"ul"},'The "Interpreter" pattern is used for:',(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"type and name analysis ",(0,a.kt)("inlineCode",{parentName:"li"},"getType()")),(0,a.kt)("li",{parentName:"ul"},"interpretation ",(0,a.kt)("inlineCode",{parentName:"li"},"interpret()")),(0,a.kt)("li",{parentName:"ul"},"pattern matching generation ",(0,a.kt)("inlineCode",{parentName:"li"},"buildMatcher()")))),(0,a.kt)("li",{parentName:"ul"},"State is modelled via the ",(0,a.kt)("inlineCode",{parentName:"li"},"Environment")," class",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ModuleEnvironment")," is an extension which can store more kinds of declarations"),(0,a.kt)("li",{parentName:"ul"},"Closures capture ",(0,a.kt)("inlineCode",{parentName:"li"},"Environment")," instances."),(0,a.kt)("li",{parentName:"ul"},"the heap is a map from module names to ",(0,a.kt)("inlineCode",{parentName:"li"},"ModuleEnvironment")," instances"))),(0,a.kt)("li",{parentName:"ul"},"Concrete/Abstract interpretation:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"every computation on values is done once on the actual value and once on a type abstraction of that value"),(0,a.kt)("li",{parentName:"ul"},"the abstract interpreter ",(0,a.kt)("em",{parentName:"li"},"simulates")," a static type system"),(0,a.kt)("li",{parentName:"ul"},"sometimes dispatch is done based on the static type of a value"),(0,a.kt)("li",{parentName:"ul"},"sometimes dispatch is done based on the dynamic type of a value"),(0,a.kt)("li",{parentName:"ul"},"the ",(0,a.kt)("inlineCode",{parentName:"li"},"Result"),' class hierarchy uses "Double Dispatch" to select the right type based on the left-hand side and right-hand side of operators. For every kind of data value there is a corresponding ',(0,a.kt)("inlineCode",{parentName:"li"},"Result")," class, e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"ListResult")," for lists and ",(0,a.kt)("inlineCode",{parentName:"li"},"RascalFunction")," for functions."))),(0,a.kt)("li",{parentName:"ul"},"Pattern Matching",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"For every kind of pattern there is a corresponding ",(0,a.kt)("inlineCode",{parentName:"li"},"Matcher")," class"),(0,a.kt)("li",{parentName:"ul"},"Every matcher binds variables in its own local ",(0,a.kt)("inlineCode",{parentName:"li"},"Environment")))),(0,a.kt)("li",{parentName:"ul"},"Structured Programming",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"jumps are implemented using exceptions"),(0,a.kt)("li",{parentName:"ul"},"backtracking is implemented with local loops"))))),(0,a.kt)("li",{parentName:"ul"},"The interpreter is tested with a big collection of regression/unit tests in ",(0,a.kt)("inlineCode",{parentName:"li"},"lang::rascal::tests")),(0,a.kt)("li",{parentName:"ul"},"A single ",(0,a.kt)("inlineCode",{parentName:"li"},"Evaluator")," is independent of other Evaluator instances provided it does not share ",(0,a.kt)("inlineCode",{parentName:"li"},"Environment"),"s."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Evaluator")," is ",(0,a.kt)("em",{parentName:"li"},"not")," thread-safe. It is thread-friendly in the sense that one Evaluator can run in its own Thread without hampering other Evaluators.")))}m.isMDXComponent=!0}}]);