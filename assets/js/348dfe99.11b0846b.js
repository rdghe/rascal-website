"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[19994],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(f,l(l({ref:t},c),{},{components:n})):a.createElement(f,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},50218:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={title:"module lang::oil::Main"},l=void 0,o={unversionedId:"Library/lang/oil/Main",id:"Library/lang/oil/Main",title:"module lang::oil::Main",description:"Usage",source:"@site/docs/Library/lang/oil/Main.md",sourceDirName:"Library/lang/oil",slug:"/Library/lang/oil/Main",permalink:"/docs/Library/lang/oil/Main",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Library/lang/oil/Main.md",tags:[],version:"current",frontMatter:{title:"module lang::oil::Main"},sidebar:"tutorialSidebar",previous:{title:"lang::oil",permalink:"/docs/Library/lang/oil/"},next:{title:"lang::pico",permalink:"/docs/Library/lang/pico/"}},s={},p=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Benefits",id:"benefits",level:4},{value:"Pitfalls",id:"pitfalls",level:4},{value:"data Exp",id:"lang-oil-Main-Exp",level:2},{value:"function interpret",id:"lang-oil-Main-interpret",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Description",id:"description-1",level:4}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"import lang::oil::Main;")),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Object Instantiation Language (OIL) for building Java objects at run-time."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"The OIL language is an abstract language which can be considered\na small sub-set of the Java language. It allows one to build objects\nusing fully qualified class names (which should be on the run-time\nclasspath somehow). "),(0,r.kt)("p",null,"A call to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/Library/lang/oil/Main#lang::oil::Main-interpret"},"interpret")," function will load an OIL expression and\ngenerate the object in memory and then call the toString() method\non it, returning the resulting string."),(0,r.kt)("p",null,"OIL works best in combination with writing one or two ",(0,r.kt)("inlineCode",{parentName:"p"},"java")," functions\nfor example to be able to influence the classpath and or to further process\nthe constructed object (if necessary). In this case we call the interpret\nfunction directly from Java. The ",(0,r.kt)("a",{parentName:"p",href:"/docs/Library/lang/oil/Main#lang::oil::Main-interpret"},"interpret")," function is used to debug\nan OIL expression and eventually we use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/Library/lang/oil/Main#lang::oil::Main-interpret"},"interpret")," method directly\nfrom Java."),(0,r.kt)("h4",{id:"benefits"},"Benefits"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"OIL is made to avoid having to write Java when reusing a Java library.")),(0,r.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The OIL language is experimental and not used much. It is unfinished and there may be bugs.")),(0,r.kt)("h2",{id:"lang-oil-Main-Exp"},"data Exp"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"data Exp  \n     = \\new(str class, list[Exp] arguments, list[Exp] calls)\n     | \\atom(int i)\n     | \\atom(str s)\n     | \\atom(bool b)\n     | \\call(str class, str method, list[Exp] arguments, list[Exp] calls)\n     | \\let(str key, Exp val)\n     | \\use(str key, Exp val)\n     | \\with(str prefix, Exp exp)\n     | \\access(str class, str field)\n     ;\n")),(0,r.kt)("h2",{id:"lang-oil-Main-interpret"},"function interpret"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str interpret(list[Exp] e)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str interpret(Exp e)"))),(0,r.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,r.kt)("p",null,"convert an OIL expression to a Java object"),(0,r.kt)("h4",{id:"description-1"},"Description"),(0,r.kt)("p",null,"Uses the Java reflection API and the current classpath to produce\na Java object, interpreting the expressions, and then calls the\n",(0,r.kt)("inlineCode",{parentName:"p"},"toString()")," method and returns the resulting string."),(0,r.kt)("p",null,"These are the instructions of OIL:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"let")," binds an object to a variable to be used later. This is useful\nnot only to factor out common expressions, but also to implement sharing;")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"access")," retrieves a field from an object, discarding the receiver object and keeping\nthe objects referred to by the field name;")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"atom")," builds on of Java's builtin data-types")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"use")," dereferences an object which was bound earlier by a ",(0,r.kt)("inlineCode",{parentName:"p"},"let"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"new")," calls the constructor of a class with the provided argument list. The ",(0,r.kt)("inlineCode",{parentName:"p"},"methods")," argument is ignored for now.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"call")," calls a method on the receiving object and returns the result. (this seems to be broken).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"with")," is unimplemented, intented to avoid having to fully qualify class names all the time."))))}u.isMDXComponent=!0}}]);