"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[4689],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(f,l(l({ref:t},c),{},{components:n})):a.createElement(f,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},12662:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const i={title:"Parse Trees"},l=void 0,o={unversionedId:"Rascal/Declarations/SyntaxDefinition/ParseTrees/index",id:"Rascal/Declarations/SyntaxDefinition/ParseTrees/index",title:"Parse Trees",description:"Synopsis",source:"@site/docs/Rascal/Declarations/SyntaxDefinition/ParseTrees/index.md",sourceDirName:"Rascal/Declarations/SyntaxDefinition/ParseTrees",slug:"/Rascal/Declarations/SyntaxDefinition/ParseTrees/",permalink:"/docs/Rascal/Declarations/SyntaxDefinition/ParseTrees/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascal/Declarations/SyntaxDefinition/ParseTrees/index.md",tags:[],version:"current",frontMatter:{title:"Parse Trees"},sidebar:"tutorialSidebar",previous:{title:"Reserve Declaration",permalink:"/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation/Reserve/"},next:{title:"Symbol",permalink:"/docs/Rascal/Declarations/SyntaxDefinition/Symbol/"}},s={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"An algebraic data-type for parse trees; produced by all parsers generated from syntax definitions."),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("h4",{id:"types"},"Types"),(0,r.kt)("h4",{id:"function"},"Function"),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"Below is the full definition of ",(0,r.kt)("inlineCode",{parentName:"p"},"Tree")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Production")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Symbol"),". A parse tree is a nested tree structure of type ",(0,r.kt)("inlineCode",{parentName:"p"},"Tree"),". "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Most internal nodes are applications (",(0,r.kt)("inlineCode",{parentName:"p"},"appl"),") of a ",(0,r.kt)("inlineCode",{parentName:"p"},"Production")," to a list of children ",(0,r.kt)("inlineCode",{parentName:"p"},"Tree")," nodes. ",(0,r.kt)("inlineCode",{parentName:"p"},"Production")," is the abstract representation of a ","[SyntaxDefinition]"," rule, which consists of a definition of an alternative for a ",(0,r.kt)("inlineCode",{parentName:"p"},"Symbol")," by a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"Symbols"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The leaves of a parse tree are always\ncharacters (",(0,r.kt)("inlineCode",{parentName:"p"},"char"),"), which have an integer index in the UTF8 table. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Some internal nodes encode ambiguity (",(0,r.kt)("inlineCode",{parentName:"p"},"amb"),") by pointing to a set of\nalternative ",(0,r.kt)("inlineCode",{parentName:"p"},"Tree")," nodes."))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Production")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Symbol")," types are an abstract notation for rules in ",(0,r.kt)("a",{parentName:"p",href:"/docs/Rascal/Declarations/SyntaxDefinition"},"Syntax Definition"),"s, while the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tree")," type is the actual notation\nfor parse trees. "),(0,r.kt)("p",null,"Parse trees are called parse forests when they contain ",(0,r.kt)("inlineCode",{parentName:"p"},"amb")," nodes."),(0,r.kt)("p",null,"You can analyze and manipulate parse trees in three ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Directly on the ",(0,r.kt)("inlineCode",{parentName:"li"},"Tree")," level, just like any other ",(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Declarations/AlgebraicDataType"},"Algebraic Data Type")),(0,r.kt)("li",{parentName:"ul"},"Using ",(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Expressions/ConcreteSyntax"},"./Concrete Syntax")),(0,r.kt)("li",{parentName:"ul"},"Using ",(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Declarations/SyntaxDefinition/Action"},"Action"),"s")),(0,r.kt)("p",null,"The type of a parse tree is the symbol that it's production produces, i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},'appl(prod(sort("A"),[],{}),[])')," has type ",(0,r.kt)("inlineCode",{parentName:"p"},"A"),". Ambiguity nodes\nEach such a non-terminal type has ",(0,r.kt)("inlineCode",{parentName:"p"},"Tree")," as its immediate super-type."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'// the following definition\nsyntax A = "a";\n// would make the following [Test] succeed:\ntest a() = parse(#A,"a") ==  \nappl(prod(\n    sort("A"), \n    [lit("a")], \n    {}),\n  [appl(\n      prod(\n        lit("a"),\n        [\\char-class([range(97,97)])],\n        {}),\n      [char(97)])]);\n// you see that the defined non-terminal A ends up as the production for the outermost node. As the only child is the tree for recognizing the literal a, which is defined to be a single a from the character-class [ a ].\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'// when we use labels in the definitions, they also end up in the trees:\n// the following definition\nlexical A = myA:"a" B bLabel;\nlexical B = myB:"b";\n// would make the following [Test] succeed:\ntest a() = parse(#A,"ab") == appl(prod(label("myA",lex("A")),[lit("a"),sort("bLabel",lex("B"))],{}),[appl(prod(lit("a"),[\\char-class([range(97,97)]),[char(97)]),appl(prod(label("myB", lex("B"),[lit("b")],{}),[appl(prod(lit("b"),[\\char-class([range(98,98)]),[char(98)])]) ]);\n// here you see that the alternative name is a label around the first argument of `prod` while argument labels become labels in the list of children of a `prod`.\n')),(0,r.kt)("h4",{id:"benefits"},"Benefits"))}d.isMDXComponent=!0}}]);