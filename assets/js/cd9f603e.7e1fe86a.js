"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[89726],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(n),m=s,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(f,r(r({ref:t},p),{},{components:n})):a.createElement(f,r({ref:t},p))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,r=new Array(i);r[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:s,r[1]=o;for(var l=2;l<i;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},43966:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(87462),s=(n(67294),n(3905));const i={title:"UseDef"},r=void 0,o={unversionedId:"Recipes/Languages/Pico/UseDef/index",id:"Recipes/Languages/Pico/UseDef/index",title:"UseDef",description:"Synopsis",source:"@site/docs/Recipes/Languages/Pico/UseDef/index.md",sourceDirName:"Recipes/Languages/Pico/UseDef",slug:"/Recipes/Languages/Pico/UseDef/",permalink:"/docs/Recipes/Languages/Pico/UseDef/",draft:!1,tags:[],version:"current",frontMatter:{title:"UseDef"},sidebar:"tutorialSidebar",previous:{title:"Uninit",permalink:"/docs/Recipes/Languages/Pico/Uninit/"},next:{title:"Metrics",permalink:"/docs/Recipes/Metrics/"}},c={},l=[{value:"Synopsis",id:"synopsis",level:4},{value:"Examples",id:"examples",level:4}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h4",{id:"synopsis"},"Synopsis"),(0,s.kt)("p",null,"Compute use-def information for the variables in a Pico program."),(0,s.kt)("h4",{id:"examples"},"Examples"),(0,s.kt)("p",null,"The ",(0,s.kt)("em",{parentName:"p"},"definitions")," of a variable are the source code locations where a variable gets a value.\nThe ",(0,s.kt)("em",{parentName:"p"},"uses")," of a variable are the location where the value of that variable is used.\nBoth concepts are relevant for program analysis and are defined here."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rascal"},"module demo::lang::Pico::UseDef\n\nimport demo::lang::Pico::Abstract;\n\nset[Occurrence] usesExp(EXP e, STATEMENT s) =       \u2776  \n  u:id(PicoId Id1) := e ? {< u.src, Id1, s>}\n                        : {< u.src, Id2, s> | /u:id(PicoId Id2) <- e };\n     \nset[Occurrence] usesStat(s:asgStat(PicoId Id, EXP e)) = usesExp(e, s);      \u2777  \n\nset[Occurrence] usesStat(s: ifElseStat(EXP e,\n                              list[STATEMENT] s1,\n                              list[STATEMENT] s2)) =\n   usesExp(e, s) + usesStats(s1) + usesStats(s2);\n\nset[Occurrence] usesStat(s: whileStat(EXP e,\n                              list[STATEMENT] s1)) =\n   usesExp(e, s) + usesStats(s1);\n\nset[Occurrence] usesStats(list[STATEMENT] stats) =  \n   {*usesStat(s) | s <- stats};\n\npublic set[Occurrence] uses(PROGRAM p) = usesStats(p.stats);      \u2778  \n\npublic set[Occurrence] defs(PROGRAM p) =       \u2779  \n   { < stat.src, v, stat > | /stat:asgStat(PicoId v, EXP _) <- p.stats};\n\n")),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},'There is a "TODO" in the documentation source:\n: should we not use locations more directly in our examples?\n(((TODO: should we not use locations more directly in our examples?)))')),(0,s.kt)("p",null,"Recall that ",(0,s.kt)("inlineCode",{parentName:"p"},"Occurrence")," was introduced in ",(0,s.kt)("a",{parentName:"p",href:"/docs/Recipes/Languages/Pico/Abstract/"},"Abstract"),"; it is a parameterized container to associate program entities with their location."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"\u2776  The function ",(0,s.kt)("inlineCode",{parentName:"p"},"usesExp")," computes a set of occurrences (uses) of Pico identifiers in a given statement:"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"If the expression is itself an identifier, then a singleton set containing that identifier and the statement is returned."),(0,s.kt)("li",{parentName:"ul"},"If the expression is composite, all its containing identifiers are collected using a descendant (deep) match\n(",(0,s.kt)("inlineCode",{parentName:"li"},"/"),", see ",(0,s.kt)("a",{parentName:"li",href:"/docs/Rascal/Patterns/Descendant/"},"Descendant")," )   in ",(0,s.kt)("inlineCode",{parentName:"li"},"/u:id(PicoId Id) \\<- e"),".\nNote that we use a labeled pattern ",(0,s.kt)("inlineCode",{parentName:"li"},"u:id(PicoId Id)"),",\nso that we can access the whole expression that was matched and retrieve its\nlocation information (",(0,s.kt)("inlineCode",{parentName:"li"},"u@location"),") when we are adding a <location, identifier> pair to the set of occurrences.\n"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"\u2777  ",(0,s.kt)("inlineCode",{parentName:"p"},"useStat")," extracts uses from all statement variants.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"\u2778  The function ",(0,s.kt)("inlineCode",{parentName:"p"},"uses")," simply applies ",(0,s.kt)("inlineCode",{parentName:"p"},"usesStats")," to the statement part of its program argument.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"\u2779  The function ",(0,s.kt)("inlineCode",{parentName:"p"},"defs"),"  has a Pico program as argument and returns a set of occurrences (definitions) of Pico identifiers.\nThe definition consists of a single set comprehension that consists of the following parts:"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"}," ... \\<- P. stats")," enumerates all statements in the program."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"/asgStat(PicoId Id, EXP Exp) \\<- P.stats")," uses again a descendant match to find all assignment statements."),(0,s.kt)("li",{parentName:"ul"},"For each assignment statement a (location, identifier) pair is added to the result.")))))}u.isMDXComponent=!0}}]);