"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[72101],{3905:(e,t,n)=>{n.d(t,{Zo:()=>o,kt:()=>b});var l=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},s=Object.keys(e);for(l=0;l<s.length;l++)n=s[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(l=0;l<s.length;l++)n=s[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=l.createContext({}),u=function(e){var t=l.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},o=function(e){var t=u(e.components);return l.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},g=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,o=r(e,["components","mdxType","originalType","parentName"]),g=u(n),b=a,m=g["".concat(c,".").concat(b)]||g[b]||d[b]||s;return n?l.createElement(m,i(i({ref:t},o),{},{components:n})):l.createElement(m,i({ref:t},o))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=g;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:a,i[1]=r;for(var u=2;u<s;u++)i[u]=n[u];return l.createElement.apply(null,i)}return l.createElement.apply(null,n)}g.displayName="MDXCreateElement"},90685:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>u});var l=n(83117),a=(n(67294),n(3905));const s={title:"module lang::rascal::tests::basic::Integers"},i=void 0,r={unversionedId:"Library/lang/rascal/tests/basic/Integers",id:"Library/lang/rascal/tests/basic/Integers",title:"module lang::rascal::tests::basic::Integers",description:"Usage",source:"@site/docs/Library/lang/rascal/tests/basic/Integers.md",sourceDirName:"Library/lang/rascal/tests/basic",slug:"/Library/lang/rascal/tests/basic/Integers",permalink:"/docs/Library/lang/rascal/tests/basic/Integers",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Library/lang/rascal/tests/basic/Integers.md",tags:[],version:"current",frontMatter:{title:"module lang::rascal::tests::basic::Integers"},sidebar:"tutorialSidebar",previous:{title:"module lang::rascal::tests::basic::IO",permalink:"/docs/Library/lang/rascal/tests/basic/IO"},next:{title:"module lang::rascal::tests::basic::Intermix",permalink:"/docs/Library/lang/rascal/tests/basic/Intermix"}},c={},u=[{value:"Usage",id:"usage",level:4},{value:"function divByZero",id:"lang-rascal-tests-basic-Integers-divByZero",level:2},{value:"function commAdd",id:"lang-rascal-tests-basic-Integers-commAdd",level:2},{value:"function commMul",id:"lang-rascal-tests-basic-Integers-commMul",level:2},{value:"function assocAdd",id:"lang-rascal-tests-basic-Integers-assocAdd",level:2},{value:"function assocMul",id:"lang-rascal-tests-basic-Integers-assocMul",level:2},{value:"function idemZero",id:"lang-rascal-tests-basic-Integers-idemZero",level:2},{value:"function neutralAddZero",id:"lang-rascal-tests-basic-Integers-neutralAddZero",level:2},{value:"function neutralMulOne",id:"lang-rascal-tests-basic-Integers-neutralMulOne",level:2},{value:"function neutralDivOne",id:"lang-rascal-tests-basic-Integers-neutralDivOne",level:2},{value:"function dualMulDiv",id:"lang-rascal-tests-basic-Integers-dualMulDiv",level:2},{value:"function MulDivMod",id:"lang-rascal-tests-basic-Integers-MulDivMod",level:2},{value:"function dualAddSub",id:"lang-rascal-tests-basic-Integers-dualAddSub",level:2},{value:"function distMulAdd",id:"lang-rascal-tests-basic-Integers-distMulAdd",level:2},{value:"function lessGreater",id:"lang-rascal-tests-basic-Integers-lessGreater",level:2},{value:"function less",id:"lang-rascal-tests-basic-Integers-less",level:2},{value:"function greaterEqual",id:"lang-rascal-tests-basic-Integers-greaterEqual",level:2},{value:"function transLess",id:"lang-rascal-tests-basic-Integers-transLess",level:2},{value:"function transEq",id:"lang-rascal-tests-basic-Integers-transEq",level:2},{value:"function reflexEq",id:"lang-rascal-tests-basic-Integers-reflexEq",level:2},{value:"function commEq",id:"lang-rascal-tests-basic-Integers-commEq",level:2},{value:"function plusMinStable",id:"lang-rascal-tests-basic-Integers-plusMinStable",level:2}],o={toc:u};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"import lang::rascal::tests::basic::Integers;")),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-divByZero"},"function divByZero"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool divByZero(num x)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-commAdd"},"function commAdd"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool commAdd(int i, int j)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-commMul"},"function commMul"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool commMul(int i, int j)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-assocAdd"},"function assocAdd"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool assocAdd(int i, int j, int k)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-assocMul"},"function assocMul"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool assocMul(int i, int j, int k)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-idemZero"},"function idemZero"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool idemZero(int i)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-neutralAddZero"},"function neutralAddZero"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool neutralAddZero(int i)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-neutralMulOne"},"function neutralMulOne"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool neutralMulOne(int i)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-neutralDivOne"},"function neutralDivOne"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool neutralDivOne(int i)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-dualMulDiv"},"function dualMulDiv"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool dualMulDiv(int i, int j)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-MulDivMod"},"function MulDivMod"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool MulDivMod(int i, int j)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-dualAddSub"},"function dualAddSub"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool dualAddSub(int i, int j)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-distMulAdd"},"function distMulAdd"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool distMulAdd(int i, int j, int k)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-lessGreater"},"function lessGreater"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool lessGreater(int i, int j)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-less"},"function less"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool less(int i, int j)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-greaterEqual"},"function greaterEqual"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool greaterEqual(int i, int j)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-transLess"},"function transLess"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool transLess(int i, int j, int k)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-transEq"},"function transEq"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool transEq(int i, int j, int k)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-reflexEq"},"function reflexEq"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool reflexEq(int i)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-commEq"},"function commEq"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool commEq(int i, int j)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Integers-plusMinStable"},"function plusMinStable"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool plusMinStable(int a, int b, int c, int d)"))))}d.isMDXComponent=!0}}]);