"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[56691],{3905:(e,i,t)=>{t.d(i,{Zo:()=>p,kt:()=>s});var r=t(67294);function u(e,i,t){return i in e?Object.defineProperty(e,i,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[i]=t,e}function n(e,i){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);i&&(r=r.filter((function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var i=1;i<arguments.length;i++){var t=null!=arguments[i]?arguments[i]:{};i%2?n(Object(t),!0).forEach((function(i){u(e,i,t[i])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(t,i))}))}return e}function a(e,i){if(null==e)return{};var t,r,u=function(e,i){if(null==e)return{};var t,r,u={},n=Object.keys(e);for(r=0;r<n.length;r++)t=n[r],i.indexOf(t)>=0||(u[t]=e[t]);return u}(e,i);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)t=n[r],i.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(u[t]=e[t])}return u}var o=r.createContext({}),m=function(e){var i=r.useContext(o),t=i;return e&&(t="function"==typeof e?e(i):l(l({},i),e)),t},p=function(e){var i=m(e.components);return r.createElement(o.Provider,{value:i},e.children)},y={inlineCode:"code",wrapper:function(e){var i=e.children;return r.createElement(r.Fragment,{},i)}},d=r.forwardRef((function(e,i){var t=e.components,u=e.mdxType,n=e.originalType,o=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=m(t),s=u,c=d["".concat(o,".").concat(s)]||d[s]||y[s]||n;return t?r.createElement(c,l(l({ref:i},p),{},{components:t})):r.createElement(c,l({ref:i},p))}));function s(e,i){var t=arguments,u=i&&i.mdxType;if("string"==typeof e||u){var n=t.length,l=new Array(n);l[0]=d;var a={};for(var o in i)hasOwnProperty.call(i,o)&&(a[o]=i[o]);a.originalType=e,a.mdxType="string"==typeof e?e:u,l[1]=a;for(var m=2;m<n;m++)l[m]=t[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},69337:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>l,default:()=>y,frontMatter:()=>n,metadata:()=>a,toc:()=>m});var r=t(87462),u=(t(67294),t(3905));const n={title:"module util::PriorityQueue"},l=void 0,a={unversionedId:"Library/util/PriorityQueue",id:"Library/util/PriorityQueue",title:"module util::PriorityQueue",description:"Usage",source:"@site/docs/Library/util/PriorityQueue.md",sourceDirName:"Library/util",slug:"/Library/util/PriorityQueue",permalink:"/docs/Library/util/PriorityQueue",draft:!1,tags:[],version:"current",frontMatter:{title:"module util::PriorityQueue"},sidebar:"tutorialSidebar",previous:{title:"module util::Monitor",permalink:"/docs/Library/util/Monitor"},next:{title:"module util::Progress",permalink:"/docs/Library/util/Progress"}},o={},m=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"Usage",id:"usage-1",level:4},{value:"Description",id:"description",level:4},{value:"Pitfalls",id:"pitfalls",level:4},{value:"data BinomialTree",id:"util-PriorityQueue-BinomialTree",level:2},{value:"function addSubTree",id:"util-PriorityQueue-addSubTree",level:2},{value:"function mergeTree",id:"util-PriorityQueue-mergeTree",level:2},{value:"function toString",id:"util-PriorityQueue-toString",level:2},{value:"data PriorityQueue",id:"util-PriorityQueue-PriorityQueue",level:2},{value:"function mkPriorityQueue",id:"util-PriorityQueue-mkPriorityQueue",level:2},{value:"function isEmpty",id:"util-PriorityQueue-isEmpty",level:2},{value:"function insertElement",id:"util-PriorityQueue-insertElement",level:2},{value:"function findMinimum",id:"util-PriorityQueue-findMinimum",level:2},{value:"function extractMinimum",id:"util-PriorityQueue-extractMinimum",level:2},{value:"function toString",id:"util-PriorityQueue-toString",level:2},{value:"function add",id:"util-PriorityQueue-add",level:2},{value:"function mergeQueue",id:"util-PriorityQueue-mergeQueue",level:2}],p={toc:m};function y(e){let{components:i,...t}=e;return(0,u.kt)("wrapper",(0,r.Z)({},p,t,{components:i,mdxType:"MDXLayout"}),(0,u.kt)("h4",{id:"usage"},"Usage"),(0,u.kt)("p",null,(0,u.kt)("inlineCode",{parentName:"p"},"import util::PriorityQueue;")),(0,u.kt)("h4",{id:"synopsis"},"Synopsis"),(0,u.kt)("p",null,"A ",(0,u.kt)("inlineCode",{parentName:"p"},"PriorityQueue")," datatype and associated functions."),(0,u.kt)("h4",{id:"usage-1"},"Usage"),(0,u.kt)("p",null,(0,u.kt)("inlineCode",{parentName:"p"},"import util::PriorityQueue;")),(0,u.kt)("h4",{id:"description"},"Description"),(0,u.kt)("p",null,"Priority queues maintain (priority, value) pairs in sorted order. They are implemented using a\n",(0,u.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Binomial_heap"},"Binomial heap")," Priority queue are, for instance, used to implement shortest path algorithms."),(0,u.kt)("p",null,"Provides the following functions:"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/Library/util/PriorityQueue#util::PriorityQueue-binomialTree"},"binomialTree")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/Library/util/PriorityQueue#util::PriorityQueue-priorityQueue"},"priorityQueue")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/Library/util/PriorityQueue#util::PriorityQueue-BinomialTree"},"BinomialTree")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/Library/util/PriorityQueue#util::PriorityQueue-PriorityQueue"},"PriorityQueue")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/Library/util/PriorityQueue#util::PriorityQueue-add"},"add")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/Library/util/PriorityQueue#util::PriorityQueue-addSubTree"},"addSubTree")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/Library/util/PriorityQueue#util::PriorityQueue-extractMinimum"},"extractMinimum")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/Library/util/PriorityQueue#util::PriorityQueue-findMinimum"},"findMinimum")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/Library/util/PriorityQueue#util::PriorityQueue-insertElement"},"insertElement")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/Library/util/PriorityQueue#util::PriorityQueue-isEmpty"},"isEmpty")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/Library/util/PriorityQueue#util::PriorityQueue-mergeQueue"},"mergeQueue")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/Library/util/PriorityQueue#util::PriorityQueue-mergeTree"},"mergeTree")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/Library/util/PriorityQueue#util::PriorityQueue-mkPriorityQueue"},"mkPriorityQueue")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("a",{parentName:"li",href:"/docs/Library/util/PriorityQueue#util::PriorityQueue-toString"},"toString"))),(0,u.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,u.kt)("p",null,'Currently, both priority and associated value ("payload") have to be integers. This will be generalized.'),(0,u.kt)("h2",{id:"util-PriorityQueue-BinomialTree"},"data BinomialTree"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-rascal"},"data BinomialTree  \n     = binomialTree(int priority,            // priority of this tree\n                                         int val,                     // payload\n                                         int degree,                  // degree of tree\n                                         list[BinomialTree] children  // subtrees\n                                        )\n     ;\n")),(0,u.kt)("h2",{id:"util-PriorityQueue-addSubTree"},"function addSubTree"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("inlineCode",{parentName:"li"},"BinomialTree addSubTree(BinomialTree p, BinomialTree q)"))),(0,u.kt)("h2",{id:"util-PriorityQueue-mergeTree"},"function mergeTree"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("inlineCode",{parentName:"li"},"BinomialTree mergeTree(BinomialTree p, BinomialTree q)"))),(0,u.kt)("h2",{id:"util-PriorityQueue-toString"},"function toString"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("inlineCode",{parentName:"li"},"str toString(BinomialTree T)"))),(0,u.kt)("h2",{id:"util-PriorityQueue-PriorityQueue"},"data PriorityQueue"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-rascal"},"data PriorityQueue  \n     = priorityQueue(list[BinomialTree] trees,  // trees in the heap\n                                   int minIndex               // index of minimal tree\n                                  )\n     ;\n")),(0,u.kt)("h2",{id:"util-PriorityQueue-mkPriorityQueue"},"function mkPriorityQueue"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("inlineCode",{parentName:"li"},"PriorityQueue mkPriorityQueue()")),(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("inlineCode",{parentName:"li"},"PriorityQueue mkPriorityQueue(int priority, int val)"))),(0,u.kt)("h2",{id:"util-PriorityQueue-isEmpty"},"function isEmpty"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("inlineCode",{parentName:"li"},"bool isEmpty(PriorityQueue Q)"))),(0,u.kt)("h2",{id:"util-PriorityQueue-insertElement"},"function insertElement"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("inlineCode",{parentName:"li"},"PriorityQueue insertElement(PriorityQueue Q, int priority, int val)"))),(0,u.kt)("h2",{id:"util-PriorityQueue-findMinimum"},"function findMinimum"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("inlineCode",{parentName:"li"},"int findMinimum(PriorityQueue Q)"))),(0,u.kt)("h2",{id:"util-PriorityQueue-extractMinimum"},"function extractMinimum"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("inlineCode",{parentName:"li"},"tuple[int, int, PriorityQueue] extractMinimum(PriorityQueue Q)"))),(0,u.kt)("h2",{id:"util-PriorityQueue-toString"},"function toString"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("inlineCode",{parentName:"li"},"str toString(PriorityQueue Q)"))),(0,u.kt)("h2",{id:"util-PriorityQueue-add"},"function add"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("inlineCode",{parentName:"li"},"list[BinomialTree] add(list[BinomialTree] heap, BinomialTree t)"))),(0,u.kt)("h2",{id:"util-PriorityQueue-mergeQueue"},"function mergeQueue"),(0,u.kt)("ul",null,(0,u.kt)("li",{parentName:"ul"},(0,u.kt)("inlineCode",{parentName:"li"},"PriorityQueue mergeQueue(PriorityQueue p, PriorityQueue q)"))))}y.isMDXComponent=!0}}]);