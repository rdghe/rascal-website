"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[1043],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2723:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var r=t(3117),a=t(102),o=(t(7294),t(3905)),i=["components"],l={title:"Empirical analysis of the relationship between CC and SLOC",authors:["dlandman"]},c=void 0,s={permalink:"/blog/2016/01/01/empirical-analysis-of-the-relationship-between-CC-and-SLOC",editUrl:"https://github.com/usethesource/rascal-website/tree/main/packages/create-docusaurus/templates/shared/blog/2016-01-01-empirical-analysis-of-the-relationship-between-CC-and-SLOC.md",source:"@site/blog/2016-01-01-empirical-analysis-of-the-relationship-between-CC-and-SLOC.md",title:"Empirical analysis of the relationship between CC and SLOC",description:"Check out these two related articles on the empirical relation between the CC and SLOC source code metrics.",date:"2016-01-01T00:00:00.000Z",formattedDate:"January 1, 2016",tags:[],readingTime:1.655,truncated:!1,authors:[{name:"Davy Landman",title:"Language Engineer & CEO of swat.engineering, Rascal Core Team",url:"https://homepages.cwi.nl/~landman/",imageURL:"https://homepages.cwi.nl/~landman/images/davylandman.png",key:"dlandman"}],frontMatter:{title:"Empirical analysis of the relationship between CC and SLOC",authors:["dlandman"]},prevItem:{title:"Performance Modeling of Maximal Sharing - Experience Report",permalink:"/blog/2016/03/12/performance-modeling-of-maximal-sharing"},nextItem:{title:"Optimizing Hash Tries",permalink:"/blog/2015/10/30/optimizing-hash-tries"}},u={authorsImageUrls:[void 0]},p=[],d={toc:p};function m(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Check out these two related articles on the empirical relation between the CC and SLOC source code metrics."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'@ARTICLE{jsep2015-landman,\n  author = { Davy Landman and Alexander Serebrenik and Eric Bouwers and Jurgen J. Vinju },\n  title = { {Empirical analysis of the relationship between CC and SLOC in a large corpus of Java methods and C functions} },\n  journal = { Journal of Software: Evolution and Process },\n  year = { 2015 },\n  doi = { 10.1002/smr.1760 },\n  fulltext  = "http://homepages.cwi.nl/~landman/docs/Landman2015-ccsloc-jsep2015-preprint.pdf",\n  datalink = { http://homepages.cwi.nl/~landman/jsep2015/ },\n}\n\n@INPROCEEDINGS{Landman2014,\n  author = { Davy Landman and Alexander Serebrenik and Jurgen J. Vinju },\n  title = { {Empirical analysis of the relationship between CC and SLOC in a large corpus of Java methods} },\n  booktitle = { 30th IEEE International Conference on Software Maintenance and\n  Evolution, ICSME 2014 },\n  year = { 2014 },\n  datalink = { http://homepages.cwi.nl/~landman/icsme2014/ },\n  fulltext= "http://homepages.cwi.nl/~landman/docs/Landman2014-ccsloc-icsme2014-preprint.pdf"\n}\n')),(0,o.kt)("p",null,"Measuring the internal quality of source code is one of the traditional\ngoals of making software development into an engineering discipline.\nCyclomatic Complexity (CC) is an often used source code quality metric, next\nto Source Lines of Code (SLOC). However, the use of the CC metric is\nchallenged by the repeated claim that CC is redundant with respect to SLOC\ndue to strong linear correlation."),(0,o.kt)("p",null,"We conducted an extensive literature study of the CC/SLOC correlation results.\nNext, we tested correlation on large Java (17.6 M methods) and C (6.3 M\nfunctions) corpora. Our results show that linear correlation between SLOC and CC\nis only moderate as caused by increasingly high variance. We further observe\nthat aggregating CC and SLOC as well as performing a power transform improves\nthe correlation."),(0,o.kt)("p",null,"Our conclusion is that the observed linear correlation between CC and SLOC\nof Java methods or C functions is not strong enough to conclude that CC is\nredundant with SLOC. This conclusion contradicts earlier claims from\nliterature, but concurs with the widely accepted practice of measuring of CC\nnext to SLOC."))}m.isMDXComponent=!0}}]);