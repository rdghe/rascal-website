"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[51844],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>m});var a=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=a.createContext({}),s=function(e){var r=a.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=s(e.components);return a.createElement(l.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},d=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(t),m=n,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(f,i(i({ref:r},p),{},{components:t})):a.createElement(f,i({ref:r},p))}));function m(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},82375:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var a=t(87462),n=(t(67294),t(3905));const o={title:"Compiler"},i=void 0,c={unversionedId:"Rascalopedia/Compiler/index",id:"Rascalopedia/Compiler/index",title:"Compiler",description:"Synopsis",source:"@site/docs/Rascalopedia/Compiler/index.md",sourceDirName:"Rascalopedia/Compiler",slug:"/Rascalopedia/Compiler/",permalink:"/docs/Rascalopedia/Compiler/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Rascalopedia/Compiler/index.md",tags:[],version:"current",frontMatter:{title:"Compiler"},sidebar:"tutorialSidebar",previous:{title:"Algebraic Data Type",permalink:"/docs/Rascalopedia/AlgebraicDataType/"},next:{title:"Domain Specific Language",permalink:"/docs/Rascalopedia/DomainSpecificLanguage/"}},l={},s=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4}],p={toc:s};function u(e){let{components:r,...t}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"synopsis"},"Synopsis"),(0,n.kt)("p",null,"Tranform source code to an executable form."),(0,n.kt)("h4",{id:"description"},"Description"),(0,n.kt)("p",null,"A ",(0,n.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Compiler"},"compiler")," transforms the source code of a program (in a source langue) to an executable form\n(in a target language)\nand consists of the following phases:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Rascalopedia/Parser/"},"Parser"),": read the source code and build an ",(0,n.kt)("a",{parentName:"li",href:"/docs/Rascalopedia/AbstractSyntaxTree/"},"Abstract Syntax Tree"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Rascalopedia/Typechecker/"},"Typechecker"),": perform a semantic analysis of the code, resolve all names\nand verify that the program is type correct."),(0,n.kt)("li",{parentName:"ul"},"Optimisation: perform optimisations (e.g., constant folding, dead code elimination, call unfolding).\nThis can be seen as a form of ",(0,n.kt)("a",{parentName:"li",href:"/docs/Rascalopedia/Refactoring/"},"Refactoring"),"."),(0,n.kt)("li",{parentName:"ul"},"Code generation: generate the final code, this can be asembly language or directly executable code.")))}u.isMDXComponent=!0}}]);