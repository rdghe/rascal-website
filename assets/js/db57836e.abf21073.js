"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[51173],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>m});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},b=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),b=c(t),m=a,y=b["".concat(s,".").concat(m)]||b[m]||u[m]||o;return t?n.createElement(y,l(l({ref:r},p),{},{components:t})):n.createElement(y,l({ref:r},p))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=b;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}b.displayName="MDXCreateElement"},41539:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=t(83117),a=(t(67294),t(3905));const o={title:"lang::smtlib2::theory::core::Ast"},l=void 0,i={unversionedId:"Library/lang/smtlib2/theory/core/Ast",id:"Library/lang/smtlib2/theory/core/Ast",title:"lang::smtlib2::theory::core::Ast",description:"Usage",source:"@site/docs/Library/lang/smtlib2/theory/core/Ast.md",sourceDirName:"Library/lang/smtlib2/theory/core",slug:"/Library/lang/smtlib2/theory/core/Ast",permalink:"/docs/Library/lang/smtlib2/theory/core/Ast",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/lang/smtlib2/theory/core/Ast.md",tags:[],version:"current",frontMatter:{title:"lang::smtlib2::theory::core::Ast"},sidebar:"tutorialSidebar",previous:{title:"lang::smtlib2::theory::core",permalink:"/docs/Library/lang/smtlib2/theory/core/"},next:{title:"lang::smtlib2::theory::ints",permalink:"/docs/Library/lang/smtlib2/theory/ints/"}},s={},c=[{value:"Usage",id:"usage",level:4},{value:"data Sort",id:"lang-smtlib2-theory-core-Ast-Sort",level:2},{value:"data Expr",id:"lang-smtlib2-theory-core-Ast-Expr",level:2},{value:"data Literal",id:"lang-smtlib2-theory-core-Ast-Literal",level:2}],p={toc:c};function u(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"import lang::smtlib2::theory::core::Ast;")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Synopsis: AST for the SMTLIBv2 Core theory (boolean logic)\n")),(0,a.kt)("h2",{id:"lang-smtlib2-theory-core-Ast-Sort"},"data Sort"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"data Sort  \n     = \\bool()\n     ;\n")),(0,a.kt)("h2",{id:"lang-smtlib2-theory-core-Ast-Expr"},"data Expr"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"data Expr  \n     = \\not(Expr val)\n     | implies(Expr lhs, Expr rhs)\n     | and(Expr lhs, Expr rhs)\n     | or(Expr lhs, Expr rhs)\n     | xor(Expr lhs, Expr rhs)\n     | eq(Expr lhs, Expr rhs)\n     | distinct(Expr lhs, Expr rhs)\n     | ite(Expr condition, Expr whenTrue, Expr whenFalse)\n     ;\n")),(0,a.kt)("h2",{id:"lang-smtlib2-theory-core-Ast-Literal"},"data Literal"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"data Literal  \n     = boolVal(bool b)\n     ;\n")))}u.isMDXComponent=!0}}]);