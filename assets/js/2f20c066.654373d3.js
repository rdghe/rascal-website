"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[50755],{3905:(e,t,a)=>{a.d(t,{Zo:()=>o,kt:()=>m});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),c=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},o=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,p=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),d=c(a),m=n,y=d["".concat(p,".").concat(m)]||d[m]||u[m]||s;return a?r.createElement(y,i(i({ref:t},o),{},{components:a})):r.createElement(y,i({ref:t},o))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,i=new Array(s);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<s;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},88919:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=a(87462),n=(a(67294),a(3905));const s={title:"AbstractDataType"},i=void 0,l={unversionedId:"Rascalopedia/AbstractDataType/index",id:"Rascalopedia/AbstractDataType/index",title:"AbstractDataType",description:"Synopsis",source:"@site/docs/Rascalopedia/AbstractDataType/index.md",sourceDirName:"Rascalopedia/AbstractDataType",slug:"/Rascalopedia/AbstractDataType/",permalink:"/docs/Rascalopedia/AbstractDataType/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Rascalopedia/AbstractDataType/index.md",tags:[],version:"current",frontMatter:{title:"AbstractDataType"},sidebar:"tutorialSidebar",previous:{title:"Rascalopedia",permalink:"/docs/Rascalopedia/"},next:{title:"Abstract Syntax Tree",permalink:"/docs/Rascalopedia/AbstractSyntaxTree/"}},p={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Abstract Data Types in Daily Life",id:"abstract-data-types-in-daily-life",level:2},{value:"Abstract Data Types in computer science",id:"abstract-data-types-in-computer-science",level:2},{value:"Abstract Data Types in Rascal",id:"abstract-data-types-in-rascal",level:2}],o={toc:c};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"synopsis"},"Synopsis"),(0,n.kt)("p",null,"A definition of a data type."),(0,n.kt)("h4",{id:"description"},"Description"),(0,n.kt)("p",null,"An ",(0,n.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Abstract_data_type"},"Abstract Data Type")," is a mathematical description of a structure\nthat can be implemented in various ways. For instance, a stack data type can be characterized by ",(0,n.kt)("inlineCode",{parentName:"p"},"empty")," (the empty stack),\ntwo functions ",(0,n.kt)("inlineCode",{parentName:"p"},"push")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"pop")," and axioms that define them. At the implementation level, a stack\ncan be implemented using a list, array or something else."),(0,n.kt)("p",null,"In functional languages, and also in Rascal, abstract datatypes (or ADTs for short)\nare used to define new data types. Well-known examples are ",(0,n.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Stack_(data_structure)"},"stack")," and ","[tree]","(",(0,n.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Tree_(data_structure)"},"http://en.wikipedia.org/wiki/Tree_(data_structure)"),", but for these we may use the builtin's ",(0,n.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/Values/List/"},"List")," and ",(0,n.kt)("em",{parentName:"p"},"Values-Nodes (broken link)"),". In Rascal it is more natural to use them to define symbolic representations of domains, such as:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"the abstract syntax of logical formulas"),(0,n.kt)("li",{parentName:"ul"},"representations of complex run-time or static types"),(0,n.kt)("li",{parentName:"ul"},"abstract syntax trees of programming languages and domain specific languages")),(0,n.kt)("p",null,"See ",(0,n.kt)("a",{parentName:"p",href:"/docs/Rascal/Declarations/AlgebraicDataType/"},"Algebraic Data Types")," and\n",(0,n.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/Values/Constructor/"},"Constructors")," in the ",(0,n.kt)("a",{parentName:"p",href:"/docs/Rascal/"},"Rascal Language Reference"),"."),(0,n.kt)("h2",{id:"abstract-data-types-in-daily-life"},"Abstract Data Types in Daily Life"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"A stack of trays in the local cafetaria: ","![null][dispenser.jpg]","(/assets/Rascalopedia/AbstractDataType/dispenser.jpg)\n",(0,n.kt)("a",{parentName:"p",href:"http://www.thermo-box.co.uk/fimi-food-transport-and-handling-products/self-levelling-heated-and-unheated-plate-and-tray-systems.html"},"credit"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"A tree:\n","![null][tree.jpg]","(/assets/Rascalopedia/AbstractDataType/tree.jpg)\n",(0,n.kt)("a",{parentName:"p",href:"http://free-extras.com/images/tree-569.htm"},"credit"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Coral:\n","![null][coral.jpg]","(/assets/Rascalopedia/AbstractDataType/coral.jpg)\n",(0,n.kt)("a",{parentName:"p",href:"http://blog.enn.com/?p=476"},"credit")))),(0,n.kt)("h2",{id:"abstract-data-types-in-computer-science"},"Abstract Data Types in computer science"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The run-time stack of a programming language interpreter."),(0,n.kt)("li",{parentName:"ul"},"A search tree."),(0,n.kt)("li",{parentName:"ul"},"An ontology.")),(0,n.kt)("h2",{id:"abstract-data-types-in-rascal"},"Abstract Data Types in Rascal"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A tree data type:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal"},"data MyTree = leaf(int n) | tree(str name, MyTree left, MyTree right);\n")))}u.isMDXComponent=!0}}]);