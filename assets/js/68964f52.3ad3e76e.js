"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[11140],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),f=a,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9046:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(83117),a=(n(67294),n(3905));const i={title:"Tuple"},l=void 0,o={unversionedId:"Rascalopedia/Tuple/index",id:"Rascalopedia/Tuple/index",title:"Tuple",description:"Synopsis",source:"@site/docs/Rascalopedia/Tuple/index.md",sourceDirName:"Rascalopedia/Tuple",slug:"/Rascalopedia/Tuple/",permalink:"/docs/Rascalopedia/Tuple/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascalopedia/Tuple/index.md",tags:[],version:"current",frontMatter:{title:"Tuple"},sidebar:"tutorialSidebar",previous:{title:"Testing",permalink:"/docs/Rascalopedia/Testing/"},next:{title:"Typechecker",permalink:"/docs/Rascalopedia/Typechecker/"}},s={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Usage",id:"usage",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"An ordered, fixed length, sequence of values of possibly different type."),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("h4",{id:"types"},"Types"),(0,a.kt)("h4",{id:"function"},"Function"),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"A tuple is an ordered fixed length sequence of values of possibly different type."),(0,a.kt)("p",null,"In Rascal a tuple is written as ",(0,a.kt)("inlineCode",{parentName:"p"},"<")," V",(0,a.kt)("sub",null,"1"),", ..., V~n~ ",(0,a.kt)("inlineCode",{parentName:"p"},">")," and a tuple type has the form ",(0,a.kt)("inlineCode",{parentName:"p"},"type[T<sub>1</sub>, ..., T~n~]"),",\n",(0,a.kt)("em",{parentName:"p"},"T"),"~i~ represents the type of element ",(0,a.kt)("em",{parentName:"p"},"i"),". Tuple have two major applications:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"As tuples in a ",(0,a.kt)("a",{parentName:"li",href:"/docs/Rascalopedia/Relation"},"Relation"),"."),(0,a.kt)("li",{parentName:"ul"},"For ad-hoc packaging of values, for instance, to return multiple-values from a function.")),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/Values/Tuple"},"Tuple Values")," for the operations on tuples."),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("h4",{id:"benefits"},"Benefits"))}u.isMDXComponent=!0}}]);