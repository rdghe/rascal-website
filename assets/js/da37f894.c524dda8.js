"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[71637],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var p=a.createContext({}),o=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=o(e.components);return a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=o(t),d=s,b=u["".concat(p,".").concat(d)]||u[d]||m[d]||r;return t?a.createElement(b,l(l({ref:n},c),{},{components:t})):a.createElement(b,l({ref:n},c))}));function d(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,l=new Array(r);l[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:s,l[1]=i;for(var o=2;o<r;o++)l[o]=t[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},79349:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>o});var a=t(87462),s=(t(67294),t(3905));const r={title:"Slice",keywords:["[","..","]","="]},l=void 0,i={unversionedId:"Rascal/Statements/Assignment/Slice/index",id:"Rascal/Statements/Assignment/Slice/index",title:"Slice",description:"Synopsis",source:"@site/docs/Rascal/Statements/Assignment/Slice/index.md",sourceDirName:"Rascal/Statements/Assignment/Slice",slug:"/Rascal/Statements/Assignment/Slice/",permalink:"/docs/Rascal/Statements/Assignment/Slice/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Rascal/Statements/Assignment/Slice/index.md",tags:[],version:"current",frontMatter:{title:"Slice",keywords:["[","..","]","="]},sidebar:"tutorialSidebar",previous:{title:"Multiple",permalink:"/docs/Rascal/Statements/Assignment/Multiple/"},next:{title:"Subscription",permalink:"/docs/Rascal/Statements/Assignment/Subscription/"}},p={},o=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],c={toc:o};function m(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h4",{id:"synopsis"},"Synopsis"),(0,s.kt)("p",null,"Assign to a slice of a list or string."),(0,s.kt)("h4",{id:"syntax"},"Syntax"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Assignable [ Exp<sub>1</sub> .. Exp3_ ] = Exp<sub>4</sub>")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Assignable [ Exp<sub>1</sub>, Exp<sub>2</sub> .. Exp<sub>3</sub> ] = Exp<sub>4</sub>"))),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Exp<sub>1</sub>")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Exp<sub>3</sub>")," are optional"),(0,s.kt)("h4",{id:"description"},"Description"),(0,s.kt)("p",null,"A slice assignment is defined for ",(0,s.kt)("a",{parentName:"p",href:"../../../../Rascal/Expressions/Values/List"},"List"),", ",(0,s.kt)("a",{parentName:"p",href:"../../../../Rascal/Expressions/Values/String"},"String")," and ",(0,s.kt)("a",{parentName:"p",href:"../../../../Rascal/Expressions/Values/Node"},"Node"),"\nand aims to replace a slice from the old value of the assignable by a new value.\nSee ",(0,s.kt)("a",{parentName:"p",href:"../../../../Rascal/Expressions/Values/List/Slice"},"Slice"),", ",(0,s.kt)("a",{parentName:"p",href:"../../../../Rascal/Expressions/Values/String/Slice"},"Slice")," or ",(0,s.kt)("a",{parentName:"p",href:"../../../../Rascal/Expressions/Values/Node/Slice"},"Slice")," for a more detailed explanation of slicing."),(0,s.kt)("p",null,"Let ",(0,s.kt)("em",{parentName:"p"},"V")," be the current value of ",(0,s.kt)("em",{parentName:"p"},"Assignable"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"Assignable [ Exp<sub>1</sub> .. Exp<sub>3</sub> ] = Exp<sub>4</sub>"),":\nThe slice ",(0,s.kt)("inlineCode",{parentName:"p"},"[ Exp<sub>1</sub> .. Exp<sub>3</sub> ]")," determines two indices ",(0,s.kt)("inlineCode",{parentName:"p"},"begin")," (inclusive) and ",(0,s.kt)("inlineCode",{parentName:"p"},"end"),(0,s.kt)("br",{parentName:"p"}),"\n","(exclusive) in ",(0,s.kt)("em",{parentName:"p"},"V"),".\nA new value ",(0,s.kt)("em",{parentName:"p"},"V"),"' is computed that is a copy of ",(0,s.kt)("em",{parentName:"p"},"V")," but with all the elements in ",(0,s.kt)("em",{parentName:"p"},"V")," with ",(0,s.kt)("inlineCode",{parentName:"p"},"begin <= index < end")," replaced by the elements of the value of ",(0,s.kt)("em",{parentName:"p"},"Exp"),(0,s.kt)("sub",null,"4"),".\nNote that the size of ",(0,s.kt)("em",{parentName:"p"},"V")," and ",(0,s.kt)("em",{parentName:"p"},"V"),"' may differ.\n",(0,s.kt)("em",{parentName:"p"},"V"),"' is assigned to the ",(0,s.kt)("em",{parentName:"p"},"Assignable"),". ")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"Assignable [ Exp<sub>1</sub>, Exp<sub>2</sub> .. Exp<sub>3</sub> ] = Exp<sub>4</sub>"),":\nThe slice ",(0,s.kt)("inlineCode",{parentName:"p"},"[ Exp<sub>1</sub>, Exp<sub>2</sub> .. _Exp<sub>3</sub> ]")," determines two indices ",(0,s.kt)("inlineCode",{parentName:"p"},"begin")," (inclusive) and ",(0,s.kt)("inlineCode",{parentName:"p"},"end")," (exclusive)\nand a ",(0,s.kt)("inlineCode",{parentName:"p"},"step")," between indices in ",(0,s.kt)("em",{parentName:"p"},"V"),".\nA new value ",(0,s.kt)("em",{parentName:"p"},"V"),"' is computed that is a copy of ",(0,s.kt)("em",{parentName:"p"},"V")," but with all the elements in ",(0,s.kt)("em",{parentName:"p"},"V")," with indices\n",(0,s.kt)("inlineCode",{parentName:"p"},"begin"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"begin+step"),". ... ",(0,s.kt)("inlineCode",{parentName:"p"},"end-step")," <= ",(0,s.kt)("inlineCode",{parentName:"p"},"index < end")," replaced by the successive elements of the value of ",(0,s.kt)("em",{parentName:"p"},"Exp"),(0,s.kt)("sub",null,"4"),".\nNote that the size of ",(0,s.kt)("em",{parentName:"p"},"V")," and ",(0,s.kt)("em",{parentName:"p"},"V"),"' may differ.  ",(0,s.kt)("em",{parentName:"p"},"V"),"' is assigned to the ",(0,s.kt)("em",{parentName:"p"},"Assignable"),".\nIf the number of indices in the slice and the number of elements in the value of ",(0,s.kt)("em",{parentName:"p"},"Exp"),(0,s.kt)("sub",null,"4")," is not equal the following is done:\n",(0,s.kt)("strong",{parentName:"p"},"  If the number of elements in the slice is larger: the elements of ",(0,s.kt)("em",{parentName:"strong"},"Exp",(0,s.kt)("sub",null,"4"))," are used in a circular manner.\n"),"  If the number of elements in the slice is smaller: the remaining elements of ",(0,s.kt)("em",{parentName:"p"},"Exp",(0,s.kt)("sub",null,"4"))," is inserted after the last index in the slice."))),(0,s.kt)("h4",{id:"examples"},"Examples"),(0,s.kt)("p",null,"Replace the elements with index 3, 4, 5 in ",(0,s.kt)("inlineCode",{parentName:"p"},"L"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>L = [0,1,2,3,4,5,6,7,8,9];\nlist[int]: [0,1,2,3,4,5,6,7,8,9]\nrascal>L[3..6] = [100,200,300,400,500];\nlist[int]: [0,1,2,100,200,300,400,500,6,7,8,9]\n")),(0,s.kt)("p",null,"Replace the elements with index 1, 3, 5, 7 in ",(0,s.kt)("inlineCode",{parentName:"p"},"L")," (note how the elements from ",(0,s.kt)("inlineCode",{parentName:"p"},"[100,200]")," are used in a circular way):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>L = [0,1,2,3,4,5,6,7,8,9];\nlist[int]: [0,1,2,3,4,5,6,7,8,9]\nrascal>L[1,3..8] = [100,200];\nlist[int]: [0,100,2,200,4,100,6,200,8,9]\n")),(0,s.kt)("p",null,"Replace the elements with index 1, 3, 5, 7 in ",(0,s.kt)("inlineCode",{parentName:"p"},"L")," (note how the unused elements from ",(0,s.kt)("inlineCode",{parentName:"p"},"[100,200,300,400,500]"),"\nare insert at index 7):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>L = [0,1,2,3,4,5,6,7,8,9];\nlist[int]: [0,1,2,3,4,5,6,7,8,9]\nrascal>L[1,3..8] = [100,200,300,400,500];\nlist[int]: [0,100,2,200,4,300,6,400,500,8,9]\n")),(0,s.kt)("p",null,"Similar examples for slicing assignment on strings:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>S = "abcdefghij";\nstr: "abcdefghij"\nrascal>S[3..6] = "UVWXYZ";\nstr: "abcUVWXYZghij"\nrascal>S = "abcdefghij";\nstr: "abcdefghij"\nrascal>S[1,3..8] = "XY";\nstr: "aXcYeXgYij"\nrascal>S = "abcdefghij";\nstr: "abcdefghij"\nrascal>S[1,3..8] = "UVWXYZ";\nstr: "aUcVeWgXYZij"\n')),(0,s.kt)("p",null,"Replace the elements with index 3, 4, 5 in node ",(0,s.kt)("inlineCode",{parentName:"p"},"N"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>N = "f"(0,true,2,"abc",4,5.5,6,{7,77},8,{9,99,999});\nnode: "f"(\n  0,\n  true,\n  2,\n  "abc",\n  4,\n  5.5,\n  6,\n  {7,77},\n  8,\n  {999,9,99})\nrascal>N[3..6] = [100,200,300,400,500];\nnode: "f"(\n  0,\n  true,\n  2,\n  100,\n  200,\n  300,\n  400,\n  500,\n  6,\n  {7,77},\n  8,\n  {999,9,99})\n')),(0,s.kt)("p",null,"Replace the elements with index 1, 3, 5, 7 in ",(0,s.kt)("inlineCode",{parentName:"p"},"L")," (note how the elements from ",(0,s.kt)("inlineCode",{parentName:"p"},"[100,200]")," are used in a circular way):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>N = "f"(0,true,2,"abc",4,5.5,6,{7,77},8,{9,99,999});\nnode: "f"(\n  0,\n  true,\n  2,\n  "abc",\n  4,\n  5.5,\n  6,\n  {7,77},\n  8,\n  {999,9,99})\nrascal>N[1,3..8] = [100,200];\nnode: "f"(\n  0,\n  100,\n  2,\n  200,\n  4,\n  100,\n  6,\n  200,\n  8,\n  {999,9,99})\n')),(0,s.kt)("p",null,"Replace the elements with index 1, 3, 5, 7 in ",(0,s.kt)("inlineCode",{parentName:"p"},"L")," (note how the unused elements from ",(0,s.kt)("inlineCode",{parentName:"p"},"[100,200,300,400,500]"),"\nare insert at index 7):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>N = "f"(0,true,2,"abc",4,5.5,6,{7,77},8,{9,99,999});\nnode: "f"(\n  0,\n  true,\n  2,\n  "abc",\n  4,\n  5.5,\n  6,\n  {7,77},\n  8,\n  {999,9,99})\nrascal>N[1,3..8] = [100,200,300,400,500];\nnode: "f"(\n  0,\n  100,\n  2,\n  200,\n  4,\n  300,\n  6,\n  400,\n  500,\n  8,\n  {999,9,99})\n')))}m.isMDXComponent=!0}}]);