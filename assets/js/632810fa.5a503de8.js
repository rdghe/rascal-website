"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[82681],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(t),y=r,m=d["".concat(o,".").concat(y)]||d[y]||u[y]||l;return t?a.createElement(m,s(s({ref:n},c),{},{components:t})):a.createElement(m,s({ref:n},c))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=d;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<l;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},70611:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=t(83117),r=(t(67294),t(3905));const l={title:"ReifiedTypes",keywords:["#"]},s=void 0,i={unversionedId:"Rascal/Expressions/Values/ReifiedTypes/index",id:"Rascal/Expressions/Values/ReifiedTypes/index",title:"ReifiedTypes",description:"Synopsis",source:"@site/docs/Rascal/Expressions/Values/ReifiedTypes/index.md",sourceDirName:"Rascal/Expressions/Values/ReifiedTypes",slug:"/Rascal/Expressions/Values/ReifiedTypes/",permalink:"/docs/Rascal/Expressions/Values/ReifiedTypes/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Rascal/Expressions/Values/ReifiedTypes/index.md",tags:[],version:"current",frontMatter:{title:"ReifiedTypes",keywords:["#"]},sidebar:"tutorialSidebar",previous:{title:"Real",permalink:"/docs/Rascal/Expressions/Values/Real/"},next:{title:"Relation",permalink:"/docs/Rascal/Expressions/Values/Relation/"}},o={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Pitfalls",id:"pitfalls",level:4}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Types can be represented by values"),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"The type reify expression operator has two functions in one go:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"it transforms type literals into values that represent them (an isomorphic relation)"),(0,r.kt)("li",{parentName:"ul"},"it reifies the declarations necessary to build values of the types as well")),(0,r.kt)("p",null,"As a result a reified type can be used to reconstruct a type and the abstract (",(0,r.kt)("a",{parentName:"p",href:"../../../../Rascal/Declarations/AlgebraicDataType"},"Algebraic Data Type"),") or concrete (",(0,r.kt)("a",{parentName:"p",href:"../../../../Rascal/Declarations/SyntaxDefinition"},"Syntax Definition"),") grammar that produced it. "),(0,r.kt)("p",null,"Type literals have a nice interaction with ",(0,r.kt)("a",{parentName:"p",href:"../../../../Rascal/Declarations/StaticTyping/TypeParameters"},"Type Parameters"),", since they can be used to bind a type parameter without having to provide a value of the type. An example is the ",(0,r.kt)("a",{parentName:"p",href:"/docs/Library/ParseTree#ParseTree-parse"},"parse")," function in ",(0,r.kt)("a",{parentName:"p",href:"/docs/Library/ParseTree"},"parse tree")," (see below for an example usage)."),(0,r.kt)("p",null,"The values that are used to represent types are declared in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/Library/Type"},"Type")," module and ",(0,r.kt)("a",{parentName:"p",href:"/docs/Library/ParseTree"},"parse tree")," modules, namely ",(0,r.kt)("inlineCode",{parentName:"p"},"Symbol")," is the data-type to represent types symbolically and ",(0,r.kt)("inlineCode",{parentName:"p"},"Production")," is the data-type for representing grammatical constructs. "),(0,r.kt)("p",null,"A type literal wraps a ",(0,r.kt)("inlineCode",{parentName:"p"},"Symbol")," and a map of ",(0,r.kt)("inlineCode",{parentName:"p"},"Production"),"s."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"First import the module ",(0,r.kt)("inlineCode",{parentName:"p"},"Type"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Type;\nok\n")),(0,r.kt)("p",null,"Builtin types can be constructed without definitions, so the reified type representation is simple:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>#int\ntype[int]: type(\n  int(),\n  ())\nrascal>#list[int]\ntype[list[int]]: type(\n  list(int()),\n  ())\nrascal>#rel[int from, int to]\ntype[rel[int from,int to]]: type(\n  set(tuple([\n        label(\n          "from",\n          int()),\n        label(\n          "to",\n          int())\n      ])),\n  ())\n')),(0,r.kt)("p",null,"to get the symbol from the reified type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>#int.symbol\nSymbol: int()\n")),(0,r.kt)("p",null,"or we can use some definitions and reify the defined type to see a different behavior:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>data Nat = zero() | succ(Nat prev) | add(Nat l, Nat r) | mul(Nat l, Nat r);\nok\nrascal>#Nat\ntype[Nat]: type(\n  adt(\n    "Nat",\n    []),\n  (adt(\n      "Nat",\n      []):choice(\n      adt(\n        "Nat",\n        []),\n      {\n        cons(\n          label(\n            "add",\n            adt(\n              "Nat",\n              [])),\n          [\n            label(\n              "l",\n              adt(\n                "Nat",\n                [])),\n            label(\n              "r",\n              adt(\n                "Nat",\n                []))\n          ],\n          [],\n          {}),\n        cons(\n          label(\n            "mul",\n            adt(\n              "Nat",\n              [])),\n          [\n            label(\n              "l",\n              adt(\n                "Nat",\n                [])),\n            label(\n              "r",\n              adt(\n                "Nat",\n                []))\n          ],\n          [],\n          {}),\n        cons(\n          label(\n            "zero",\n            adt(\n              "Nat",\n              [])),\n          [],\n          [],\n          {}),\n        cons(\n          label(\n            "succ",\n            adt(\n              "Nat",\n              [])),\n          [label(\n              "prev",\n              adt(\n                "Nat",\n                []))],\n          [],\n          {})\n      })))\n')),(0,r.kt)("p",null,"and we can get an abstract definition of the constructors of the ","[AlgebraicDataType]",":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Type;\nok\nrascal>#Nat.definitions[adt("Nat",[])]\nProduction: choice(\n  adt(\n    "Nat",\n    []),\n  {\n    cons(\n      label(\n        "add",\n        adt(\n          "Nat",\n          [])),\n      [\n        label(\n          "l",\n          adt(\n            "Nat",\n            [])),\n        label(\n          "r",\n          adt(\n            "Nat",\n            []))\n      ],\n      [],\n      {}),\n    cons(\n      label(\n        "mul",\n        adt(\n          "Nat",\n          [])),\n      [\n        label(\n          "l",\n          adt(\n            "Nat",\n            [])),\n        label(\n          "r",\n          adt(\n            "Nat",\n            []))\n      ],\n      [],\n      {}),\n    cons(\n      label(\n        "zero",\n        adt(\n          "Nat",\n          [])),\n      [],\n      [],\n      {}),\n    cons(\n      label(\n        "succ",\n        adt(\n          "Nat",\n          [])),\n      [label(\n          "prev",\n          adt(\n            "Nat",\n            []))],\n      [],\n      {})\n  })\n')),(0,r.kt)("p",null,"we could go the other way around and construct a type literal dynamically:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>type(\\int(),())\ntype[value]: type(\n  int(),\n  ())\nrascal>type(\\int(),()) == #int\nbool: true\n")),(0,r.kt)("p",null,"we use type literals often in IO to express an expected type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import ValueIO;\nok\nrascal>int testInt = readTextValueString(#int, "1");\nint: 1\nrascal>tuple[int,int] testTuple = readTextValueString(#tuple[int,int], "\\<1,2\\>");\ntuple[int,int]: <1,2>\n')),(0,r.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Note that the type reify operator always produces constant values, because type literals are always constants.")))}u.isMDXComponent=!0}}]);