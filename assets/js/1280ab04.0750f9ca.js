"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[24895],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function u(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),o=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=o(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=o(a),f=i,b=p["".concat(s,".").concat(f)]||p[f]||d[f]||r;return a?n.createElement(b,l(l({ref:t},c),{},{components:a})):n.createElement(b,l({ref:t},c))}));function f(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=p;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:i,l[1]=u;for(var o=2;o<r;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},95338:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>u,toc:()=>o});var n=a(83117),i=(a(67294),a(3905));const r={title:"module util::UUID"},l=void 0,u={unversionedId:"Library/util/UUID",id:"Library/util/UUID",title:"module util::UUID",description:"Usage",source:"@site/docs/Library/util/UUID.md",sourceDirName:"Library/util",slug:"/Library/util/UUID",permalink:"/docs/Library/util/UUID",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Library/util/UUID.md",tags:[],version:"current",frontMatter:{title:"module util::UUID"},sidebar:"tutorialSidebar",previous:{title:"module util::Test",permalink:"/docs/Library/util/Test"},next:{title:"module util::Webserver",permalink:"/docs/Library/util/Webserver"}},s={},o=[{value:"Usage",id:"usage",level:4},{value:"function uuid",id:"util-UUID-uuid",level:2},{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4},{value:"Pitfalls",id:"pitfalls",level:4},{value:"function uuidi",id:"util-UUID-uuidi",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Pitfalls",id:"pitfalls-1",level:4}],c={toc:o};function d(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"import util::UUID;")),(0,i.kt)("h2",{id:"util-UUID-uuid"},"function uuid"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"loc uuid()"))),(0,i.kt)("h4",{id:"synopsis"},"Synopsis"),(0,i.kt)("p",null,"generates a unique identifier shaped as a ",(0,i.kt)("inlineCode",{parentName:"p"},"loc")),(0,i.kt)("h4",{id:"description"},"Description"),(0,i.kt)("p",null,"This function generates a UUID, see ",(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Universally_unique_identifier"},"http://en.wikipedia.org/wiki/Universally_unique_identifier"),".\nSince UUIDs are useful to assign an opaque and unique identity to data, the function returns\na ",(0,i.kt)("a",{parentName:"p",href:"../../Rascal/Expressions/Values/Location"},"Location")," (which is the preferred representation for encoding identities in Rascal)"),(0,i.kt)("h4",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import util::UUID;\nok\n")),(0,i.kt)("p",null,"The uuid() function generates a location with the authority showing the literal canonical UUID string"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>uuid()\nloc: |uuid://d72d92b0-1a1b-41b4-87bc-2915cce5cce0|\n")),(0,i.kt)("p",null,"Use it to relate identies to data objects, as in this example which adds a field to a relation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>myData = { <i,i*i> | i <- [1..11] }; \nrel[int,int]: {\n  <10,100>,\n  <7,49>,\n  <1,1>,\n  <3,9>,\n  <9,81>,\n  <2,4>,\n  <4,16>,\n  <6,36>,\n  <5,25>,\n  <8,64>\n}\nrascal>rel[int n, int square, loc id] myUniqueData = { <i,j,uuid()> | <i,j> <- myData };\nrel[int n,int square,loc id]: {\n  <1,1,|uuid://6e219a03-7f4d-4821-aed1-0c121d994f2a|>,\n  <6,36,|uuid://01f9cb1c-6c7c-4d3a-b385-ff041f23614d|>,\n  <3,9,|uuid://cd8b8b75-0080-4d49-902c-bdf037089694|>,\n  <2,4,|uuid://d0ff224b-10fb-4cd4-950e-e9ae24ba2942|>,\n  <4,16,|uuid://f3ef5e4c-2f5a-4166-8e54-a99ba28bceb2|>,\n  <9,81,|uuid://c26cb018-42f4-478f-ba08-cee41ceb3309|>,\n  <5,25,|uuid://39699cc1-2d9b-4706-8d37-779127c82fcf|>,\n  <10,100,|uuid://b4e6f400-987b-4364-b555-6ab123cc0aca|>,\n  <8,64,|uuid://42ee1abe-61f8-412e-b2f6-c037c2dfe6c5|>,\n  <7,49,|uuid://8c455d9c-ac6a-43bb-a78c-4718f74cb70c|>\n}\nrascal>map[tuple[int i, int j] t, loc id] myUniqueMap = (<i,j>:uuid() | <i,j> <- myData );\nmap[tuple[int i,int j] t, loc id]: (\n  <6,36>:|uuid://c0884fae-8c6b-495b-aedf-51d81a1ff2e3|,\n  <2,4>:|uuid://19ff72d0-05f7-40bf-b758-c020e7f47b16|,\n  <7,49>:|uuid://348556a0-1e8a-406d-8f2d-396d9b9ada29|,\n  <9,81>:|uuid://4edf13b7-4623-41f8-91f2-45c79347b689|,\n  <8,64>:|uuid://c6b15cb8-305f-4568-a922-b5c07617b908|,\n  <5,25>:|uuid://636cb50a-a27f-4018-9acc-8ff712c544ff|,\n  <4,16>:|uuid://f513f612-d204-4941-aae0-090db33e79e5|,\n  <1,1>:|uuid://63a9ddc4-a8b4-49b3-90e2-3d66853f02c0|,\n  <10,100>:|uuid://c19bad02-9bbe-4ee7-bd36-4031cc359944|,\n  <3,9>:|uuid://114a72b5-5a33-4fe4-8167-53846517ae26|\n)\n")),(0,i.kt)("p",null,"Note how uuid() should always generate a fresh value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>assert uuid() != uuid(); \nbool: true\n")),(0,i.kt)("h4",{id:"benefits"},"Benefits"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../Rascal/Expressions/Values/Location"},"Location"),"s are used for identifying program elements or model elements in Rascal. The uuid() function provides\nan quick-and-easy way of acquiring such an identity without having to design a naming scheme.")),(0,i.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"UUIDs are a quick and dirty way of identifying data which may lead to hard to debug code. A naming scheme for ",(0,i.kt)("a",{parentName:"li",href:"../../Rascal/Expressions/Values/Location"},"Location"),"s is better because it generates human readable\n",(0,i.kt)("a",{parentName:"li",href:"../../Rascal/Expressions/Values/Location"},"Location"),"s which carry meaning. For example consider the difference in readability between these two values:\n",(0,i.kt)("inlineCode",{parentName:"li"},"|uuid://47fdcd64-4fd0-41a1-8aa3-61c5b272c3fc|")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"|java+class:///java/lang/Object|"),". Both may lead to the same\nresults in your computation, but if we print either of them out, one of them is opaque and the other is transparent. A transparent naming scheme is preferable for\ndebugging purposes.")),(0,i.kt)("h2",{id:"util-UUID-uuidi"},"function uuidi"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int uuidi()"))),(0,i.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,i.kt)("p",null,"see ","[uuid]",", this function does the same except return the UUID as an int."),(0,i.kt)("h4",{id:"pitfalls-1"},"Pitfalls"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"beware that this integer is almost guaranteed to use 128 bits, so communicating it outside of\nRascal should not be done via a Java 32-bit integer.")))}d.isMDXComponent=!0}}]);