"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[71528],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,f=m["".concat(o,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(f,l(l({ref:t},c),{},{components:n})):a.createElement(f,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3068:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const i={title:"Syntax Definition and Parsing"},l=void 0,s={unversionedId:"RascalConcepts/SyntaxDefinitionAndParsing/index",id:"RascalConcepts/SyntaxDefinitionAndParsing/index",title:"Syntax Definition and Parsing",description:"Synopsis",source:"@site/docs/RascalConcepts/SyntaxDefinitionAndParsing/index.md",sourceDirName:"RascalConcepts/SyntaxDefinitionAndParsing",slug:"/RascalConcepts/SyntaxDefinitionAndParsing/",permalink:"/docs/RascalConcepts/SyntaxDefinitionAndParsing/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/RascalConcepts/SyntaxDefinitionAndParsing/index.md",tags:[],version:"current",frontMatter:{title:"Syntax Definition and Parsing"},sidebar:"tutorialSidebar",previous:{title:"Static Typing",permalink:"/docs/RascalConcepts/StaticTyping/"},next:{title:"Visiting",permalink:"/docs/RascalConcepts/Visiting/"}},o={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Pitfalls",id:"pitfalls",level:4}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Syntax definition and parser generation for new languages."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"All source code analysis projects need to extract information directly from the source code.\nThere are two main approaches to this:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Lexical information"),": Use regular expressions to extract useful, but somewhat superficial, flat, information.\nThis can be achieved using regular expression patterns,\nsee ",(0,r.kt)("a",{parentName:"li",href:"../../Rascal/Patterns/Regular"},"Regular Expression Pattern"),"s."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Structured information"),": Use syntax analysis to extract the complete, nested, structure of the source code\nin the form of a syntax tree. Rascal can directly manipulate the parse trees, but it also enables user-defined\nmappings from parse tree to abstract syntax tree.")),(0,r.kt)("p",null,"Using ",(0,r.kt)("a",{parentName:"p",href:"../../Rascal/Declarations/SyntaxDefinition"},"Syntax Definitions")," you can define the syntax of any (programming) language. Then Rascal:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"will generate the parser, and"),(0,r.kt)("li",{parentName:"ul"},"will provide pattern matching and pattern construction on parse trees and abstract syntax trees,\nsee ",(0,r.kt)("a",{parentName:"li",href:"../../Rascal/Patterns/Node"},"Abstract Patterns")," and",(0,r.kt)("br",{parentName:"li"}),(0,r.kt)("a",{parentName:"li",href:"../../Rascal/Patterns/Concrete"},"Concrete Patterns"),".")),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Let's use the Exp language as example. It contains the following elements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Integer constants, e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"123"),"."),(0,r.kt)("li",{parentName:"ul"},"A multiplication operator, e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"3*4"),"."),(0,r.kt)("li",{parentName:"ul"},"An addition operator, e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"3+4"),"."),(0,r.kt)("li",{parentName:"ul"},"Multiplication is left-associative and has precedence over addition."),(0,r.kt)("li",{parentName:"ul"},"Addition is left-associative."),(0,r.kt)("li",{parentName:"ul"},"Parentheses can be used to override the precedence of the operators.")),(0,r.kt)("p",null,"Here are some examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"123")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"2+3+4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"2+3*4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(2+3)*4"))),(0,r.kt)("p",null,"The EXP language can be defined as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'// tag::module[]\nmodule demo::lang::Exp::Concrete::WithLayout::Syntax\n\nlayout Whitespace = [\\t-\\n\\r\\ ]*; // <1>\n    \nlexical IntegerLiteral = [0-9]+;           \n\nstart syntax Exp \n  = IntegerLiteral          \n  | bracket "(" Exp ")"     \n  > left Exp "*" Exp        \n  > left Exp "+" Exp        \n  ;\n\n')),(0,r.kt)("p",null,"Now you may parse and manipulate programs in the EXP language. Let's demonstrate parsing an expression:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Exp::Concrete::WithLayout::Syntax;\nok\nrascal>import ParseTree;\nok\nrascal>parse(#start[Exp], "2+3*4");\nstart[Exp]: (start[Exp]) `2+3*4`\n')),(0,r.kt)("p",null,"First we import the syntax definition and the link:/Libraries/Prelude-ParseTree","[ParseTree]"," module that provides the parsing functionality.\nFinally, we parse ",(0,r.kt)("inlineCode",{parentName:"p"},"2+3*4")," using the start symbol ",(0,r.kt)("inlineCode",{parentName:"p"},"Exp"),"."),(0,r.kt)("p",null,"Don't be worried, we are just showing the resulting parse tree here. It intended for programs and not for humans.\nThe points we want to make are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Rascal grammars are relatively easy to read and write (unfortunately, writing grammars will never become simple)."),(0,r.kt)("li",{parentName:"ul"},"Parser generation is completely implicit."),(0,r.kt)("li",{parentName:"ul"},"Given a syntax definition, it can be used immediately for parsing.")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"../../Recipes/"},"Recipes")," for a more extensive presentation of the\n",(0,r.kt)("a",{parentName:"p",href:"../../Recipes/Languages/Exp"},"EXP"),"\nlanguage and ",(0,r.kt)("a",{parentName:"p",href:"../../Recipes/Languages"},"Languages")," for other language examples."),(0,r.kt)("h4",{id:"pitfalls"},"Pitfalls"))}u.isMDXComponent=!0}}]);