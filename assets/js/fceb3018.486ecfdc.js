"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[76827],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),f=a,x=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return t?r.createElement(x,s(s({ref:n},p),{},{components:t})):r.createElement(x,s({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},21440:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const o={title:"Concrete Syntax"},s=void 0,i={unversionedId:"Recipes/Languages/Func/ConcreteSyntax/index",id:"Recipes/Languages/Func/ConcreteSyntax/index",title:"Concrete Syntax",description:"Synopsis",source:"@site/docs/Recipes/Languages/Func/ConcreteSyntax/index.md",sourceDirName:"Recipes/Languages/Func/ConcreteSyntax",slug:"/Recipes/Languages/Func/ConcreteSyntax/",permalink:"/docs/Recipes/Languages/Func/ConcreteSyntax/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Recipes/Languages/Func/ConcreteSyntax/index.md",tags:[],version:"current",frontMatter:{title:"Concrete Syntax"},sidebar:"tutorialSidebar",previous:{title:"Abstract Syntax",permalink:"/docs/Recipes/Languages/Func/AbstractSyntax/"},next:{title:"Eval0",permalink:"/docs/Recipes/Languages/Func/Eval0/"}},l={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Examples",id:"examples",level:4}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"The concrete syntax of Func."),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},'module demo::lang::Func::Func\n\nlexical Ident =  [a-zA-Z][a-zA-Z0-9]* !>> [a-zA-Z0-9];\n\nlexical Natural = [0-9]+ !>> [0-9];\n\nlexical LAYOUT = [\\t-\\n\\r\\ ];\n\nlayout LAYOUTLIST = LAYOUT*  !>> [\\t-\\n\\r\\ ] ;\n\nstart syntax Prog = prog: Func* ;\n\nsyntax Func = func: Ident name "(" {Ident ","}* ")" "=" Exp;\n\nsyntax Exp \n    = let: "let" {Binding ","}* "in" Exp "end"\n    | cond: "if" Exp "then" Exp "else" Exp "end"\n    | bracket "(" Exp ")"\n    | var: Ident\n    | nat: Natural \n    | call: Ident "(" {Exp ","}* ")"\n    | address: "&" Ident\n    > deref: "*" Exp \n    > non-assoc (\n        left mul: Exp "*" Exp \n      | non-assoc div: Exp "/" Exp\n    ) \n    > left (\n        left add: Exp "+" Exp \n      | left sub: Exp "-" Exp\n    )\n    >\n    non-assoc (\n        non-assoc gt: Exp "\\>" Exp\n      | non-assoc lt:  Exp "\\<" Exp\n      | non-assoc geq:  Exp "\\>=" Exp\n      | non-assoc leq:  Exp "\\<=" Exp\n    )\n    >\n    right assign: Exp ":=" Exp\n    >\n    right seq: Exp ";" Exp\n    ; \n\nsyntax Binding = binding: Ident "=" Exp;\n\n')),(0,a.kt)("p",null,"The concrete syntax of Func uses many features of Rascal's syntax definitions. Some notes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The definition of lexical syntax follows the pattern:\n",(0,a.kt)("strong",{parentName:"li"},"  Define lexical symbols (",(0,a.kt)("inlineCode",{parentName:"strong"},"Ident"),", ",(0,a.kt)("inlineCode",{parentName:"strong"},"Natural"),").\n"),"  Define rules for layout.\n**  Use follow restrictions (",(0,a.kt)("inlineCode",{parentName:"li"},"!>>"),") to enforce the longest match of lexical symbols."),(0,a.kt)("li",{parentName:"ul"},"The definition of lexical also follows a common pattern:\n",(0,a.kt)("strong",{parentName:"li"},"  List of non-terminal is defined with their alternatives.\n"),"  One non-terminal is designated as start symbol (",(0,a.kt)("inlineCode",{parentName:"li"},"Prog"),").\n",(0,a.kt)("strong",{parentName:"li"},"  Each alternative has a label, this is for the benefit of converting parse trees to abstract syntaxt trees.\n"),"  Each alternative spells out its priority and associativity.")))}u.isMDXComponent=!0}}]);