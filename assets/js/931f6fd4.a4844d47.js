"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[50472],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),o=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=o(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=o(a),m=r,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||l;return a?n.createElement(f,i(i({ref:t},p),{},{components:a})):n.createElement(f,i({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var o=2;o<l;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},45628:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var n=a(83117),r=(a(67294),a(3905));const l={title:"MultiVariable Pattern",keywords:["*"]},i=void 0,s={unversionedId:"Rascal/Patterns/MultiVariable/index",id:"Rascal/Patterns/MultiVariable/index",title:"MultiVariable Pattern",description:"Synopsis",source:"@site/docs/Rascal/Patterns/MultiVariable/index.md",sourceDirName:"Rascal/Patterns/MultiVariable",slug:"/Rascal/Patterns/MultiVariable/",permalink:"/docs/Rascal/Patterns/MultiVariable/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Rascal/Patterns/MultiVariable/index.md",tags:[],version:"current",frontMatter:{title:"MultiVariable Pattern",keywords:["*"]},sidebar:"tutorialSidebar",previous:{title:"Literal Pattern",permalink:"/docs/Rascal/Patterns/Literal/"},next:{title:"Node pattern",permalink:"/docs/Rascal/Patterns/Node/"}},c={},o=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Pitfalls",id:"pitfalls",level:4}],p={toc:o};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Multi-variable (also known as Splice-variable) in abstract pattern."),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"*Var")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"*Type Var"))),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"A multi-variable is an abbreviation for a variable declaration pattern.\nIt can occur in a list pattern or set pattern and can match zero or more list or set elements.\nOptionally the ",(0,r.kt)("em",{parentName:"p"},"element type")," of the multi-variable may be specified."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import IO;\nok\n")),(0,r.kt)("p",null,"Using lists:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>if([10, *N, 50] := [10, 20, 30, 40, 50])\n>>>>>>>   println("Match succeeds, N == <N>");\n   println("Match succeeds, N == <N>");\nMatch succeeds, N == [20,30,40]\nok\n')),(0,r.kt)("p",null,"the above is equivalent with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>if([10, *int N, 50] := [10, 20, 30, 40, 50])\n>>>>>>>   println("Match succeeds, N == <N>");\n   println("Match succeeds, N == <N>");\nMatch succeeds, N == [20,30,40]\nok\n')),(0,r.kt)("p",null,"Using sets:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>if({10, *S, 50} := {50, 40, 30, 30, 10})\n>>>>>>>   println("Match succeeds, S == <S>");\n   println("Match succeeds, S == <S>");\nMatch succeeds, S == {40,30}\nok\n')),(0,r.kt)("p",null,"the above is equivalent with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>if({10, *int S, 50} := {50, 40, 30, 30, 10})\n>>>>>>>   println("Match succeeds, S == <S>");\n   println("Match succeeds, S == <S>");\nMatch succeeds, S == {40,30}\nok\n')),(0,r.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,r.kt)("p",null,"In older versions of Rascal the type of a multi-variable had to be a list or set type."))}u.isMDXComponent=!0}}]);