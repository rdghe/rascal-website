"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[18340],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=o(n),d=l,k=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return n?a.createElement(k,s(s({ref:t},u),{},{components:n})):a.createElement(k,s({ref:t},u))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,s=new Array(i);s[0]=c;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:l,s[1]=r;for(var o=2;o<i;o++)s[o]=n[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},92820:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>o});var a=n(83117),l=(n(67294),n(3905));const i={title:"Set"},s=void 0,r={unversionedId:"Library/Set",id:"Library/Set",title:"Set",description:"Usage",source:"@site/docs/Library/Set.md",sourceDirName:"Library",slug:"/Library/Set",permalink:"/docs/Library/Set",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/Set.md",tags:[],version:"current",frontMatter:{title:"Set"},sidebar:"tutorialSidebar",previous:{title:"Relation",permalink:"/docs/Library/Relation"},next:{title:"String",permalink:"/docs/Library/String"}},p={},o=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"Usage",id:"usage-1",level:4},{value:"Description",id:"description",level:4},{value:"function classify",id:"Set-classify",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Examples",id:"examples",level:4},{value:"function group",id:"Set-group",level:2},{value:"Synopsis",id:"synopsis-2",level:4},{value:"Examples",id:"examples-1",level:4},{value:"function index",id:"Set-index",level:2},{value:"Synopsis",id:"synopsis-3",level:4},{value:"Examples",id:"examples-2",level:4},{value:"function isEmpty",id:"Set-isEmpty",level:2},{value:"Synopsis",id:"synopsis-4",level:4},{value:"Description",id:"description-1",level:4},{value:"Examples",id:"examples-3",level:4},{value:"function mapper",id:"Set-mapper",level:2},{value:"Synopsis",id:"synopsis-5",level:4},{value:"Description",id:"description-2",level:4},{value:"Examples",id:"examples-4",level:4},{value:"function max",id:"Set-max",level:2},{value:"Synopsis",id:"synopsis-6",level:4},{value:"Examples",id:"examples-5",level:4},{value:"function min",id:"Set-min",level:2},{value:"Synopsis",id:"synopsis-7",level:4},{value:"Examples",id:"examples-6",level:4},{value:"Synopsis",id:"synopsis-8",level:4},{value:"Examples",id:"examples-7",level:4},{value:"function power",id:"Set-power",level:2},{value:"Synopsis",id:"synopsis-9",level:4},{value:"Description",id:"description-3",level:4},{value:"Examples",id:"examples-8",level:4},{value:"function power1",id:"Set-power1",level:2},{value:"Synopsis",id:"synopsis-10",level:4},{value:"Description",id:"description-4",level:4},{value:"Examples",id:"examples-9",level:4},{value:"function reducer",id:"Set-reducer",level:2},{value:"Synopsis",id:"synopsis-11",level:4},{value:"Description",id:"description-5",level:4},{value:"Examples",id:"examples-10",level:4},{value:"Pitfalls",id:"pitfalls",level:4},{value:"function size",id:"Set-size",level:2},{value:"Synopsis",id:"synopsis-12",level:4},{value:"Examples",id:"examples-11",level:4},{value:"function sum",id:"Set-sum",level:2},{value:"function getOneFrom",id:"Set-getOneFrom",level:2},{value:"Synopsis",id:"synopsis-13",level:4},{value:"Description",id:"description-6",level:4},{value:"Examples",id:"examples-12",level:4},{value:"function getFirstFrom",id:"Set-getFirstFrom",level:2},{value:"Synopsis",id:"synopsis-14",level:4},{value:"Description",id:"description-7",level:4},{value:"Benefits",id:"benefits",level:4},{value:"function takeOneFrom",id:"Set-takeOneFrom",level:2},{value:"Synopsis",id:"synopsis-15",level:4},{value:"Description",id:"description-8",level:4},{value:"Examples",id:"examples-13",level:4},{value:"function takeFirstFrom",id:"Set-takeFirstFrom",level:2},{value:"Synopsis",id:"synopsis-16",level:4},{value:"Description",id:"description-9",level:4},{value:"function toList",id:"Set-toList",level:2},{value:"Synopsis",id:"synopsis-17",level:4},{value:"Examples",id:"examples-14",level:4},{value:"Pitfalls",id:"pitfalls-1",level:4},{value:"function toMap",id:"Set-toMap",level:2},{value:"Synopsis",id:"synopsis-18",level:4},{value:"Description",id:"description-10",level:4},{value:"Examples",id:"examples-15",level:4},{value:"function toMapUnique",id:"Set-toMapUnique",level:2},{value:"Synopsis",id:"synopsis-19",level:4},{value:"Description",id:"description-11",level:4},{value:"Examples",id:"examples-16",level:4},{value:"function toString",id:"Set-toString",level:2},{value:"Synopsis",id:"synopsis-20",level:4},{value:"Examples",id:"examples-17",level:4},{value:"Pitfalls",id:"pitfalls-2",level:4},{value:"function itoString",id:"Set-itoString",level:2},{value:"Synopsis",id:"synopsis-21",level:4},{value:"Examples",id:"examples-18",level:4},{value:"Pitfalls",id:"pitfalls-3",level:4},{value:"function sort",id:"Set-sort",level:2},{value:"Synopsis",id:"synopsis-22",level:4},{value:"Examples",id:"examples-19",level:4},{value:"function top",id:"Set-top",level:2},{value:"Description",id:"description-12",level:4},{value:"function union",id:"Set-union",level:2},{value:"Synopsis",id:"synopsis-23",level:4},{value:"function jaccard",id:"Set-jaccard",level:2},{value:"Synopsis",id:"synopsis-24",level:4}],u={toc:o};function m(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"usage"},"Usage"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Set;")),(0,l.kt)("h4",{id:"synopsis"},"Synopsis"),(0,l.kt)("p",null,"Library functions for sets."),(0,l.kt)("h4",{id:"usage-1"},"Usage"),(0,l.kt)("h4",{id:"description"},"Description"),(0,l.kt)("p",null,"For operators on sets see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/Values/Set"},"Set")," in the Rascal Language Reference."),(0,l.kt)("p",null,"The following functions are defined for sets:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-classify"},"Library:function:Set::classify")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-getFirstFrom"},"Library:function:Set::get first from")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-getOneFrom"},"Library:function:Set::get one from")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-group"},"Library:function:Set::group")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-index"},"Library:function:Set::index")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-isEmpty"},"Library:function:Set::is empty")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-itoString"},"Library:function:Set::ito string")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-jaccard"},"Library:function:Set::jaccard")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-mapper"},"Library:function:Set::mapper")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-max"},"Library:function:Set::max")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-min"},"Library:function:Set::min")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-power"},"Library:function:Set::power")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-power1"},"Library:function:Set::power1")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-reducer"},"Library:function:Set::reducer")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-size"},"Library:function:Set::size")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-sort"},"Library:function:Set::sort")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-sum"},"Library:function:Set::sum")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-takeFirstFrom"},"Library:function:Set::take first from")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-takeOneFrom"},"Library:function:Set::take one from")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-toList"},"Library:function:Set::to list")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-toMap"},"Library:function:Set::to map")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-toMapUnique"},"Library:function:Set::to map unique")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-toString"},"Library:function:Set::to string")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-top"},"Library:function:Set::top")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/Set#Set-union"},"Library:function:Set::union"))),(0,l.kt)("h2",{id:"Set-classify"},"function classify"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"map[&K,set[&V]] classify(set[&V] input, &K (&V) getClass)"))),(0,l.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,l.kt)("p",null,"Classify elements in a set."),(0,l.kt)("h4",{id:"examples"},"Examples"),(0,l.kt)("p",null,"We classify animals by their number of legs."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Set;\nok\n")),(0,l.kt)("p",null,"Create a map from animals to number of legs."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>legs = ("bird": 2, "dog": 4, "human": 2, "snake": 0, "spider": 8, "millepede": 1000, "crab": 8, "cat": 4);\nmap[str, int]: ("snake":0,"spider":8,"human":2,"crab":8,"cat":4,"bird":2,"dog":4,"millepede":1000)\n')),(0,l.kt)("p",null,"Define function ",(0,l.kt)("inlineCode",{parentName:"p"},"nLegs")," that returns the number of legs for each animal (or ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," when the animal is unknown):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>int nLegs(str animal){\n>>>>>>>    return legs[animal] ? 0;\n>>>>>>>}\nint (str): function(|prompt:///|(0,53,<1,0>,<3,1>))\n")),(0,l.kt)("p",null,"Now classify a set of animals:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>classify({"bird", "dog", "human", "spider", "millepede", "zebra", "crab", "cat"}, nLegs);\nmap[int, set[str]]: (\n  8:{"spider","crab"},\n  2:{"human","bird"},\n  4:{"cat","dog"},\n  1000:{"millepede"},\n  0:{"zebra"}\n)\n')),(0,l.kt)("h2",{id:"Set-group"},"function group"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set[set[&T]] group(set[&T] input, bool (&T a, &T b) similar)"))),(0,l.kt)("h4",{id:"synopsis-2"},"Synopsis"),(0,l.kt)("p",null,"Group elements in a set given an equivalence function."),(0,l.kt)("h4",{id:"examples-1"},"Examples"),(0,l.kt)("p",null,"We classify animals by their number of legs."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Set;\nok\n")),(0,l.kt)("p",null,"Create a map from animals to number of legs."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>legs = ("bird": 2, "dog": 4, "human": 2, "snake": 0, "spider": 8, "millepede": 1000, "crab": 8, "cat": 4);\nmap[str, int]: ("snake":0,"spider":8,"human":2,"crab":8,"cat":4,"bird":2,"dog":4,"millepede":1000)\n')),(0,l.kt)("p",null,"Define function ",(0,l.kt)("inlineCode",{parentName:"p"},"nLegs")," that returns the number of legs fro each animal (or ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," when the animal is unknown):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>int nLegs(str animal){\n>>>>>>>    return legs[animal] ? 0;\n>>>>>>>}\nint (str): function(|prompt:///|(0,53,<1,0>,<3,1>))\nrascal>bool similar(str a, str b) = nLegs(a) == nLegs(b);\nbool (str, str): function(|prompt:///|(0,50,<1,0>,<1,50>))\n")),(0,l.kt)("p",null,"Now group a set of animals:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>group({"bird", "dog", "human", "spider", "millepede", "zebra", "crab", "cat"}, similar);\nset[set[str]]: {\n  {"spider"},\n  {"zebra"},\n  {"human"},\n  {"crab"},\n  {"cat"},\n  {"bird"},\n  {"dog"},\n  {"millepede"}\n}\n')),(0,l.kt)("p",null,"WARNING: check compiler."),(0,l.kt)("h2",{id:"Set-index"},"function index"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"map[&T,int] index(set[&T] s)"))),(0,l.kt)("h4",{id:"synopsis-3"},"Synopsis"),(0,l.kt)("p",null,"Map set elements to a fixed index."),(0,l.kt)("h4",{id:"examples-2"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Set;\nok\nrascal>index({"elephant", "zebra", "snake"});\nmap[str, int]: ("snake":0,"zebra":1,"elephant":2)\n')),(0,l.kt)("h2",{id:"Set-isEmpty"},"function isEmpty"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bool isEmpty(set[&T] st)"))),(0,l.kt)("h4",{id:"synopsis-4"},"Synopsis"),(0,l.kt)("p",null,"Test whether a set is empty."),(0,l.kt)("h4",{id:"description-1"},"Description"),(0,l.kt)("p",null,"Yields ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," if ",(0,l.kt)("inlineCode",{parentName:"p"},"s")," is empty, and ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("h4",{id:"examples-3"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Set;\nok\nrascal>isEmpty({1, 2, 3});\nbool: false\nrascal>isEmpty({});\nbool: true\n")),(0,l.kt)("h2",{id:"Set-mapper"},"function mapper"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set[&U] mapper(set[&T] st, &U (&T) fn)"))),(0,l.kt)("h4",{id:"synopsis-5"},"Synopsis"),(0,l.kt)("p",null,"Apply a function to all set elements and return set of results."),(0,l.kt)("h4",{id:"description-2"},"Description"),(0,l.kt)("p",null,"Return a set obtained by applying function ",(0,l.kt)("inlineCode",{parentName:"p"},"fn")," to all elements of set ",(0,l.kt)("inlineCode",{parentName:"p"},"s"),"."),(0,l.kt)("h4",{id:"examples-4"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Set;\nok\nrascal>int incr(int x) { return x + 1; }\nint (int): function(|prompt:///|(0,33,<1,0>,<1,33>))\nrascal>mapper({1, 2, 3, 4}, incr);\nset[int]: {5,3,2,4}\n")),(0,l.kt)("h2",{id:"Set-max"},"function max"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"&T max(set[&T] st)"))),(0,l.kt)("h4",{id:"synopsis-6"},"Synopsis"),(0,l.kt)("p",null,"Determine the largest element of a set."),(0,l.kt)("h4",{id:"examples-5"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Set;\nok\nrascal>max({1, 3, 5, 2, 4});\nint: 5\nrascal>max({"elephant", "zebra", "snake"});\nstr: "zebra"\n')),(0,l.kt)("h2",{id:"Set-min"},"function min"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"&T min(set[&T] st)"))),(0,l.kt)("h4",{id:"synopsis-7"},"Synopsis"),(0,l.kt)("p",null,"Determine the smallest element of a set."),(0,l.kt)("h4",{id:"examples-6"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Set;\nok\nrascal>min({1, 3, 5, 4, 2});\nint: 1\n")),(0,l.kt)("h4",{id:"synopsis-8"},"Synopsis"),(0,l.kt)("p",null,"Smallest element of a set."),(0,l.kt)("h4",{id:"examples-7"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Set;\nok\nrascal>min({1, 3, 5, 2, 4});\nint: 1\nrascal>min({"elephant", "zebra", "snake"});\nstr: "elephant"\n')),(0,l.kt)("h2",{id:"Set-power"},"function power"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set[set[&T]] power(set[&T] st)"))),(0,l.kt)("h4",{id:"synopsis-9"},"Synopsis"),(0,l.kt)("p",null,"Determine the powerset of a set."),(0,l.kt)("h4",{id:"description-3"},"Description"),(0,l.kt)("p",null,"Returns a set with all subsets of ",(0,l.kt)("inlineCode",{parentName:"p"},"s"),"."),(0,l.kt)("h4",{id:"examples-8"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Set;\nok\nrascal>power({1,2,3,4});\nset[set[int]]: {\n  {},\n  {1,2,4},\n  {1},\n  {3,2,4},\n  {3},\n  {1,3,2,4},\n  {1,3},\n  {2},\n  {4},\n  {1,2},\n  {1,4},\n  {3,2},\n  {3,4},\n  {1,3,2},\n  {1,3,4},\n  {2,4}\n}\n")),(0,l.kt)("h2",{id:"Set-power1"},"function power1"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set[set[&T]] power1(set[&T] st)"))),(0,l.kt)("h4",{id:"synopsis-10"},"Synopsis"),(0,l.kt)("p",null,"The powerset (excluding the empty set) of a set value."),(0,l.kt)("h4",{id:"description-4"},"Description"),(0,l.kt)("p",null,"Returns all subsets (excluding the empty set) of ",(0,l.kt)("inlineCode",{parentName:"p"},"s"),"."),(0,l.kt)("h4",{id:"examples-9"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Set;\nok\nrascal>power1({1,2,3,4});\nset[set[int]]: {\n  {1,2,4},\n  {1},\n  {3,2,4},\n  {3},\n  {1,3,2,4},\n  {1,3},\n  {2},\n  {4},\n  {1,2},\n  {1,4},\n  {3,2},\n  {3,4},\n  {1,3,2},\n  {1,3,4},\n  {2,4}\n}\n")),(0,l.kt)("h2",{id:"Set-reducer"},"function reducer"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"&T reducer(set[&T] st, &T (&T,&T) fn, &T unit)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"&T reducer(set[&T] _:{})"))),(0,l.kt)("h4",{id:"synopsis-11"},"Synopsis"),(0,l.kt)("p",null,"Apply a function to successive elements of a set and combine the results (",(0,l.kt)("strong",{parentName:"p"},"deprecated"),")."),(0,l.kt)("h4",{id:"description-5"},"Description"),(0,l.kt)("p",null,"Apply the function ",(0,l.kt)("inlineCode",{parentName:"p"},"fn")," to successive elements of set ",(0,l.kt)("inlineCode",{parentName:"p"},"s")," starting with ",(0,l.kt)("inlineCode",{parentName:"p"},"unit"),"."),(0,l.kt)("h4",{id:"examples-10"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Set;\nok\nrascal>int add(int x, int y) { return x + y; }\nint (int, int): function(|prompt:///|(0,39,<1,0>,<1,39>))\nrascal>reducer({10, 20, 30, 40}, add, 0); \nint: 100\n")),(0,l.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,l.kt)("p",null,"WARNING: This function is ",(0,l.kt)("em",{parentName:"p"},"deprecated"),", use a ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/Reducer"},"reducer")," instead."),(0,l.kt)("h2",{id:"Set-size"},"function size"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"int size(set[&T] st)"))),(0,l.kt)("h4",{id:"synopsis-12"},"Synopsis"),(0,l.kt)("p",null,"Determine the number of elements in a set."),(0,l.kt)("h4",{id:"examples-11"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Set;\nok\nrascal>size({1,2,3,4});\nint: 4\nrascal>size({"elephant", "zebra", "snake"});\nint: 3\nrascal>size({});\nint: 0\n')),(0,l.kt)("h2",{id:"Set-sum"},"function sum"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"(&T <:num) sum(set[(&T <:num)] _:{})")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"default (&T <:num) sum({(&T <: num) e, *(&T <: num) r})"))),(0,l.kt)("h2",{id:"Set-getOneFrom"},"function getOneFrom"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"&T getOneFrom(set[&T] st)"))),(0,l.kt)("h4",{id:"synopsis-13"},"Synopsis"),(0,l.kt)("p",null,"Pick an arbitrary element from a set."),(0,l.kt)("h4",{id:"description-6"},"Description"),(0,l.kt)("h4",{id:"examples-12"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Set;\nok\nrascal>getOneFrom({"elephant", "zebra", "snake"});\nstr: "zebra"\nrascal>getOneFrom({"elephant", "zebra", "snake"});\nstr: "zebra"\nrascal>getOneFrom({"elephant", "zebra", "snake"});\nstr: "zebra"\nrascal>getOneFrom({"elephant", "zebra", "snake"});\nstr: "elephant"\n')),(0,l.kt)("h2",{id:"Set-getFirstFrom"},"function getFirstFrom"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"&T getFirstFrom({&T f, *&T _})")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"&T getFirstFrom(set[&T] _:{})"))),(0,l.kt)("h4",{id:"synopsis-14"},"Synopsis"),(0,l.kt)("p",null,'Get "first" element from a set.'),(0,l.kt)("h4",{id:"description-7"},"Description"),(0,l.kt)("p",null,'Get "first" element of a set. Of course, sets are unordered and do not have a first element.\nHowever, we may assume that sets are internally ordered in some way and this ordering is reproducible.\nApplying ',(0,l.kt)("inlineCode",{parentName:"p"},"getFirstFrom")," on the same set will always returns the same element."),(0,l.kt)("h4",{id:"benefits"},"Benefits"),(0,l.kt)("p",null,"This function helps to make set-based code more deterministic, for instance, for testing purposes."),(0,l.kt)("h2",{id:"Set-takeOneFrom"},"function takeOneFrom"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tuple[&T, set[&T]] takeOneFrom(set[&T] st)"))),(0,l.kt)("h4",{id:"synopsis-15"},"Synopsis"),(0,l.kt)("p",null,"Remove an arbitrary element from a set, returns the element and a set without that element."),(0,l.kt)("h4",{id:"description-8"},"Description"),(0,l.kt)("p",null,"Remove an arbitrary element from set ",(0,l.kt)("inlineCode",{parentName:"p"},"s")," and return a tuple consisting of the element and a set without that element.\nAlso see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Library/Set#Set-getOneFrom"},"get one from"),"."),(0,l.kt)("h4",{id:"examples-13"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Set;\nok\nrascal>takeOneFrom({1, 2, 3, 4});\ntuple[int,set[int]]: <4,{1,3,2}>\nrascal>takeOneFrom({1, 2, 3, 4});\ntuple[int,set[int]]: <1,{3,2,4}>\nrascal>takeOneFrom({1, 2, 3, 4});\ntuple[int,set[int]]: <1,{3,2,4}>\n")),(0,l.kt)("h2",{id:"Set-takeFirstFrom"},"function takeFirstFrom"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tuple[&T, set[&T]] takeFirstFrom({&T f, *&T r})")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tuple[&T, set[&T]] takeFirstFrom(set[&T] _:{})"))),(0,l.kt)("h4",{id:"synopsis-16"},"Synopsis"),(0,l.kt)("p",null,'Remove "first" element from a set, returns the element and a set without that element.'),(0,l.kt)("h4",{id:"description-9"},"Description"),(0,l.kt)("p",null,"element of a set."),(0,l.kt)("h2",{id:"Set-toList"},"function toList"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list[&T] toList(set[&T] st)"))),(0,l.kt)("h4",{id:"synopsis-17"},"Synopsis"),(0,l.kt)("p",null,"Convert a set to a list."),(0,l.kt)("h4",{id:"examples-14"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Set;\nok\nrascal>toList({1, 2, 3, 4});\nlist[int]: [1,3,2,4]\nrascal>toList({"elephant", "zebra", "snake"});\nlist[str]: ["snake","zebra","elephant"]\n')),(0,l.kt)("p",null,"Note that the same result can be obtained using splicing:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>s = {1,2,3,4};\nset[int]: {1,3,2,4}\nrascal>l = [*s];\nlist[int]: [1,3,2,4]\n")),(0,l.kt)("h4",{id:"pitfalls-1"},"Pitfalls"),(0,l.kt)("p",null,"Recall that the elements of a set are unordered and that there is no guarantee in which order the set elements will be placed in the resulting list."),(0,l.kt)("h2",{id:"Set-toMap"},"function toMap"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"map[&A,set[&B]] toMap(rel[&A, &B] st)"))),(0,l.kt)("h4",{id:"synopsis-18"},"Synopsis"),(0,l.kt)("p",null,"Convert a set of tuples to a map; each key is associated with a set of values."),(0,l.kt)("h4",{id:"description-10"},"Description"),(0,l.kt)("p",null,"Convert a set of tuples to a map in which the first element of each tuple\nis associated with the set of second elements of all tuples with the same first element."),(0,l.kt)("h4",{id:"examples-15"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Set;\nok\nrascal>toMap({<"a", 1>, <"b", 2>, <"a", 10>});\nmap[str, set[int]]: (\n  "a":{10,1},\n  "b":{2}\n)\n')),(0,l.kt)("h2",{id:"Set-toMapUnique"},"function toMapUnique"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"map[&A,&B] toMapUnique(rel[&A, &B] st) throws MultipleKey"))),(0,l.kt)("h4",{id:"synopsis-19"},"Synopsis"),(0,l.kt)("p",null,"Convert a set of tuples to a map (provided that there are no multiple keys)."),(0,l.kt)("h4",{id:"description-11"},"Description"),(0,l.kt)("p",null,"Convert a set of tuples to a map. The result should be a legal map (i.e., without multiple keys)."),(0,l.kt)("h4",{id:"examples-16"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Set;\nok\nrascal>toMapUnique({<"a", 1>, <"b", 2>, <"c", 10>});\nmap[str, int]: ("a":1,"b":2,"c":10)\n')),(0,l.kt)("p",null,"Now explore an erroneous example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>toMapUnique({<"a", 1>, <"b", 2>, <"a", 10>});\n|std:///Set.rsc|(9297,543,<442,0>,<462,70>): MultipleKey("a",10,1)\n    at *** somewhere ***(|std:///Set.rsc|(9297,543,<442,0>,<462,70>))\n    at toMapUnique(|prompt:///|(39,2,<1,39>,<1,41>))\nok\n')),(0,l.kt)("h2",{id:"Set-toString"},"function toString"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str toString(set[&T] st)"))),(0,l.kt)("h4",{id:"synopsis-20"},"Synopsis"),(0,l.kt)("p",null,"Convert a set to a string."),(0,l.kt)("h4",{id:"examples-17"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Set;\nok\nrascal>toString({1, 2, 3});\nstr: "{1,3,2}"\nrascal>toString({"elephant", "zebra", "snake"});\nstr: "{\\"snake\\",\\"zebra\\",\\"elephant\\"}"\n')),(0,l.kt)("h4",{id:"pitfalls-2"},"Pitfalls"),(0,l.kt)("p",null,"Recall that the elements of a set are unordered and that there is no guarantee in which order the set elements will be placed in the resulting string."),(0,l.kt)("h2",{id:"Set-itoString"},"function itoString"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str itoString(set[&T] st)"))),(0,l.kt)("h4",{id:"synopsis-21"},"Synopsis"),(0,l.kt)("p",null,"Convert a set to an indented string."),(0,l.kt)("h4",{id:"examples-18"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Set;\nok\nrascal>toString({1, 2, 3});\nstr: "{1,3,2}"\nrascal>toString({"elephant", "zebra", "snake"});\nstr: "{\\"snake\\",\\"zebra\\",\\"elephant\\"}"\n')),(0,l.kt)("h4",{id:"pitfalls-3"},"Pitfalls"),(0,l.kt)("p",null,"Recall that the elements of a set are unordered and that there is no guarantee in which order the set elements will be placed in the resulting string."),(0,l.kt)("h2",{id:"Set-sort"},"function sort"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list[&T] sort(set[&T] s)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list[&T] sort(set[&T] l, bool (&T a, &T b) less)"))),(0,l.kt)("h4",{id:"synopsis-22"},"Synopsis"),(0,l.kt)("p",null,"Sort the elements of a set."),(0,l.kt)("p",null,"Sort the elements of a set:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Use the built-in ordering on values to compare list elements."),(0,l.kt)("li",{parentName:"ul"},"Give an additional ",(0,l.kt)("inlineCode",{parentName:"li"},"lessThan")," function that will be used to compare elements. ")),(0,l.kt)("p",null,"This function ",(0,l.kt)("inlineCode",{parentName:"p"},"lessThan")," (<) function should implement a strict partial order, meaning:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"that it is not reflexive, i.e. never ",(0,l.kt)("inlineCode",{parentName:"li"},"a < a")),(0,l.kt)("li",{parentName:"ul"},"is anti-symmetric, i.e. never ",(0,l.kt)("inlineCode",{parentName:"li"},"a < b && b < a"),"."),(0,l.kt)("li",{parentName:"ul"},"is transitive, i.e. if ",(0,l.kt)("inlineCode",{parentName:"li"},"a < b")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"b < c")," then ",(0,l.kt)("inlineCode",{parentName:"li"},"a < c"),".")),(0,l.kt)("h4",{id:"examples-19"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Set;\nok\nrascal>import String;\nok\nrascal>sort({10, 4, -2, 11, 100, 5});\nlist[int]: [-2,4,5,10,11,100]\nrascal>fruits = {"mango", "strawberry", "pear", "pineapple", "banana", "grape", "kiwi"};\nset[str]: {"mango","banana","pear","pineapple","grape","strawberry","kiwi"}\nrascal>sort(fruits);\nlist[str]: ["banana","grape","kiwi","mango","pear","pineapple","strawberry"]\nrascal>sort(fruits, bool(str a, str b){ return size(a) > size(b); });\nlist[str]: ["strawberry","pineapple","banana","mango","grape","kiwi","pear"]\n')),(0,l.kt)("h2",{id:"Set-top"},"function top"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list[&T] top(int k, set[&T] l, bool (&T a, &T b) less)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list[&T] top(int k, set[&T] l)"))),(0,l.kt)("p",null,".Synopsis Produce the smallest ",(0,l.kt)("inlineCode",{parentName:"p"},"k")," elements of a set as sorted by the ",(0,l.kt)("inlineCode",{parentName:"p"},"less")," function"),(0,l.kt)("h4",{id:"description-12"},"Description"),(0,l.kt)("p",null,"This function is fast if ",(0,l.kt)("inlineCode",{parentName:"p"},"k")," is relatively small, say 10 out of a 1000 elements.\nIt operates in O(n*k) time where n is the size of the set."),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"k")," is a larger value, say ",(0,l.kt)("inlineCode",{parentName:"p"},"k > 10"),", then it's perhaps better to just sort the entire set\nusing the asympotically faster (n*log^2(n)) sort function and take the first ",(0,l.kt)("inlineCode",{parentName:"p"},"k")," elements of the resulting list."),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"k")," is a negative number, ",(0,l.kt)("inlineCode",{parentName:"p"},"top")," will return the largest ",(0,l.kt)("inlineCode",{parentName:"p"},"abs(k)")," elements of the set instead of the smallest."),(0,l.kt)("h2",{id:"Set-union"},"function union"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set[&T] union(set[set[&T]] sets)"))),(0,l.kt)("h4",{id:"synopsis-23"},"Synopsis"),(0,l.kt)("p",null,"Flatten a set of sets into a single set.  "),(0,l.kt)("h2",{id:"Set-jaccard"},"function jaccard"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"real jaccard(set[value] x, set[value] y)"))),(0,l.kt)("h4",{id:"synopsis-24"},"Synopsis"),(0,l.kt)("p",null,"Compute the Jaccard similarity between two sets."))}m.isMDXComponent=!0}}]);