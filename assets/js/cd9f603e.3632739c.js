"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[89726],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var s=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},i=Object.keys(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=s.createContext({}),l=function(e){var t=s.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=l(e.components);return s.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=l(n),f=a,m=d["".concat(c,".").concat(f)]||d[f]||p[f]||i;return n?s.createElement(m,r(r({ref:t},u),{},{components:n})):s.createElement(m,r({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var l=2;l<i;l++)r[l]=n[l];return s.createElement.apply(null,r)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},43966:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var s=n(83117),a=(n(67294),n(3905));const i={title:"UseDef"},r=void 0,o={unversionedId:"Recipes/Languages/Pico/UseDef/index",id:"Recipes/Languages/Pico/UseDef/index",title:"UseDef",description:"Synopsis",source:"@site/docs/Recipes/Languages/Pico/UseDef/index.md",sourceDirName:"Recipes/Languages/Pico/UseDef",slug:"/Recipes/Languages/Pico/UseDef/",permalink:"/docs/Recipes/Languages/Pico/UseDef/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Recipes/Languages/Pico/UseDef/index.md",tags:[],version:"current",frontMatter:{title:"UseDef"},sidebar:"tutorialSidebar",previous:{title:"Uninit",permalink:"/docs/Recipes/Languages/Pico/Uninit/"},next:{title:"Visualize",permalink:"/docs/Recipes/Languages/Pico/Visualize/"}},c={},l=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Usage",id:"usage",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Compute use-def information for the variables in a Pico program."),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("h4",{id:"types"},"Types"),(0,a.kt)("h4",{id:"function"},"Function"),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"definitions")," of a variable are the source code locations where a variable gets a value.\nThe ",(0,a.kt)("em",{parentName:"p"},"uses")," of a variable are the location where the value of that variable is used.\nBoth concepts are relevant for program analysis and are defined here."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"// tag::module[]\nmodule demo::lang::Pico::UseDef\n\nimport demo::lang::Pico::Abstract;\n\nset[Occurrence] usesExp(EXP e, STATEMENT s) =  // <1>\n  u:id(PicoId Id1) := e ? {< u@location, Id1, s>}\n                        : {< u@location, Id2, s> | /u:id(PicoId Id2) <- e };\n     \nset[Occurrence] usesStat(s:asgStat(PicoId Id, EXP e)) = usesExp(e, s); // <2>\n\nset[Occurrence] usesStat(s: ifElseStat(EXP e,\n                              list[STATEMENT] s1,\n                              list[STATEMENT] s2)) =\n   usesExp(e, s) + usesStats(s1) + usesStats(s2);\n\nset[Occurrence] usesStat(s: whileStat(EXP e,\n                              list[STATEMENT] s1)) =\n   usesExp(e, s) + usesStats(s1);\n\nset[Occurrence] usesStats(list[STATEMENT] stats) =  \n   {*usesStat(s) | s <- stats};\n\npublic set[Occurrence] uses(PROGRAM p) = usesStats(p.stats);  //<3>\n\npublic set[Occurrence] defs(PROGRAM p) =  // <4>\n   { < stat@location, v, stat > | /stat:asgStat(PicoId v, EXP _) <- p.stats};\n// end::module[] \n\n")),(0,a.kt)("p",null,"Recall that ",(0,a.kt)("inlineCode",{parentName:"p"},"Occurrence")," was introduced in ",(0,a.kt)("a",{parentName:"p",href:"/docs/Recipes/Languages/Pico/Abstract"},"Abstract"),"; it is a parameterized container to associate\nprogram entities with their location."),(0,a.kt)("p",null,"<1> The function ",(0,a.kt)("inlineCode",{parentName:"p"},"usesExp")," computes a set of occurrences (uses) of Pico identifiers in a given statement:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"* If the expression is itself an identifier, then a singleton set containing that identifier and the statement is returned.\n* If the expression is composite, all its containing identifiers are collected using a descendant (deep) match \n   (`/`, see [Rascal:Descendant]))  in `/u:id(PicoId Id) \\<- e`. \n    Note that we use a labeled pattern `u:id(PicoId Id)`,\n   so that we can access the whole expression that was matched and retrieve its \n   location information (`u@location`) when we are adding a <location, identifier> pair to the set of occurrences.\n   \n")),(0,a.kt)("p",null,"<2> ",(0,a.kt)("inlineCode",{parentName:"p"},"useStat")," extracts uses from all statement variants."),(0,a.kt)("p",null,"<3> The function ",(0,a.kt)("inlineCode",{parentName:"p"},"uses")," simply applies ",(0,a.kt)("inlineCode",{parentName:"p"},"usesStats")," to the statement part of its program argument."),(0,a.kt)("p",null,"<4> The function ",(0,a.kt)("inlineCode",{parentName:"p"},"defs"),"  has a Pico program as argument and returns a set of occurrences (definitions) of Pico identifiers.\nThe definition consists of a single set comprehension that consists of the following parts:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"*  ` ... \\<- P. stats` enumerates all statements in the program.\n*  `/asgStat(PicoId Id, EXP Exp) \\<- P.stats` uses again a descendant match to find all assignment statements.\n*  For each assignment statement a (location, identifier) pair is added to the result.\n")),(0,a.kt)("h4",{id:"benefits"},"Benefits"))}p.isMDXComponent=!0}}]);