"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[96655],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),s=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,x=m["".concat(i,".").concat(d)]||m[d]||u[d]||l;return n?a.createElement(x,o(o({ref:t},c),{},{components:n})):a.createElement(x,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},48407:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={title:"Manual"},o=void 0,p={unversionedId:"Recipes/Languages/Exp/Combined/Manual/index",id:"Recipes/Languages/Exp/Combined/Manual/index",title:"Manual",description:"Synopsis",source:"@site/docs/Recipes/Languages/Exp/Combined/Manual/index.md",sourceDirName:"Recipes/Languages/Exp/Combined/Manual",slug:"/Recipes/Languages/Exp/Combined/Manual/",permalink:"/docs/Recipes/Languages/Exp/Combined/Manual/",draft:!1,tags:[],version:"current",frontMatter:{title:"Manual"},sidebar:"tutorialSidebar",previous:{title:"Automatic",permalink:"/docs/Recipes/Languages/Exp/Combined/Automatic/"},next:{title:"Concrete",permalink:"/docs/Recipes/Languages/Exp/Concrete/"}},i={},s=[{value:"Synopsis",id:"synopsis",level:4},{value:"Examples",id:"examples",level:4}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"An Exp evaluator that uses a manually written conversion from parse tree to abstract syntax tree."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"First we define a ",(0,r.kt)("inlineCode",{parentName:"p"},"parse")," function for Exp:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"module demo::lang::Exp::Combined::Manual::Parse\nimport demo::lang::Exp::Concrete::WithLayout::Syntax;\nimport ParseTree;\n\ndemo::lang::Exp::Concrete::WithLayout::Syntax::Exp\n parseExp(str txt) = parse(#Exp, txt); \n\n")),(0,r.kt)("p",null,"and test it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Exp::Combined::Manual::Parse;\nok\nrascal>parseExp("2+3");\nExp: (Exp) `2+3`\n')),(0,r.kt)("p",null,"Next, we define a ",(0,r.kt)("inlineCode",{parentName:"p"},"load")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'module demo::lang::Exp::Combined::Manual::Load\n\nimport demo::lang::Exp::Concrete::WithLayout::Syntax;      \u2776  \nimport demo::lang::Exp::Abstract::Syntax;      \u2777  \nimport demo::lang::Exp::Combined::Manual::Parse;      \u2778  \nimport String;\n\ndemo::lang::Exp::Abstract::Syntax::Exp loadExp(str txt) = load(parseExp(txt));      \u2779  \n     \ndemo::lang::Exp::Abstract::Syntax::Exp load((Exp)`<IntegerLiteral l>`)      \u277a  \n       = con(toInt("<l>"));       \ndemo::lang::Exp::Abstract::Syntax::Exp load((Exp)`<Exp e1> * <Exp e2>`) \n       = mul(load(e1), load(e2));  \ndemo::lang::Exp::Abstract::Syntax::Exp load((Exp)`<Exp e1> + <Exp e2>`)\n       = add(load(e1), load(e2)); \ndemo::lang::Exp::Abstract::Syntax::Exp load((Exp)`( <Exp e> )`) \n       = load(e);                    \n\n')),(0,r.kt)("p",null,"Some comments:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u2776  We reuse the previously defined concrete syntax with layout."),(0,r.kt)("li",{parentName:"ul"},"\u2777  We also reuse the previously defined abstract syntax."),(0,r.kt)("li",{parentName:"ul"},"\u2778  Import the ",(0,r.kt)("inlineCode",{parentName:"li"},"Parse")," module defined above."),(0,r.kt)("li",{parentName:"ul"},"\u2779  The top level ",(0,r.kt)("inlineCode",{parentName:"li"},"load")," function that converts a string to an abstract syntax tree."),(0,r.kt)("li",{parentName:"ul"},"\u277a  The conversion from parse tree to abstract syntax tree start here. Note that we\nexplicitly use ",(0,r.kt)("inlineCode",{parentName:"li"},"demo::lang::Exp::Abstract::Syntax::Exp")," in these\nrules to distinguish from ",(0,r.kt)("inlineCode",{parentName:"li"},"demo::lang::Exp::Concrete::WithLayout::Syntax::Exp"),".")),(0,r.kt)("p",null,"Let's try it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Exp::Combined::Manual::Load;\nok\nrascal>loadExp("2+3");\nExp: add(\n  con(2),\n  con(3))\n')),(0,r.kt)("p",null,"What remains is to write the interpreter using the above components:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'module demo::lang::Exp::Combined::Manual::Eval\n\nimport demo::lang::Exp::Abstract::Eval;\nimport demo::lang::Exp::Combined::Manual::Load;\n\npublic int eval(str txt) = eval(loadExp(txt));\ntest bool tstEval2() = eval("7*3") == 21;\ntest bool tstEval3() = eval("7+3") == 10;\ntest bool tstEval4() = eval("3+4*5") == 23;\n\n')),(0,r.kt)("p",null,"Here is how it works:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Exp::Combined::Manual::Eval;\nok\nrascal>eval("2+3");\nint: 5\n')))}u.isMDXComponent=!0}}]);