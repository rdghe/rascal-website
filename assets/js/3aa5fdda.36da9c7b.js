"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[34487],{3905:(n,e,t)=>{t.d(e,{Zo:()=>m,kt:()=>d});var a=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=a.createContext({}),i=function(n){var e=a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},m=function(n){var e=i(n.components);return a.createElement(l.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,l=n.parentName,m=s(n,["components","mdxType","originalType","parentName"]),p=i(t),d=o,g=p["".concat(l,".").concat(d)]||p[d]||u[d]||r;return t?a.createElement(g,c(c({ref:e},m),{},{components:t})):a.createElement(g,c({ref:e},m))}));function d(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,c=new Array(r);c[0]=p;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:o,c[1]=s;for(var i=2;i<r;i++)c[i]=t[i];return a.createElement.apply(null,c)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},75070:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>i});var a=t(83117),o=(t(67294),t(3905));const r={title:"Load AST"},c=void 0,s={unversionedId:"Recipes/Languages/Func/LoadAST/index",id:"Recipes/Languages/Func/LoadAST/index",title:"Load AST",description:"Synopsis",source:"@site/docs/Recipes/Languages/Func/LoadAST/index.md",sourceDirName:"Recipes/Languages/Func/LoadAST",slug:"/Recipes/Languages/Func/LoadAST/",permalink:"/docs/Recipes/Languages/Func/LoadAST/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Recipes/Languages/Func/LoadAST/index.md",tags:[],version:"current",frontMatter:{title:"Load AST"},sidebar:"tutorialSidebar",previous:{title:"Eval3",permalink:"/docs/Recipes/Languages/Func/Eval3/"},next:{title:"Parse",permalink:"/docs/Recipes/Languages/Func/Parse/"}},l={},i=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],m={toc:i};function u(n){let{components:e,...t}=n;return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"synopsis"},"Synopsis"),(0,o.kt)("p",null,"Parse Func program from string or file and convert to an abstract syntax tree."),(0,o.kt)("h4",{id:"description"},"Description"),(0,o.kt)("p",null,"To simplify later processing, Func programs are converted to an abstract syntax tree."),(0,o.kt)("h4",{id:"examples"},"Examples"),(0,o.kt)("p",null,"The concrete syntax for Func is described in ",(0,o.kt)("a",{parentName:"p",href:"../../../../Recipes/Languages/Func/ConcreteSyntax"},"ConcreteSyntax")," and its\nabstract syntax in ",(0,o.kt)("a",{parentName:"p",href:"../../../../Recipes/Languages/Func/AbstractSyntax"},"AbstractSyntax"),".\nRather than manually writing conversion rules from Func parse trees to Func abstract syntax trees\nwe use our secret weapon: ",(0,o.kt)("a",{parentName:"p",href:"/docs/Library/ParseTree#ParseTree-implode"},"implode")," that performs the mapping for us.\nAs you see when you compare the concrete and abstract syntax, the ground work has already been done\nby appropriately labelling concrete rules with constructor names of the abstract syntax."),(0,o.kt)("p",null,"Here is the code for the ",(0,o.kt)("inlineCode",{parentName:"p"},"load")," funcion:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rascal"},"// tag::module[]\nmodule demo::lang::Func::Load\n\nimport demo::lang::Func::Func;\nimport demo::lang::Func::AST;\nimport demo::lang::Func::Parse;\n\nimport ParseTree;\n\ndemo::lang::Func::AST::Prog implode(demo::lang::Func::Func::Prog p) = \n    implode(#demo::lang::Func::AST::Prog, p);\n\ndemo::lang::Func::AST::Prog load(loc l) = implode(parse(l));\ndemo::lang::Func::AST::Prog load(str s) = implode(parse(s));\n// end::module[]\n\n")),(0,o.kt)("p",null,"This looks simple but also slightly intimidating due to the many qualified names.\nThe issue is that the names in the concrete and abstract syntax are (on purpose) overloaded.\nA name like ",(0,o.kt)("inlineCode",{parentName:"p"},"Prog")," can be the one from the concrete syntax(i.e., ",(0,o.kt)("inlineCode",{parentName:"p"},"demo::lang::Func::Func::Prog"),")\nor the one from the abstract syntax (i.e., ",(0,o.kt)("inlineCode",{parentName:"p"},"demo::lang::Func::AST::Prog"),")."),(0,o.kt)("p",null,"For instance, the local version of ",(0,o.kt)("inlineCode",{parentName:"p"},"implode")," defined here get a concrete ",(0,o.kt)("inlineCode",{parentName:"p"},"Prog")," as argument and returns an abstract one.\nBoth ",(0,o.kt)("inlineCode",{parentName:"p"},"load")," function return an abstract ",(0,o.kt)("inlineCode",{parentName:"p"},"Prog"),"."),(0,o.kt)("p",null,"Let's try this on example ",(0,o.kt)("inlineCode",{parentName:"p"},"F0"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rascal"},"fact(n) = if n <= 1 then\n             1 \n          else \n             n * fact(n-1)\n          end\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Func::Load;\nok\nrascal>import demo::lang::Func::programs::F0;\nok\nrascal>load(F0);\nProg: prog(\n  [func(\n      "fact",\n      ["n"],\n      cond(\n        leq(\n          var(\n            "n",\n            location=|unknown:///|(13,1,<1,13>,<1,14>),\n            comments=()),\n          nat(\n            1,\n            location=|unknown:///|(18,1,<1,18>,<1,19>),\n            comments=()),\n          location=|unknown:///|(13,6,<1,13>,<1,19>),\n          comments=()),\n        nat(\n          1,\n          location=|unknown:///|(38,1,<2,13>,<2,14>),\n          comments=()),\n        mul(\n          var(\n            "n",\n            location=|unknown:///|(70,1,<4,13>,<4,14>),\n            comments=()),\n          call(\n            "fact",\n            [sub(\n                var(\n                  "n",\n                  location=|unknown:///|(79,1,<4,22>,<4,23>),\n                  comments=()),\n                nat(\n                  1,\n                  location=|unknown:///|(81,1,<4,24>,<4,25>),\n                  comments=()),\n                location=|unknown:///|(79,3,<4,22>,<4,25>),\n                comments=())],\n            location=|unknown:///|(74,9,<4,17>,<4,26>),\n            comments=()),\n          location=|unknown:///|(70,13,<4,13>,<4,26>),\n          comments=()),\n        location=|unknown:///|(10,87,<1,10>,<5,13>),\n        comments=()),\n      location=|unknown:///|(0,97,<1,0>,<5,13>),\n      comments=())],\n  location=|unknown:///|(0,97,<1,0>,<5,13>),\n  comments=())\n')),(0,o.kt)("p",null,"We get the original program and its ",(0,o.kt)("strong",{parentName:"p"},"abstract syntax tree")," of type ",(0,o.kt)("inlineCode",{parentName:"p"},"Prog")," back.\nIn case of doubt, compare this with the result in ",(0,o.kt)("a",{parentName:"p",href:"../../../../Recipes/Languages/Func/Parse"},"Parse")," where we did obtain a parse tree.\nNext, we try the same from a file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>load(|std:///demo/lang/Func/programs/F0.func|);\nProg: prog(\n  [func(\n      "fact",\n      ["n"],\n      cond(\n        leq(\n          var(\n            "n",\n            location=|std:///demo/lang/Func/programs/F0.func|(13,1,<1,13>,<1,14>),\n            comments=()),\n          nat(\n            1,\n            location=|std:///demo/lang/Func/programs/F0.func|(18,1,<1,18>,<1,19>),\n            comments=()),\n          location=|std:///demo/lang/Func/programs/F0.func|(13,6,<1,13>,<1,19>),\n          comments=()),\n        nat(\n          1,\n          location=|std:///demo/lang/Func/programs/F0.func|(38,1,<2,13>,<2,14>),\n          comments=()),\n        mul(\n          var(\n            "n",\n            location=|std:///demo/lang/Func/programs/F0.func|(70,1,<4,13>,<4,14>),\n            comments=()),\n          call(\n            "fact",\n            [sub(\n                var(\n                  "n",\n                  location=|std:///demo/lang/Func/programs/F0.func|(79,1,<4,22>,<4,23>),\n                  comments=()),\n                nat(\n                  1,\n                  location=|std:///demo/lang/Func/programs/F0.func|(81,1,<4,24>,<4,25>),\n                  comments=()),\n                location=|std:///demo/lang/Func/programs/F0.func|(79,3,<4,22>,<4,25>),\n                comments=())],\n            location=|std:///demo/lang/Func/programs/F0.func|(74,9,<4,17>,<4,26>),\n            comments=()),\n          location=|std:///demo/lang/Func/programs/F0.func|(70,13,<4,13>,<4,26>),\n          comments=()),\n        location=|std:///demo/lang/Func/programs/F0.func|(10,87,<1,10>,<5,13>),\n        comments=()),\n      location=|std:///demo/lang/Func/programs/F0.func|(0,97,<1,0>,<5,13>),\n      comments=())],\n  location=|std:///demo/lang/Func/programs/F0.func|(0,97,<1,0>,<5,13>),\n  comments=())\n')))}u.isMDXComponent=!0}}]);