"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[81380],{3905:(e,t,n)=>{n.d(t,{Zo:()=>o,kt:()=>y});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=i.createContext({}),c=function(e){var t=i.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},o=function(e){var t=c(e.components);return i.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,o=r(e,["components","mdxType","originalType","parentName"]),m=c(n),y=a,d=m["".concat(u,".").concat(y)]||m[y]||p[y]||s;return n?i.createElement(d,l(l({ref:t},o),{},{components:n})):i.createElement(d,l({ref:t},o))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=m;var r={};for(var u in t)hasOwnProperty.call(t,u)&&(r[u]=t[u]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var c=2;c<s;c++)l[c]=n[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},73559:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var i=n(87462),a=(n(67294),n(3905));const s={title:"module analysis::statistics::Frequency"},l=void 0,r={unversionedId:"Library/analysis/statistics/Frequency",id:"Library/analysis/statistics/Frequency",title:"module analysis::statistics::Frequency",description:"Usage",source:"@site/docs/Library/analysis/statistics/Frequency.md",sourceDirName:"Library/analysis/statistics",slug:"/Library/analysis/statistics/Frequency",permalink:"/docs/Library/analysis/statistics/Frequency",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Library/analysis/statistics/Frequency.md",tags:[],version:"current",frontMatter:{title:"module analysis::statistics::Frequency"},sidebar:"tutorialSidebar",previous:{title:"module analysis::statistics::Descriptive",permalink:"/docs/Library/analysis/statistics/Descriptive"},next:{title:"module analysis::statistics::Inference",permalink:"/docs/Library/analysis/statistics/Inference"}},u={},c=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"function distribution",id:"analysis-statistics-Frequency-distribution",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Examples",id:"examples",level:4},{value:"function cumFreq",id:"analysis-statistics-Frequency-cumFreq",level:2},{value:"Synopsis",id:"synopsis-2",level:4},{value:"Description",id:"description-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"function cumPct",id:"analysis-statistics-Frequency-cumPct",level:2},{value:"Synopsis",id:"synopsis-3",level:4},{value:"Description",id:"description-2",level:4},{value:"function pct",id:"analysis-statistics-Frequency-pct",level:2},{value:"Synopsis",id:"synopsis-4",level:4},{value:"Description",id:"description-3",level:4},{value:"Examples",id:"examples-2",level:4}],o={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"import analysis::statistics::Frequency;")),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Frequency distributions."),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"Counting the frequency of events is usually the first step in statistical analysis of raw data.\nIt involves choosing what are the events to count, how to group them in certain\ncategories and then quickly counting the frequency of each occurring event. "),(0,a.kt)("p",null,"This module helps by providing commonly used functions for the purpose of counting events.\nThe output of these functions can be used to draw (cumulative) histograms, or they can\ndirectly be used for further statistical processing and visualisation. "),(0,a.kt)("h2",{id:"analysis-statistics-Frequency-distribution"},"function distribution"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"map[&T, int] distribution(rel[&U event, &T bucket] input)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"map[&T <: num, int] distribution(rel[&U event, &T <: num bucket] input, &T <: num bucketSize)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"map[&T, int] distribution(map[&U event, &T bucket] input)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"map[&T <: num, int] distribution(map[&U event, &T <: num bucket] input, &T <: num bucketSize)"))),(0,a.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,a.kt)("p",null,"Compute a distribution: count how many times events are mapped to which bucket."),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import analysis::statistics::Frequency;\nok\nrascal>distribution({<"chicken","animal">,<"bear","animal">,<"oak","plant">,<"tulip","plant">});\nmap[str, int]: ("plant":2,"animal":2)\nrascal>distribution({<"alice",2>,<"bob",3>,<"claire",5>},5);\nmap[int, int]: (5:2,0:1)\n')),(0,a.kt)("h2",{id:"analysis-statistics-Frequency-cumFreq"},"function cumFreq"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int cumFreq(list[value] values, num n)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int cumFreq(list[value] values, str s)"))),(0,a.kt)("h4",{id:"synopsis-2"},"Synopsis"),(0,a.kt)("p",null,"Cumulative frequency of values less than or equal to a given value."),(0,a.kt)("h4",{id:"description-1"},"Description"),(0,a.kt)("p",null,"Returns the cumulative frequency of values less than or equal to a given numeric or string value.\nReturns 0 if the value is not comparable to the values set."),(0,a.kt)("h4",{id:"examples-1"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import analysis::statistics::Frequency;\nok\nrascal>D = [1, 2, 1, 1, 3, 5];\nlist[int]: [1,2,1,1,3,5]\nrascal>cumFreq(D, 1);\nint: 3\nrascal>cumFreq(D, 2);\nint: 4\nrascal>cumFreq(D, 10);\nint: 6\n")),(0,a.kt)("h2",{id:"analysis-statistics-Frequency-cumPct"},"function cumPct"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"num cumPct(list[value] values, num n)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"num cumPct(list[value] values, str s)"))),(0,a.kt)("h4",{id:"synopsis-3"},"Synopsis"),(0,a.kt)("p",null,"Cumulative percentage of values less than or equal to a given value."),(0,a.kt)("h4",{id:"description-2"},"Description"),(0,a.kt)("p",null,"Returns the cumulative percentage of values less than or equal to v (as a proportion between 0 and 1)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import analysis::statistics::Frequency;\nok\nrascal>D = [1, 2, 1, 1, 3, 5];\nlist[int]: [1,2,1,1,3,5]\nrascal>cumPct(D, 1);\nnum: 0.5\nrascal>cumPct(D, 2);\nnum: 0.6666666666666666\nrascal>cumPct(D, 10);\nnum: 1.0\n")),(0,a.kt)("h2",{id:"analysis-statistics-Frequency-pct"},"function pct"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"num pct(list[value] values, num n)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"num pct(list[value] values, str s)"))),(0,a.kt)("h4",{id:"synopsis-4"},"Synopsis"),(0,a.kt)("p",null,"Percentage of values that are equal to a given value."),(0,a.kt)("h4",{id:"description-3"},"Description"),(0,a.kt)("p",null,"Returns the percentage of values that are equal to v (as a proportion between 0 and 1)."),(0,a.kt)("h4",{id:"examples-2"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import analysis::statistics::Frequency;\nok\nrascal>D = [1, 2, 1, 1, 3, 5];\nlist[int]: [1,2,1,1,3,5]\nrascal>pct(D, 1);\nnum: 0.5\nrascal>pct(D, 2);\nnum: 0.16666666666666666\nrascal>pct(D, 10);\nnum: 0.0\n")))}p.isMDXComponent=!0}}]);