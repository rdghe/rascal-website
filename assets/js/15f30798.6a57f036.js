"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[50110],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),l=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return i.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return n?i.createElement(f,o(o({ref:t},c),{},{components:n})):i.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var l=2;l<a;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},25707:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var i=n(87462),r=(n(67294),n(3905));const a={title:"Rewriting",sidebar_position:11},o=void 0,p={unversionedId:"RascalConcepts/Rewriting/index",id:"RascalConcepts/Rewriting/index",title:"Rewriting",description:"Synopsis",source:"@site/docs/RascalConcepts/Rewriting/index.md",sourceDirName:"RascalConcepts/Rewriting",slug:"/RascalConcepts/Rewriting/",permalink:"/docs/RascalConcepts/Rewriting/",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{title:"Rewriting",sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Syntax Definition and Parsing",permalink:"/docs/RascalConcepts/SyntaxDefinitionAndParsing/"},next:{title:"IDE Construction",permalink:"/docs/RascalConcepts/IDEConstruction/"}},s={},l=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],c={toc:l};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Rewriting using pattern-directed invocation"),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"A rewrite rule is a recipe on how to simplify values.\nRemember: (",(0,r.kt)("em",{parentName:"p"},"a")," + ",(0,r.kt)("em",{parentName:"p"},"b"),")^2^ = ",(0,r.kt)("em",{parentName:"p"},"a"),"^2^ + 2 ",(0,r.kt)("em",{parentName:"p"},"ab")," + ",(0,r.kt)("em",{parentName:"p"},"b"),"^2^?\nA rewrite rule has a pattern as left-hand side -- here: (",(0,r.kt)("em",{parentName:"p"},"a")," + ",(0,r.kt)("em",{parentName:"p"},"b"),")^2^ -- and a replacement as\nright-hand side -- here: ",(0,r.kt)("em",{parentName:"p"},"a"),"^2^ + 2 ",(0,r.kt)("em",{parentName:"p"},"ab")," + ",(0,r.kt)("em",{parentName:"p"},"b"),"^2^.\nGiven a value and a set of rewrite rules the patterns are tried on every subpart of the value and replacements are made if a match is successful. This is repeated as long as some pattern matches."),(0,r.kt)("p",null,"Rascal has ancestors, notably ",(0,r.kt)("a",{parentName:"p",href:"http://www.meta-environment.org/"},"ASF+SDF"),", where rewriting was the most important computation mechanism.\nIn Rascal, rewriting can be achieved using pattern-directed invocation,\nsee ",(0,r.kt)("a",{parentName:"p",href:"/docs/Rascal/Declarations/Function/"},"Function Declaration"),",\npossibly combined with a ",(0,r.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/Visit/"},"Visit")," statement."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"In a package for symbolic differentiation it is desirable to keep expressions in simplified form in order\nto avoid intermediate results like ",(0,r.kt)("inlineCode",{parentName:"p"},"add(product(con(1), x), mul(con(0), y))")," that can be simplified to ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),".\nThe following definitions achieve this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"Exp simp(add(con(n), con(m))) = con(n + m);       \u2776  \nExp simp(mul(con(n), con(m))) = con(n * m);\n\nExp simp(mul(con(1), Exp e))  = e;\nExp simp(mul(Exp e, con(1)))  = e;\nExp simp(mul(con(0), Exp e))  = con(0);\nExp simp(mul(Exp e, con(0)))  = con(0);\n\nExp simp(add(con(0), Exp e))  = e;\nExp simp(add(Exp e, con(0)))  = e;\n\ndefault Exp simp(Exp e)       = e;                 \u2777  \n\nExp simplify(Exp e){                               \u2778  \n  return bottom-up visit(e){\n           case Exp e1 => simp(e1)\n         }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2776  Definitions of the function ",(0,r.kt)("inlineCode",{parentName:"p"},"simp")," are given with different patterns as formal argument.\nEach definition is responsible for one particular simplification\n(here is where the similarity with rewrite rules surfaces).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2777  A default for ",(0,r.kt)("inlineCode",{parentName:"p"},"simp")," is given: if no other definition applies, the default one is used.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u2778  The actual ",(0,r.kt)("inlineCode",{parentName:"p"},"simplify")," function: it performs a bottom up visit of the expression, replacing each subexpression by\na simplified version."))),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/Recipes/Common/Derivative/"},"Derivative")," for a full explanation of this example."))}m.isMDXComponent=!0}}]);