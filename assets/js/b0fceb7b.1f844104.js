"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[96655],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),i=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=i(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=i(t),m=r,x=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(x,l(l({ref:n},c),{},{components:t})):a.createElement(x,l({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var i=2;i<o;i++)l[i]=t[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},48407:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>i});var a=t(87462),r=(t(67294),t(3905));const o={title:"Manual"},l=void 0,p={unversionedId:"Recipes/Languages/Exp/Combined/Manual/index",id:"Recipes/Languages/Exp/Combined/Manual/index",title:"Manual",description:"Synopsis",source:"@site/docs/Recipes/Languages/Exp/Combined/Manual/index.md",sourceDirName:"Recipes/Languages/Exp/Combined/Manual",slug:"/Recipes/Languages/Exp/Combined/Manual/",permalink:"/docs/Recipes/Languages/Exp/Combined/Manual/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Recipes/Languages/Exp/Combined/Manual/index.md",tags:[],version:"current",frontMatter:{title:"Manual"},sidebar:"tutorialSidebar",previous:{title:"Automatic",permalink:"/docs/Recipes/Languages/Exp/Combined/Automatic/"},next:{title:"Concrete",permalink:"/docs/Recipes/Languages/Exp/Concrete/"}},s={},i=[{value:"Synopsis",id:"synopsis",level:4},{value:"Examples",id:"examples",level:4}],c={toc:i};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"An Exp evaluator that uses a manually written conversion from parse tree to abstract syntax tree."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"First we define a ",(0,r.kt)("inlineCode",{parentName:"p"},"parse")," function for Exp:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"module demo::lang::Exp::Combined::Manual::Parse\nimport demo::lang::Exp::Concrete::WithLayout::Syntax;\nimport ParseTree;\n\ndemo::lang::Exp::Concrete::WithLayout::Syntax::Exp\n parseExp(str txt) = parse(#Exp, txt); \n\n")),(0,r.kt)("p",null,"and test it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Exp::Combined::Manual::Parse;\nok\nrascal>parseExp("2+3");\nExp: (Exp) `2+3`\n')),(0,r.kt)("p",null,"Next, we define a ",(0,r.kt)("inlineCode",{parentName:"p"},"load")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'module demo::lang::Exp::Combined::Manual::Load\n\nimport demo::lang::Exp::Concrete::WithLayout::Syntax; // <1>\nimport demo::lang::Exp::Abstract::Syntax; // <2>\nimport demo::lang::Exp::Combined::Manual::Parse; // <3>\nimport String;\n\ndemo::lang::Exp::Abstract::Syntax::Exp loadExp(str txt) = load(parseExp(txt)); // <4>\n     \ndemo::lang::Exp::Abstract::Syntax::Exp load((Exp)`<IntegerLiteral l>`) // <5>\n       = con(toInt("<l>"));       \ndemo::lang::Exp::Abstract::Syntax::Exp load((Exp)`<Exp e1> * <Exp e2>`) \n       = mul(load(e1), load(e2));  \ndemo::lang::Exp::Abstract::Syntax::Exp load((Exp)`<Exp e1> + <Exp e2>`)\n       = add(load(e1), load(e2)); \ndemo::lang::Exp::Abstract::Syntax::Exp load((Exp)`( <Exp e> )`) \n       = load(e);                    \n\n')),(0,r.kt)("p",null,"Some comments:"),(0,r.kt)("p",null,"<1> We reuse the previously defined concrete syntax with layout.\n<2> We also reuse the previously defined abstract syntax.\n<3> Import the ",(0,r.kt)("inlineCode",{parentName:"p"},"Parse")," module defined above.\n<4> The top level ",(0,r.kt)("inlineCode",{parentName:"p"},"load")," function that converts a string to an abstract syntax tree.\n<5> The conversion from parse tree to abstract syntax tree start here. Note that we\nexplicitly use ",(0,r.kt)("inlineCode",{parentName:"p"},"demo::lang::Exp::Abstract::Syntax::Exp")," in these\nrules to distinguish from ",(0,r.kt)("inlineCode",{parentName:"p"},"demo::lang::Exp::Concrete::WithLayout::Syntax::Exp"),"."),(0,r.kt)("p",null,"Let's try it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Exp::Combined::Manual::Load;\nok\nrascal>loadExp("2+3");\nExp: add(\n  con(2),\n  con(3))\n')),(0,r.kt)("p",null,"What remains is to write the interpreter using the above components:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'module demo::lang::Exp::Combined::Manual::Eval\n\nimport demo::lang::Exp::Abstract::Eval;\nimport demo::lang::Exp::Combined::Manual::Load;\n\npublic int eval(str txt) = eval(loadExp(txt));\ntest bool tstEval2() = eval("7*3") == 21;\ntest bool tstEval3() = eval("7+3") == 10;\ntest bool tstEval4() = eval("3+4*5") == 23;\n\n')),(0,r.kt)("p",null,"Here is how it works:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Exp::Combined::Manual::Eval;\nok\nrascal>eval("2+3");\nint: 5\n')))}u.isMDXComponent=!0}}]);