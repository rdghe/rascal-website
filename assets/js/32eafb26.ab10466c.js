"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[91107],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),f=a,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},57028:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={title:"Field Projection",keywords:["<",">"]},i=void 0,s={unversionedId:"Rascal/Expressions/Operators/FieldProjection/index",id:"Rascal/Expressions/Operators/FieldProjection/index",title:"Field Projection",description:"Synopsis",source:"@site/docs/Rascal/Expressions/Operators/FieldProjection/index.md",sourceDirName:"Rascal/Expressions/Operators/FieldProjection",slug:"/Rascal/Expressions/Operators/FieldProjection/",permalink:"/docs/Rascal/Expressions/Operators/FieldProjection/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Rascal/Expressions/Operators/FieldProjection/index.md",tags:[],version:"current",frontMatter:{title:"Field Projection",keywords:["<",">"]},sidebar:"tutorialSidebar",previous:{title:"Field Assignment",permalink:"/docs/Rascal/Expressions/Operators/FieldAssignment/"},next:{title:"Reducer",permalink:"/docs/Rascal/Expressions/Reducer/"}},l={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Projection of tuple."),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Exp < Field<sub>1</sub>, Field<sub>2</sub> ... >")),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Exp")," should evaluate to a tuple or relation, and ",(0,a.kt)("em",{parentName:"p"},"Field"),"~i~ should be a field name or an integer constant\nthat refers to elements in the order in which they occur in the original value (counting from 0). "),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Suppose we have a relation with traffic information that records the name of the day, the day number, and the length of the traffic jams at that day."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>rel[str day, int daynum, int length] Traffic = \n>>>>>>>{<"mon", 1, 100>, <"tue", 2, 150>, <"wed", 3, 125>, \n>>>>>>> <"thur", 4, 110>, <"fri", 5, 90>};\nrel[str day,int daynum,int length]: {\n  <"thur",4,110>,\n  <"mon",1,100>,\n  <"fri",5,90>,\n  <"wed",3,125>,\n  <"tue",2,150>\n}\nrascal>Traffic<length,daynum>;\nrel[int length,int daynum]: {\n  <110,4>,\n  <125,3>,\n  <90,5>,\n  <150,2>,\n  <100,1>\n}\nrascal>Traffic<2,day>;\nrel[int length,str day]: {\n  <110,"thur">,\n  <125,"wed">,\n  <90,"fri">,\n  <150,"tue">,\n  <100,"mon">\n}\n')),(0,a.kt)("p",null,"Field projection thus selects parts from a larger value that has a fixed number of parts. The selection is based on position and not on value and can be used to completely reorder or remove the parts of a larger value."))}u.isMDXComponent=!0}}]);