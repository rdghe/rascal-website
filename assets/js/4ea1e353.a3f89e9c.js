"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[86990],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),l=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=l(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(a),m=n,f=d["".concat(o,".").concat(m)]||d[m]||u[m]||i;return a?r.createElement(f,s(s({ref:t},p),{},{components:a})):r.createElement(f,s({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=d;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:n,s[1]=c;for(var l=2;l<i;l++)s[l]=a[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},41029:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=a(83117),n=(a(67294),a(3905));const i={title:"Static Semantics"},s=void 0,c={unversionedId:"Rascalopedia/StaticSemantics/index",id:"Rascalopedia/StaticSemantics/index",title:"Static Semantics",description:"Synopsis",source:"@site/docs/Rascalopedia/StaticSemantics/index.md",sourceDirName:"Rascalopedia/StaticSemantics",slug:"/Rascalopedia/StaticSemantics/",permalink:"/docs/Rascalopedia/StaticSemantics/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascalopedia/StaticSemantics/index.md",tags:[],version:"current",frontMatter:{title:"Static Semantics"},sidebar:"tutorialSidebar",previous:{title:"Software Metric",permalink:"/docs/Rascalopedia/SoftwareMetric/"},next:{title:"Syntax",permalink:"/docs/Rascalopedia/Syntax/"}},o={},l=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Usage",id:"usage",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],p={toc:l};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"synopsis"},"Synopsis"),(0,n.kt)("p",null,"Description of the properties of a program that can be determined/checked before it is executed."),(0,n.kt)("h4",{id:"syntax"},"Syntax"),(0,n.kt)("h4",{id:"types"},"Types"),(0,n.kt)("h4",{id:"function"},"Function"),(0,n.kt)("h4",{id:"usage"},"Usage"),(0,n.kt)("h4",{id:"description"},"Description"),(0,n.kt)("p",null,"The static semantics of a program describe all properties that can be determined before the program is executed.\nA ",(0,n.kt)("a",{parentName:"p",href:"/docs//Rascalopedia/Typechecker"},"Typechecker")," is a tool that checks the properties of a program as described by its static semantics."),(0,n.kt)("p",null,"Static semantics describes properties that are relevant before a program is executed and\ndiffers from ",(0,n.kt)("a",{parentName:"p",href:"/docs//Rascalopedia/DynamicSemantics"},"Dynamic Semantics")," that\ndescribes the execution behaviour itself."),(0,n.kt)("h4",{id:"examples"},"Examples"),(0,n.kt)("p",null,"Examples of static semantic properties include:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The proper use of types."),(0,n.kt)("li",{parentName:"ul"},"The proper use of names.")),(0,n.kt)("p",null,"Language with substantial static semantics: Java, Haskell, Rascal.\nLanguages with only dynamic semantics: Python, Ruby."),(0,n.kt)("h4",{id:"benefits"},"Benefits"))}u.isMDXComponent=!0}}]);