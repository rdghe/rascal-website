"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[24895],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var i=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function u(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=i.createContext({}),o=function(e){var t=i.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=o(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),p=o(a),f=n,b=p["".concat(s,".").concat(f)]||p[f]||c[f]||r;return a?i.createElement(b,l(l({ref:t},d),{},{components:a})):i.createElement(b,l({ref:t},d))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=p;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:n,l[1]=u;for(var o=2;o<r;o++)l[o]=a[o];return i.createElement.apply(null,l)}return i.createElement.apply(null,a)}p.displayName="MDXCreateElement"},95338:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>u,toc:()=>o});var i=a(83117),n=(a(67294),a(3905));const r={title:"util::UUID"},l=void 0,u={unversionedId:"Library/util/UUID",id:"Library/util/UUID",title:"util::UUID",description:"Usage",source:"@site/docs/Library/util/UUID.md",sourceDirName:"Library/util",slug:"/Library/util/UUID",permalink:"/docs/Library/util/UUID",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/util/UUID.md",tags:[],version:"current",frontMatter:{title:"util::UUID"},sidebar:"tutorialSidebar",previous:{title:"util::Test",permalink:"/docs/Library/util/Test"},next:{title:"util::Webserver",permalink:"/docs/Library/util/Webserver"}},s={},o=[{value:"Usage",id:"usage",level:4},{value:"function uuid",id:"util-UUID-uuid",level:2},{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4},{value:"Pitfalls",id:"pitfalls",level:4},{value:"function uuidi",id:"util-UUID-uuidi",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Pitfalls",id:"pitfalls-1",level:4}],d={toc:o};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,i.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"usage"},"Usage"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"import util::UUID;")),(0,n.kt)("h2",{id:"util-UUID-uuid"},"function uuid"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"loc uuid()"))),(0,n.kt)("h4",{id:"synopsis"},"Synopsis"),(0,n.kt)("p",null,"generates a unique identifier shaped as a ",(0,n.kt)("inlineCode",{parentName:"p"},"loc")),(0,n.kt)("h4",{id:"description"},"Description"),(0,n.kt)("p",null,"This function generates a UUID, see ",(0,n.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Universally_unique_identifier"},"http://en.wikipedia.org/wiki/Universally_unique_identifier"),".\nSince UUIDs are useful to assign an opaque and unique identity to data, the function returns\na ",(0,n.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/Values/Location"},"Location")," (which is the preferred representation for encoding identities in Rascal)"),(0,n.kt)("h4",{id:"examples"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import util::UUID;\nok\n")),(0,n.kt)("p",null,"The uuid() function generates a location with the authority showing the literal canonical UUID string"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>uuid()\nloc: |uuid://410e6471-8dcc-47bb-8cf0-b1374ca3b4c7|\n")),(0,n.kt)("p",null,"Use it to relate identies to data objects, as in this example which adds a field to a relation:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>myData = { <i,i*i> | i <- [1..11] }; \nrel[int,int]: {\n  <10,100>,\n  <7,49>,\n  <1,1>,\n  <3,9>,\n  <9,81>,\n  <2,4>,\n  <4,16>,\n  <6,36>,\n  <5,25>,\n  <8,64>\n}\nrascal>rel[int n, int square, loc id] myUniqueData = { <i,j,uuid()> | <i,j> <- myData };\nrel[int n,int square,loc id]: {\n  <2,4,|uuid://e585de30-57e1-4768-96a5-8342ddfd6e54|>,\n  <4,16,|uuid://d6aa41d5-7c0a-4a39-9b35-0a8b7d67b620|>,\n  <7,49,|uuid://c762e13e-f19d-4355-b62b-41832df51f53|>,\n  <1,1,|uuid://625d1bea-a53f-48ea-b3c2-cecc4c778666|>,\n  <5,25,|uuid://3fc36de8-d05f-4316-9196-a71edb4df55d|>,\n  <6,36,|uuid://0713af36-ed04-425d-9c25-b289665ace1f|>,\n  <8,64,|uuid://6a77ba2f-15cd-452a-a50e-11a111d15af2|>,\n  <9,81,|uuid://bf905df4-20fb-4b9a-9355-b86b66de66c8|>,\n  <10,100,|uuid://d146e4f0-0e50-49db-a9fe-1f68d41169cb|>,\n  <3,9,|uuid://4836a156-3704-47f8-8c3c-92460a747b12|>\n}\nrascal>map[tuple[int i, int j] t, loc id] myUniqueMap = (<i,j>:uuid() | <i,j> <- myData );\nmap[tuple[int i,int j] t, loc id]: (\n  <6,36>:|uuid://a06153b0-ad85-4353-a09f-7ba90019614b|,\n  <2,4>:|uuid://66a0c4c0-6bca-49a6-8b8f-aa3dcbd24205|,\n  <7,49>:|uuid://72ab1a43-9a66-4ce2-846a-a81c721c4bcb|,\n  <9,81>:|uuid://31f597cb-ff72-4028-b593-b06ed04399bc|,\n  <8,64>:|uuid://f254a6ae-f0b4-4a5d-883b-1e21985bd7b8|,\n  <5,25>:|uuid://c7376f83-8a9c-4e3b-bc77-b9acf3c48194|,\n  <4,16>:|uuid://922af4eb-2816-4d6e-8197-f8ae2de38154|,\n  <1,1>:|uuid://e97d1f5c-370a-47fb-9c38-3ddbd4d31425|,\n  <10,100>:|uuid://1cd33ed5-2603-4830-838d-eccd0b06211d|,\n  <3,9>:|uuid://2545fd54-9548-44b5-b83e-98a06870986d|\n)\n")),(0,n.kt)("p",null,"Note how uuid() should always generate a fresh value:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>assert uuid() != uuid(); \nbool: true\n")),(0,n.kt)("h4",{id:"benefits"},"Benefits"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Rascal/Expressions/Values/Location"},"Location"),"s are used for identifying program elements or model elements in Rascal. The uuid() function provides\nan quick-and-easy way of acquiring such an identity without having to design a naming scheme.")),(0,n.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"UUIDs are a quick and dirty way of identifying data which may lead to hard to debug code. A naming scheme for ",(0,n.kt)("a",{parentName:"li",href:"/docs/Rascal/Expressions/Values/Location"},"Location"),"s is better because it generates human readable\n",(0,n.kt)("a",{parentName:"li",href:"/docs/Rascal/Expressions/Values/Location"},"Location"),"s which carry meaning. For example consider the difference in readability between these two values:\n",(0,n.kt)("inlineCode",{parentName:"li"},"|uuid://47fdcd64-4fd0-41a1-8aa3-61c5b272c3fc|")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"|java+class:///java/lang/Object|"),". Both may lead to the same\nresults in your computation, but if we print either of them out, one of them is opaque and the other is transparent. A transparent naming scheme is preferable for\ndebugging purposes.")),(0,n.kt)("h2",{id:"util-UUID-uuidi"},"function uuidi"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"int uuidi()"))),(0,n.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,n.kt)("p",null,"see ","[uuid]",", this function does the same except return the UUID as an int."),(0,n.kt)("h4",{id:"pitfalls-1"},"Pitfalls"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"beware that this integer is almost guaranteed to use 128 bits, so communicating it outside of\nRascal should not be done via a Java 32-bit integer.")))}c.isMDXComponent=!0}}]);