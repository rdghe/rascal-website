"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[93123],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,y=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(y,o(o({ref:t},p),{},{components:r})):n.createElement(y,o({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},11200:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var n=r(83117),a=(r(67294),r(3905));const i={title:"Typechecker"},o=void 0,c={unversionedId:"Rascalopedia/Typechecker/index",id:"Rascalopedia/Typechecker/index",title:"Typechecker",description:"Synopsis",source:"@site/docs/Rascalopedia/Typechecker/index.md",sourceDirName:"Rascalopedia/Typechecker",slug:"/Rascalopedia/Typechecker/",permalink:"/docs/Rascalopedia/Typechecker/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Rascalopedia/Typechecker/index.md",tags:[],version:"current",frontMatter:{title:"Typechecker"},sidebar:"tutorialSidebar",previous:{title:"Tuple",permalink:"/docs/Rascalopedia/Tuple/"},next:{title:"Visualization",permalink:"/docs/Rascalopedia/Visualization/"}},l={},s=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],p={toc:s};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Checks the type rules for a source language."),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"A ",(0,a.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Type_system"},"type system")," is a set of rules that defines how values,\nvariables and functions may be used in a given programming languages."),(0,a.kt)("p",null,"A type checker, checks that these rules are enforced. The moment that type checking can be done differs\nper type system, but two extremes exist:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"Static type checking"),": all checking is done before the program is executed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"Dynamic type checking"),": all checking is done during execution of the program."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"Hybrid type checking"),": when possible checks are done before execution, the remaining checks are done during execution. ")),(0,a.kt)("p",null,"These different styles of type checking have different trade offs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Static typechecking:\n",(0,a.kt)("strong",{parentName:"li"},"  Pro: most errors are found before execution.\n"),"  Con: more type declarations have to be written by the programmer and in some situations the type systems limits what can be expressed."),(0,a.kt)("li",{parentName:"ul"},"Dynamic checking:\n",(0,a.kt)("strong",{parentName:"li"},"  Pro: most flexible and expressive.\n"),"  Con: errors can only be found during execution."),(0,a.kt)("li",{parentName:"ul"},"Hybrid (or gradual) type checking:\n",(0,a.kt)("strong",{parentName:"li"},"  Pro: a reasonable compromise.\n"),"  Con not be as safe as full static typechecking.")),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If in Java a variable has been declared as ",(0,a.kt)("inlineCode",{parentName:"li"},"bool")," it cannot be added to an integer."),(0,a.kt)("li",{parentName:"ul"},"If in Java a method has three formal parameters, it cannot be called with four actual parameters."),(0,a.kt)("li",{parentName:"ul"},"In Python, a variable can first get a string value assigned and later on an integer value.")))}u.isMDXComponent=!0}}]);