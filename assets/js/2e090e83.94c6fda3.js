"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[42506],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=r,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return t?a.createElement(g,o(o({ref:n},c),{},{components:t})):a.createElement(g,o({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},96142:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=t(87462),r=(t(67294),t(3905));const i={title:"Quine",sidebar_position:7},o=void 0,s={unversionedId:"Recipes/Basic/Quine/index",id:"Recipes/Basic/Quine/index",title:"Quine",description:"Synopsis",source:"@site/docs/Recipes/Basic/Quine/index.md",sourceDirName:"Recipes/Basic/Quine",slug:"/Recipes/Basic/Quine/",permalink:"/docs/Recipes/Basic/Quine/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Recipes/Basic/Quine/index.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Quine",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"FizzBuzz",permalink:"/docs/Recipes/Basic/FizzBuzz/"},next:{title:"Common",permalink:"/docs/Recipes/Common/"}},p={},l=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],c={toc:l};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"A self-reproducing program."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Quine_(computing)"},"Quine"),"\nis a computer program that takes no input and produces a copy of its own source code.\nA quine is also called a ",(0,r.kt)("em",{parentName:"p"},"self-replicating")," or ",(0,r.kt)("em",{parentName:"p"},"self-reproducing")," program."),(0,r.kt)("p",null,"At the ",(0,r.kt)("a",{parentName:"p",href:"http://www.nyx.net/~gthompso/quine.htm"},"Quine Page")," you can find hundreds of\nquines in many different programming languages."),(0,r.kt)("p",null,"Learning about quines, is about learning how to quote and escape symbols in strings."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"demo::basic::Quine\n")),(0,r.kt)("p",null,"<1> A remarkable point in the code: the string variable ",(0,r.kt)("inlineCode",{parentName:"p"},"program")," has as value\nthe text of the module ",(0,r.kt)("inlineCode",{parentName:"p"},"Quine")," upto here.\n<2> The definition of ",(0,r.kt)("inlineCode",{parentName:"p"},"program")," ends here.\nThis string has a mesmerizing amount of escapes to which we will come back in a moment."),(0,r.kt)("p",null,"<3> The function ",(0,r.kt)("inlineCode",{parentName:"p"},"quine")," prints the string ",(0,r.kt)("inlineCode",{parentName:"p"},"program")," twice, here as is and this produces the program upto icon:callout","[1]"," above.\n<4> Here the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"program")," is printed as a string (surrounded with string quotes) in order to reproduce the string value\nof ",(0,r.kt)("inlineCode",{parentName:"p"},"program")," followed by a semi-colon (",(0,r.kt)("inlineCode",{parentName:"p"},";"),")."),(0,r.kt)("p",null,"Now here is the catch: we have to be very carefull in handling special characters like quote (",(0,r.kt)("inlineCode",{parentName:"p"},'"'),") and backslash (",(0,r.kt)("inlineCode",{parentName:"p"},"\\"),") in strings."),(0,r.kt)("p",null,"Let's do a simple experiment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>str greeting = "\\"Good Morning, Dr. Watson\\", said Holmes";\nstr: "\\"Good Morning, Dr. Watson\\", said Holmes"\nrascal>println("\\"" + greeting + "\\"");\n""Good Morning, Dr. Watson", said Holmes"\nok\n')),(0,r.kt)("p",null,"As you see the quotes inside the string are not escaped and the result is not a legal string.\nSo what can we do? We escape all dangerous characters in the string before printing it using the ","[Rascal:escape]"," function.\nIt takes a string and a map of characters to be escaped and returns a result in which all escaping has been carried out.\nBe aware that in the map, also escaping is needed!\nWe want to say: escape ",(0,r.kt)("inlineCode",{parentName:"p"},'"')," and replace it by ",(0,r.kt)("inlineCode",{parentName:"p"},'\\"'),", but since both ",(0,r.kt)("inlineCode",{parentName:"p"},'"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},"\\")," have to be escaped themselves\nwe have to say: escape ",(0,r.kt)("inlineCode",{parentName:"p"},'"\\""')," and replace it by ",(0,r.kt)("inlineCode",{parentName:"p"},'"\\\\\\""'),". The effect is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},'rascal>import String;\nok\nrascal>println("\\"" + escape(greeting, ("\\"": "\\\\\\"")) + "\\"");\n"\\"Good Morning, Dr. Watson\\", said Holmes"\nok\n')),(0,r.kt)("p",null,"And indeed, the two quotes are now properly escaped."),(0,r.kt)("p",null,"This is exactly what happens at line 4 in the definition of ",(0,r.kt)("inlineCode",{parentName:"p"},"quine"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'println("\\"" + escape(program, ("\\"" : "\\\\\\"", "\\\\" : "\\\\\\\\")) + "\\";");\n')),(0,r.kt)("p",null,"We escape ",(0,r.kt)("inlineCode",{parentName:"p"},"program")," and replace ",(0,r.kt)("inlineCode",{parentName:"p"},'"')," by ",(0,r.kt)("inlineCode",{parentName:"p"},'\\"'),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"\\")," by ",(0,r.kt)("inlineCode",{parentName:"p"},"\\\\"),".\nThe mesmerizing amount of ",(0,r.kt)("inlineCode",{parentName:"p"},"\\")," characters can be explained due to escaping ",(0,r.kt)("inlineCode",{parentName:"p"},'"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},"\\"),"."),(0,r.kt)("p",null,"Now let's put ",(0,r.kt)("inlineCode",{parentName:"p"},"quine")," to the test."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::basic::Quine;\nok\nrascal>quine();\nmodule demo::basic::Quine\n\nimport IO;\nimport String;\n\nvoid quine(){\n  println(program);\n  println("\\"" + escape(program, ("\\"" : "\\\\\\"", "\\\\" : "\\\\\\\\")) + "\\";");\n}\n\nstr program =\n"module demo::basic::Quine\n\nimport IO;\nimport String;\n\nvoid quine(){\n  println(program);\n  println(\\"\\\\\\"\\" + escape(program, (\\"\\\\\\"\\" : \\"\\\\\\\\\\\\\\"\\", \\"\\\\\\\\\\" : \\"\\\\\\\\\\\\\\\\\\")) + \\"\\\\\\";\\");\n}\n\nstr program =";\nok\n')),(0,r.kt)("p",null,"If you follow this output line-by-line you will see that it\nis identical to the original source code of module ",(0,r.kt)("inlineCode",{parentName:"p"},"Quine"),"."))}u.isMDXComponent=!0}}]);