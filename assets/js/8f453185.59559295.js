"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[73133],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(a),u=r,k=m["".concat(o,".").concat(u)]||m[u]||c[u]||l;return a?n.createElement(k,i(i({ref:t},d),{},{components:a})):n.createElement(k,i({ref:t},d))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},73814:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const l={title:"Patterns",sidebar_position:1},i=void 0,s={unversionedId:"Rascal/Patterns/index",id:"Rascal/Patterns/index",title:"Patterns",description:"Synopsis",source:"@site/docs/Rascal/Patterns/index.md",sourceDirName:"Rascal/Patterns",slug:"/Rascal/Patterns/",permalink:"/docs/Rascal/Patterns/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Rascal/Patterns/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Patterns",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Variable Declaration",permalink:"/docs/Rascal/Declarations/Variable/"},next:{title:"Concrete Patterns",permalink:"/docs/Rascal/Patterns/Concrete/"}},o={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Description",id:"description",level:4},{value:"Pitfalls",id:"pitfalls",level:4}],d={toc:p};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Patterns are a notation for pattern matching used to detect if a value has a certain shape,\nand then to bind variables to parts of the matched value. "),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,"For most of the ",(0,r.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/Values/"},"Values"),', there is a corresponding pattern matching operator. Then there are\nsome "higher-order" matching operators which make complex patterns out of simpler ones.\nThis is the complete list:'),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Pattern"),(0,r.kt)("th",{parentName:"tr",align:null},"Syntax"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Literal"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/Rascal/Expressions/Values/Boolean/"},"Boolean"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/Rascal/Expressions/Values/Integer/"},"Integer"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/Rascal/Expressions/Values/Real/"},"Real"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/Rascal/Expressions/Values/Number/"},"Number"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/Rascal/Expressions/Values/String/"},"String"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/Rascal/Expressions/Values/Location/"},"Location"),", or ",(0,r.kt)("a",{parentName:"td",href:"/docs/Rascal/Expressions/Values/DateTime/"},"DateTime"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Regular Expression"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/<Regular Expression>/"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Variable declaration"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Type Var"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Multi-variable"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"*Var"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"*Type Var"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Variable"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Var"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"List"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[ Pat\u2081, Pat\u2082, ..., Pat\u2099 ]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Set"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{ Pat\u2081, Pat\u2082, ..., Pat\u2099 }"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tuple"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"< Pat\u2081, Pat\u2082, ..., Pat\u2099 >"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Node"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Name ( Pat\u2081, Pat\u2082, ..., Pat\u2099 )"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Descendant"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"/ Pat"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Labelled"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Var : Pat"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TypedLabelled"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Type Var : Pat"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TypeConstrained"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[Type] Pat"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Concrete"),(0,r.kt)("td",{parentName:"tr",align:null},"(Symbol) ",(0,r.kt)("inlineCode",{parentName:"td"},"Token\u2081 Token\u2082 ... Token\u2099"))))),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"Patterns are used to ",(0,r.kt)("em",{parentName:"p"},"dispatch")," functions and conditional control flow, to ",(0,r.kt)("em",{parentName:"p"},"extract")," information\nfrom values and to conditionally ",(0,r.kt)("em",{parentName:"p"},"filter")," values. The pattern following pattern kinds can be arbitrarily nested, following\nthe above syntax:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Patterns/Concrete/"},"Concrete")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Patterns/Descendant/"},"Descendant")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Patterns/Labelled/"},"Labelled")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Patterns/List/"},"List")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Patterns/Literal/"},"Literal")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Patterns/MultiVariable/"},"MultiVariable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Patterns/Node/"},"Node")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Patterns/Regular/"},"Regular")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Patterns/Set/"},"Set")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Patterns/Tuple/"},"Tuple")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Patterns/TypeConstrained/"},"TypeConstrained")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Patterns/TypedLabelled/"},"TypedLabelled")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Patterns/Variable/"},"Variable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Patterns/VariableDeclaration/"},"VariableDeclaration"))),(0,r.kt)("p",null,"All these patterns may be used in:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cases of a ",(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Statements/Switch/"},"Switch")," or ",(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Statements/Visit/"},"visit statements")," or ",(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Expressions/Visit/"},"visit expressions"),", "),(0,r.kt)("li",{parentName:"ul"},"on the left of the ",(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Expressions/Values/Boolean/Match/"},"Match")," operator (",(0,r.kt)("inlineCode",{parentName:"li"},":="),"),"),(0,r.kt)("li",{parentName:"ul"},"on the left of the ",(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Expressions/Comprehensions/Enumerator/"},"Enumerator")," operator (",(0,r.kt)("inlineCode",{parentName:"li"},"<-"),"), and"),(0,r.kt)("li",{parentName:"ul"},"as formal parameters of ",(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Declarations/Function/"},"Function"),"s. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Rascal/Statements/TryCatch/"},"try catch")," statements to match thrown exceptions.")),(0,r.kt)("p",null,"Each pattern binds variables in a conditional scope:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"in further patterns to the right of the name which is bound in the same pattern"),(0,r.kt)("li",{parentName:"ul"},"in the body of case statement (either a replacement or a statement body) "),(0,r.kt)("li",{parentName:"ul"},"in the conditions and bodies of ",(0,r.kt)("inlineCode",{parentName:"li"},"<If>"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"<For>"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"<While>")," control flow statements"),(0,r.kt)("li",{parentName:"ul"},"in the yielding expressions of comprehensions and in furter conditions of the comprehensions")),(0,r.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If a pattern does not match, then it may be hard to find out why. A small test case is the best thing to create. Often a default alternative\nwhich ",(0,r.kt)("inlineCode",{parentName:"li"},"<Throw>"),"s an exception with the value which is not matched can be used to find out why this is happening."),(0,r.kt)("li",{parentName:"ul"},"If a variable is bound in the scope of a pattern, then it acts as an ",(0,r.kt)("inlineCode",{parentName:"li"},"==")," test, so make sure to use fresh variables\nto avoid such accidental collisions.")))}c.isMDXComponent=!0}}]);