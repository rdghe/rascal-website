"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[79505],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,y=u["".concat(l,".").concat(d)]||u[d]||m[d]||s;return n?a.createElement(y,i(i({ref:t},c),{},{components:n})):a.createElement(y,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},19097:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const s={title:"module lang::java::m3::AST"},i=void 0,o={unversionedId:"Library/lang/java/m3/AST",id:"Library/lang/java/m3/AST",title:"module lang::java::m3::AST",description:"Usage",source:"@site/docs/Library/lang/java/m3/AST.md",sourceDirName:"Library/lang/java/m3",slug:"/Library/lang/java/m3/AST",permalink:"/docs/Library/lang/java/m3/AST",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Library/lang/java/m3/AST.md",tags:[],version:"current",frontMatter:{title:"module lang::java::m3::AST"},sidebar:"tutorialSidebar",previous:{title:"lang::java::m3",permalink:"/docs/Library/lang/java/m3/"},next:{title:"module lang::java::m3::Core",permalink:"/docs/Library/lang/java/m3/Core"}},l={},p=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"data Declaration",id:"lang-java-m3-AST-Declaration",level:2},{value:"data Expression",id:"lang-java-m3-AST-Expression",level:2},{value:"data Statement",id:"lang-java-m3-AST-Statement",level:2},{value:"data Type",id:"lang-java-m3-AST-Type",level:2},{value:"data Modifier",id:"lang-java-m3-AST-Modifier",level:2},{value:"function getPaths",id:"lang-java-m3-AST-getPaths",level:2},{value:"function findRoots",id:"lang-java-m3-AST-findRoots",level:2},{value:"function createAstFromFile",id:"lang-java-m3-AST-createAstFromFile",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Description",id:"description",level:4},{value:"function createAstsFromFiles",id:"lang-java-m3-AST-createAstsFromFiles",level:2},{value:"Synopsis",id:"synopsis-2",level:4},{value:"Description",id:"description-1",level:4},{value:"function createAstFromString",id:"lang-java-m3-AST-createAstFromString",level:2},{value:"function createAstsFromDirectory",id:"lang-java-m3-AST-createAstsFromDirectory",level:2}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"import lang::java::m3::AST;")),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"defines AST node types for Java"),(0,r.kt)("h2",{id:"lang-java-m3-AST-Declaration"},"data Declaration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"data Declaration  \n     = \\compilationUnit(list[Declaration] imports, list[Declaration] types)\n     | \\compilationUnit(Declaration package, list[Declaration] imports, list[Declaration] types)\n     | \\enum(str name, list[Type] implements, list[Declaration] constants, list[Declaration] body)\n     | \\enumConstant(str name, list[Expression] arguments, Declaration class)\n     | \\enumConstant(str name, list[Expression] arguments)\n     | \\class(str name, list[Type] extends, list[Type] implements, list[Declaration] body)\n     | \\class(list[Declaration] body)\n     | \\interface(str name, list[Type] extends, list[Type] implements, list[Declaration] body)\n     | \\field(Type \\type, list[Expression] fragments)\n     | \\initializer(Statement initializerBody)\n     | \\method(Type \\return, str name, list[Declaration] parameters, list[Expression] exceptions, Statement impl)\n     | \\method(Type \\return, str name, list[Declaration] parameters, list[Expression] exceptions)\n     | \\constructor(str name, list[Declaration] parameters, list[Expression] exceptions, Statement impl)\n     | \\import(str name)\n     | \\package(str name)\n     | \\package(Declaration parentPackage, str name)\n     | \\variables(Type \\type, list[Expression] \\fragments)\n     | \\typeParameter(str name, list[Type] extendsList)\n     | \\annotationType(str name, list[Declaration] body)\n     | \\annotationTypeMember(Type \\type, str name)\n     | \\annotationTypeMember(Type \\type, str name, Expression defaultBlock)\n     | \\parameter(Type \\type, str name, int extraDimensions)\n     | \\vararg(Type \\type, str name)\n     ;\n")),(0,r.kt)("h2",{id:"lang-java-m3-AST-Expression"},"data Expression"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"data Expression  \n     = \\arrayAccess(Expression array, Expression index)\n     | \\newArray(Type \\type, list[Expression] dimensions, Expression init)\n     | \\newArray(Type \\type, list[Expression] dimensions)\n     | \\arrayInitializer(list[Expression] elements)\n     | \\assignment(Expression lhs, str operator, Expression rhs)\n     | \\cast(Type \\type, Expression expression)\n     | \\characterLiteral(str charValue)\n     | \\newObject(Expression expr, Type \\type, list[Expression] args, Declaration class)\n     | \\newObject(Expression expr, Type \\type, list[Expression] args)\n     | \\newObject(Type \\type, list[Expression] args, Declaration class)\n     | \\newObject(Type \\type, list[Expression] args)\n     | \\qualifiedName(Expression qualifier, Expression expression)\n     | \\conditional(Expression expression, Expression thenBranch, Expression elseBranch)\n     | \\fieldAccess(bool isSuper, Expression expression, str name)\n     | \\fieldAccess(bool isSuper, str name)\n     | \\instanceof(Expression leftSide, Type rightSide)\n     | \\methodCall(bool isSuper, str name, list[Expression] arguments)\n     | \\methodCall(bool isSuper, Expression receiver, str name, list[Expression] arguments)\n     | \\null()\n     | \\number(str numberValue)\n     | \\booleanLiteral(bool boolValue)\n     | \\stringLiteral(str stringValue)\n     | \\type(Type \\type)\n     | \\variable(str name, int extraDimensions)\n     | \\variable(str name, int extraDimensions, Expression \\initializer)\n     | \\bracket(Expression expression)\n     | \\this()\n     | \\this(Expression thisExpression)\n     | \\super()\n     | \\declarationExpression(Declaration declaration)\n     | \\infix(Expression lhs, str operator, Expression rhs)\n     | \\postfix(Expression operand, str operator)\n     | \\prefix(str operator, Expression operand)\n     | \\simpleName(str name)\n     | \\markerAnnotation(str typeName)\n     | \\normalAnnotation(str typeName, list[Expression] memberValuePairs)\n     | \\memberValuePair(str name, Expression \\value)\n     | \\singleMemberAnnotation(str typeName, Expression \\value)\n     ;\n")),(0,r.kt)("h2",{id:"lang-java-m3-AST-Statement"},"data Statement"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"data Statement  \n     = \\assert(Expression expression)\n     | \\assert(Expression expression, Expression message)\n     | \\block(list[Statement] statements)\n     | \\break()\n     | \\break(str label)\n     | \\continue()\n     | \\continue(str label)\n     | \\do(Statement body, Expression condition)\n     | \\empty()\n     | \\foreach(Declaration parameter, Expression collection, Statement body)\n     | \\for(list[Expression] initializers, Expression condition, list[Expression] updaters, Statement body)\n     | \\for(list[Expression] initializers, list[Expression] updaters, Statement body)\n     | \\if(Expression condition, Statement thenBranch)\n     | \\if(Expression condition, Statement thenBranch, Statement elseBranch)\n     | \\label(str name, Statement body)\n     | \\return(Expression expression)\n     | \\return()\n     | \\switch(Expression expression, list[Statement] statements)\n     | \\case(Expression expression)\n     | \\defaultCase()\n     | \\synchronizedStatement(Expression lock, Statement body)\n     | \\throw(Expression expression)\n     | \\try(Statement body, list[Statement] catchClauses)\n     | \\try(Statement body, list[Statement] catchClauses, Statement \\finally)\n     | \\catch(Declaration exception, Statement body)\n     | \\declarationStatement(Declaration declaration)\n     | \\while(Expression condition, Statement body)\n     | \\expressionStatement(Expression stmt)\n     | \\constructorCall(bool isSuper, Expression expr, list[Expression] arguments)\n     | \\constructorCall(bool isSuper, list[Expression] arguments)\n     ;\n")),(0,r.kt)("h2",{id:"lang-java-m3-AST-Type"},"data Type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"data Type  \n     = arrayType(Type \\type)\n     | parameterizedType(Type \\type)\n     | qualifiedType(Type qualifier, Expression simpleName)\n     | simpleType(Expression typeName)\n     | unionType(list[Type] types)\n     | wildcard()\n     | upperbound(Type \\type)\n     | lowerbound(Type \\type)\n     | \\int()\n     | short()\n     | long()\n     | float()\n     | double()\n     | char()\n     | string()\n     | byte()\n     | \\void()\n     | \\boolean()\n     ;\n")),(0,r.kt)("h2",{id:"lang-java-m3-AST-Modifier"},"data Modifier"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"data Modifier  \n     = \\private()\n     | \\public()\n     | \\protected()\n     | \\friendly()\n     | \\static()\n     | \\final()\n     | \\synchronized()\n     | \\transient()\n     | \\abstract()\n     | \\native()\n     | \\volatile()\n     | \\strictfp()\n     | \\annotation(Expression \\anno)\n     | \\onDemand()\n     | \\default()\n     ;\n")),(0,r.kt)("h2",{id:"lang-java-m3-AST-getPaths"},"function getPaths"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set[loc] getPaths(loc dir, str suffix)"))),(0,r.kt)("h2",{id:"lang-java-m3-AST-findRoots"},"function findRoots"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set[loc] findRoots(set[loc] folders)"))),(0,r.kt)("h2",{id:"lang-java-m3-AST-createAstFromFile"},"function createAstFromFile"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'Declaration createAstFromFile(loc file, bool collectBindings, bool errorRecovery = false, list[loc] sourcePath = [], list[loc] classPath = [], str javaVersion = "1.7")'))),(0,r.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,r.kt)("p",null,"Creates AST from a file"),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("h2",{id:"lang-java-m3-AST-createAstsFromFiles"},"function createAstsFromFiles"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'set[Declaration] createAstsFromFiles(set[loc] file, bool collectBindings, bool errorRecovery = false, list[loc] sourcePath = [], list[loc] classPath = [], str javaVersion = "1.7")'))),(0,r.kt)("h4",{id:"synopsis-2"},"Synopsis"),(0,r.kt)("p",null,"Creates AST from a file"),(0,r.kt)("h4",{id:"description-1"},"Description"),(0,r.kt)("h2",{id:"lang-java-m3-AST-createAstFromString"},"function createAstFromString"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'Declaration createAstFromString(loc fileName, str source, bool collectBinding, bool errorRecovery = false, list[loc] sourcePath = [], list[loc] classPath = [], str javaVersion = "1.7")'))),(0,r.kt)("p",null,"  Creates ASTs from an input string"),(0,r.kt)("h2",{id:"lang-java-m3-AST-createAstsFromDirectory"},"function createAstsFromDirectory"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'set[Declaration] createAstsFromDirectory(loc project, bool collectBindings, bool errorRecovery = false, str javaVersion = "1.7" )'))),(0,r.kt)("p",null,"Creates ASTs from a project"))}m.isMDXComponent=!0}}]);