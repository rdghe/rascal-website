"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[1836],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),o=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=o(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),k=o(n),u=l,c=k["".concat(s,".").concat(u)]||k[u]||d[u]||r;return n?a.createElement(c,i(i({ref:t},m),{},{components:n})):a.createElement(c,i({ref:t},m))}));function u(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=k;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:l,i[1]=p;for(var o=2;o<r;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},94216:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>p,toc:()=>o});var a=n(87462),l=(n(67294),n(3905));const r={title:"List Slice",keywords:["[","..","]"]},i=void 0,p={unversionedId:"Rascal/Expressions/Values/List/Slice/index",id:"Rascal/Expressions/Values/List/Slice/index",title:"List Slice",description:"Synopsis",source:"@site/docs/Rascal/Expressions/Values/List/Slice/index.md",sourceDirName:"Rascal/Expressions/Values/List/Slice",slug:"/Rascal/Expressions/Values/List/Slice/",permalink:"/docs/Rascal/Expressions/Values/List/Slice/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Rascal/Expressions/Values/List/Slice/index.md",tags:[],version:"current",frontMatter:{title:"List Slice",keywords:["[","..","]"]},sidebar:"tutorialSidebar",previous:{title:"List Product",permalink:"/docs/Rascal/Expressions/Values/List/Product/"},next:{title:"List Splice",permalink:"/docs/Rascal/Expressions/Values/List/Splice/"}},s={},o=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],m={toc:o};function d(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"synopsis"},"Synopsis"),(0,l.kt)("p",null,"Retrieve a slice of a list."),(0,l.kt)("h4",{id:"syntax"},"Syntax"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Exp\u2081 [ Exp\u2082 .. Exp\u2084]")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Exp\u2081 [ Exp\u2082 , Exp\u2083 .. Exp\u2084]"))),(0,l.kt)("p",null,"where ",(0,l.kt)("em",{parentName:"p"},"Exp"),"\u2082 and ",(0,l.kt)("em",{parentName:"p"},"Exp"),"\u2084 are optional."),(0,l.kt)("h4",{id:"types"},"Types"),(0,l.kt)("p",null,"//"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"Exp\u2081")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"Exp\u2082")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"Exp\u2083")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"Exp\u2084")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"Exp\u2081 [ Exp\u2082 .. Exp\u2084 ]"),"   or  ",(0,l.kt)("inlineCode",{parentName:"th"},"Exp\u2081 [ Exp\u2082 , Exp\u2083 .. Exp\u2084]")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list[T\u2081]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"list[T\u2081]"))))),(0,l.kt)("h4",{id:"description"},"Description"),(0,l.kt)("p",null,"List slicing uses the integer values of ",(0,l.kt)("em",{parentName:"p"},"Exp"),"\u2082 and ",(0,l.kt)("em",{parentName:"p"},"Exp"),"\u2084 to determine the ",(0,l.kt)("inlineCode",{parentName:"p"},"begin")," (",(0,l.kt)("em",{parentName:"p"},"inclusive"),") and ",(0,l.kt)("inlineCode",{parentName:"p"},"end")," (",(0,l.kt)("em",{parentName:"p"},"exclusive"),")\nof a slice from the list value ",(0,l.kt)("em",{parentName:"p"},"L")," of ",(0,l.kt)("em",{parentName:"p"},"Exp"),"\u2081. Negative indices count from the end of the list backwards.\nUsing the second form, an extra index ",(0,l.kt)("em",{parentName:"p"},"Exp"),"\u2083 is given that determines the\nindex of the second element in the slice and establishes the ",(0,l.kt)("inlineCode",{parentName:"p"},"step")," between\nsuccessive elements in the slice. The default ",(0,l.kt)("inlineCode",{parentName:"p"},"step")," is 1.\nIf ",(0,l.kt)("inlineCode",{parentName:"p"},"end")," is smaller than ",(0,l.kt)("inlineCode",{parentName:"p"},"begin"),", the slice is constructed backwards."),(0,l.kt)("p",null,"Let ",(0,l.kt)("inlineCode",{parentName:"p"},"Len")," be the length of ",(0,l.kt)("em",{parentName:"p"},"L")," and let ",(0,l.kt)("em",{parentName:"p"},"N"),"\u2082, ",(0,l.kt)("em",{parentName:"p"},"N"),"\u2083 and ",(0,l.kt)("em",{parentName:"p"},"N"),"\u2084 be the respective values of the expressions\n",(0,l.kt)("em",{parentName:"p"},"Exp"),"\u2082, ",(0,l.kt)("em",{parentName:"p"},"Exp"),"\u2082 and ",(0,l.kt)("em",{parentName:"p"},"Exp"),"\u2082 when they are present."),(0,l.kt)("p",null,"The slice parameters ",(0,l.kt)("inlineCode",{parentName:"p"},"begin"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"end"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"step")," are determined as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Exp\u2082"),":\n",(0,l.kt)("strong",{parentName:"li"},"  If ",(0,l.kt)("em",{parentName:"strong"},"Exp\u2082")," is absent, then ",(0,l.kt)("inlineCode",{parentName:"strong"},"begin = 0"),".\n"),"  Otherwise, if ",(0,l.kt)("em",{parentName:"li"},"N\u2082")," >= 0 then ",(0,l.kt)("inlineCode",{parentName:"li"},"begin = N\u2082")," else ",(0,l.kt)("inlineCode",{parentName:"li"},"begin = N\u2082 + Len"),". "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Exp\u2084"),":\n",(0,l.kt)("strong",{parentName:"li"},"  If ",(0,l.kt)("em",{parentName:"strong"},"Exp\u2084")," is absent, then ",(0,l.kt)("inlineCode",{parentName:"strong"},"end = Len"),".\n"),"  Otherwise, if ",(0,l.kt)("em",{parentName:"li"},"N\u2084")," >= 0, then ",(0,l.kt)("inlineCode",{parentName:"li"},"end = N\u2084")," else ",(0,l.kt)("inlineCode",{parentName:"li"},"end = N\u2084 + Len"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Exp\u2083"),":\n",(0,l.kt)("strong",{parentName:"li"},"  If ",(0,l.kt)("em",{parentName:"strong"},"Exp\u2083")," is absent, then if ",(0,l.kt)("inlineCode",{parentName:"strong"},"begin < end")," then ",(0,l.kt)("inlineCode",{parentName:"strong"},"step = 1")," else ",(0,l.kt)("inlineCode",{parentName:"strong"},"step = -1"),".\n"),"  Otherwise, if ",(0,l.kt)("inlineCode",{parentName:"li"},"begin < end"),", then ",(0,l.kt)("inlineCode",{parentName:"li"},"step = N\u2083 - begin")," else ",(0,l.kt)("inlineCode",{parentName:"li"},"step = begin - N\u2083"),".")),(0,l.kt)("p",null,"Now, the constraints ",(0,l.kt)("inlineCode",{parentName:"p"},"0 <= begin < Len")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"0 < end < Len")," should hold,\notherwise the exception ",(0,l.kt)("inlineCode",{parentName:"p"},"IndexOutOfBounds")," is thrown."),(0,l.kt)("p",null,"The slice consists of the elements ",(0,l.kt)("inlineCode",{parentName:"p"},"L[begin]"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"L[begin+step]"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"L[end - step]"),".\nWhen ",(0,l.kt)("inlineCode",{parentName:"p"},"begin >= end"),", the elements are listed in reverse order."),(0,l.kt)("h4",{id:"examples"},"Examples"),(0,l.kt)("p",null,"Consider the list ",(0,l.kt)("inlineCode",{parentName:"p"},"L = [0, 10, 20, 30, 40, 50, 60, 70, 80];")," as running example."),(0,l.kt)("p",null,"Here is a view on ",(0,l.kt)("em",{parentName:"p"},"L")," that will help to correlate positive and negative indices:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"i")),(0,l.kt)("th",{parentName:"tr",align:null},"0"),(0,l.kt)("th",{parentName:"tr",align:null},"1"),(0,l.kt)("th",{parentName:"tr",align:null},"2"),(0,l.kt)("th",{parentName:"tr",align:null},"3"),(0,l.kt)("th",{parentName:"tr",align:null},"4"),(0,l.kt)("th",{parentName:"tr",align:null},"5"),(0,l.kt)("th",{parentName:"tr",align:null},"6"),(0,l.kt)("th",{parentName:"tr",align:null},"7"),(0,l.kt)("th",{parentName:"tr",align:null},"8"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"L[i]")),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"10"),(0,l.kt)("td",{parentName:"tr",align:null},"20"),(0,l.kt)("td",{parentName:"tr",align:null},"30"),(0,l.kt)("td",{parentName:"tr",align:null},"40"),(0,l.kt)("td",{parentName:"tr",align:null},"50"),(0,l.kt)("td",{parentName:"tr",align:null},"60"),(0,l.kt)("td",{parentName:"tr",align:null},"70"),(0,l.kt)("td",{parentName:"tr",align:null},"80")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-i")),(0,l.kt)("td",{parentName:"tr",align:null},"-9"),(0,l.kt)("td",{parentName:"tr",align:null},"-8"),(0,l.kt)("td",{parentName:"tr",align:null},"-7"),(0,l.kt)("td",{parentName:"tr",align:null},"-6"),(0,l.kt)("td",{parentName:"tr",align:null},"-5"),(0,l.kt)("td",{parentName:"tr",align:null},"-4"),(0,l.kt)("td",{parentName:"tr",align:null},"-3"),(0,l.kt)("td",{parentName:"tr",align:null},"-2"),(0,l.kt)("td",{parentName:"tr",align:null},"-1")))),(0,l.kt)("p",null,"Some common use cases (with ",(0,l.kt)("inlineCode",{parentName:"p"},"begin")," <= ",(0,l.kt)("inlineCode",{parentName:"p"},"end"),"):"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Slice"),(0,l.kt)("th",{parentName:"tr",align:null},"Means:"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"L[begin..end]")),(0,l.kt)("td",{parentName:"tr",align:null},"elements with indices ",(0,l.kt)("inlineCode",{parentName:"td"},"begin")," through ",(0,l.kt)("inlineCode",{parentName:"td"},"end-1"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"L[begin..]")),(0,l.kt)("td",{parentName:"tr",align:null},"elements with indices ",(0,l.kt)("inlineCode",{parentName:"td"},"begin")," through the rest of the list")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"L[..end]")),(0,l.kt)("td",{parentName:"tr",align:null},"elements with indices from the beginning through ",(0,l.kt)("inlineCode",{parentName:"td"},"end-1"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"L[..]")),(0,l.kt)("td",{parentName:"tr",align:null},"the whole list")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"L[-1]")),(0,l.kt)("td",{parentName:"tr",align:null},"last element of the list")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"L[-2..]")),(0,l.kt)("td",{parentName:"tr",align:null},"the last two elements of the list")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"L[..-2]")),(0,l.kt)("td",{parentName:"tr",align:null},"all elements except the last two.")))),(0,l.kt)("p",null,"Let's put this into practice now."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",error",",error":!0},"rascal>L = [0, 10, 20, 30, 40, 50, 60, 70, 80];\nlist[int]: [0,10,20,30,40,50,60,70,80]\n")),(0,l.kt)("p",null,"Slices with begin < end"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue,error",",continue,error":!0},"rascal>L[1..3];\nlist[int]: [10,20]\nrascal>L[1..];       // empty end => end of list\nlist[int]: [10,20,30,40,50,60,70,80]\nrascal>L[..3];       // empty begin => first element of list\nlist[int]: [0,10,20]\nrascal>L[..];        // both empty => whole list\nlist[int]: [0,10,20,30,40,50,60,70,80]\n")),(0,l.kt)("p",null,"Slices with  begin >= end"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue,error",",continue,error":!0},"rascal>L[3..1];      // slice contains elements with indices 3 and 2 (in that order)\nlist[int]: [30,20]\nrascal>L[3..3];      // empty slice when begin == end\nlist[int]: []\n")),(0,l.kt)("p",null,"Slices with negative begin or end:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue,error",",continue,error":!0},"rascal>L[2..-2];     // equivalent to L[2..7]\nlist[int]: [20,30,40,50,60]\nrascal>L[2..7];\nlist[int]: [20,30,40,50,60]\nrascal>L[-4..-2];    // equivalent to L[5..7]\nlist[int]: [50,60]\nrascal>L[5..7];\nlist[int]: [50,60]\n")),(0,l.kt)("p",null,"Slices with an explicit second index:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue,error",",continue,error":!0},"rascal>L[1,3..6];\nlist[int]: [10,30,50]\nrascal>L[5,3..];\nlist[int]: [50,30,10]\n")),(0,l.kt)("p",null,"Explore error cases:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue,error",",continue,error":!0},"rascal>L[..10];\nlist[int]: [0,10,20,30,40,50,60,70,80]\nrascal>L[1..20];\nlist[int]: [10,20,30,40,50,60,70,80]\n")))}d.isMDXComponent=!0}}]);