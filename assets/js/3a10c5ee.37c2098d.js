"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[16603],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),l=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return i.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return t?i.createElement(f,o(o({ref:n},p),{},{components:t})):i.createElement(f,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<r;l++)o[l]=t[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},17212:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=t(83117),a=(t(67294),t(3905));const r={title:"Uninit"},o=void 0,c={unversionedId:"Recipes/Languages/Pico/Uninit/index",id:"Recipes/Languages/Pico/Uninit/index",title:"Uninit",description:"Synopsis",source:"@site/docs/Recipes/Languages/Pico/Uninit/index.md",sourceDirName:"Recipes/Languages/Pico/Uninit",slug:"/Recipes/Languages/Pico/Uninit/",permalink:"/docs/Recipes/Languages/Pico/Uninit/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Recipes/Languages/Pico/Uninit/index.md",tags:[],version:"current",frontMatter:{title:"Uninit"},sidebar:"tutorialSidebar",previous:{title:"Typecheck",permalink:"/docs/Recipes/Languages/Pico/Typecheck/"},next:{title:"UseDef",permalink:"/docs/Recipes/Languages/Pico/UseDef/"}},s={},l=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Usage",id:"usage",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],p={toc:l};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Find unitialized variables in a Pico program."),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("h4",{id:"types"},"Types"),(0,a.kt)("h4",{id:"function"},"Function"),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Uninitialized variables are variables that are used without being initialized.\nThis means that there is a path in the control flow graph from the entry point of the program\nto a specific use of a variable, where that path does not contain a definition of that variable."),(0,a.kt)("p",null,"This can be computed as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"// tag::module[]\nmodule demo::lang::Pico::Uninit\n\nimport demo::lang::Pico::Abstract;\nimport demo::lang::Pico::Load;\n\nimport demo::lang::Pico::UseDef;\nimport demo::lang::Pico::ControlFlow;\n\nimport analysis::graphs::Graph;\n\npublic set[CFNode] defNodes(PicoId Id, set[Occurrence] Defs) =\n   {statement(occ.stat@location, occ.stat) | Occurrence occ <- Defs, occ.name == Id};\n\npublic set[Occurrence] uninitProgram(PROGRAM P) {\n   D = defs(P); // <1>\n   CFG = cflowProgram(P); // <2>\n   return { occ | occ <- uses(P), // <3>\n                  any(CFNode N <- reachX(CFG.graph, CFG.entry, defNodes(occ.name, D)),\n                      N has location && occ.location <= N.location) \n          }; // <4>\n}\n\npublic set[Occurrence] uninitProgram(str txt) = uninitProgram(load(txt)); // <5>\n// end::module[]\n\n")),(0,a.kt)("p",null,"<1> First, we determine the variable definitions of the program,\n<2> and its control flow graph.\n<3> Next we ask for every use of a variable the question: can it be reached from the entries\nof the program without encountering a definition? This determined as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"*  `rangeR(D, {occ.item})` is the set of definition for the variable were are looking at. See [Rascal:Relation/rangeR].\n*  `reachX` determines the reachability in a graph while excluding certain nodes, see [Rascal:Graph/reachX]. Here\n    `reachX(CFG.graph, CFG.entry, rangeR(D, {occ.item}))` determines the nodes in the graph that can be reached from the\n     entry point of the program without passing a definition of the current variable.\n*  `any(CFNode N <- reachX( ... ), N has location && occ.location \\<= N.location)` yields true if there is such a reachable node\n    that covers the location of the current variable.\n")),(0,a.kt)("p",null,"<4> The complete comprehension returns the set of occurrences of uninitialized variables."),(0,a.kt)("p",null,"The function ",(0,a.kt)("inlineCode",{parentName:"p"},"uninitProgram")," performs this analysis on the source text of a Pico program."),(0,a.kt)("p",null,"Here is a simple example, where variable ",(0,a.kt)("inlineCode",{parentName:"p"},"p")," is used without intialization:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Pico::Uninit;\nok\nrascal>uninitProgram("begin declare n : natural, m : natural, p : natural; n := 10; m := n + p end");\nrel[loc location,str name,STATEMENT stat]: {<|unknown:///|(71,1,<1,71>,<1,72>),"p",asgStat(\n    "m",\n    add(\n      id(\n        "n",\n        location=|unknown:///|(67,1,<1,67>,<1,68>),\n        comments=()),\n      id(\n        "p",\n        location=|unknown:///|(71,1,<1,71>,<1,72>),\n        comments=()),\n      location=|unknown:///|(67,5,<1,67>,<1,72>),\n      comments=()),\n    location=|unknown:///|(62,10,<1,62>,<1,72>),\n    comments=())>}\n')),(0,a.kt)("h4",{id:"benefits"},"Benefits"))}u.isMDXComponent=!0}}]);