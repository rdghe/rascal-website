"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[95165],{3905:(e,n,l)=>{l.d(n,{Zo:()=>m,kt:()=>c});var a=l(67294);function t(e,n,l){return n in e?Object.defineProperty(e,n,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[n]=l,e}function i(e,n){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),l.push.apply(l,a)}return l}function r(e){for(var n=1;n<arguments.length;n++){var l=null!=arguments[n]?arguments[n]:{};n%2?i(Object(l),!0).forEach((function(n){t(e,n,l[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):i(Object(l)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(l,n))}))}return e}function o(e,n){if(null==e)return{};var l,a,t=function(e,n){if(null==e)return{};var l,a,t={},i=Object.keys(e);for(a=0;a<i.length;a++)l=i[a],n.indexOf(l)>=0||(t[l]=e[l]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)l=i[a],n.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(t[l]=e[l])}return t}var s=a.createContext({}),p=function(e){var n=a.useContext(s),l=n;return e&&(l="function"==typeof e?e(n):r(r({},n),e)),l},m=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var l=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=p(l),c=t,k=d["".concat(s,".").concat(c)]||d[c]||u[c]||i;return l?a.createElement(k,r(r({ref:n},m),{},{components:l})):a.createElement(k,r({ref:n},m))}));function c(e,n){var l=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=l.length,r=new Array(i);r[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:t,r[1]=o;for(var p=2;p<i;p++)r[p]=l[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,l)}d.displayName="MDXCreateElement"},19142:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=l(87462),t=(l(67294),l(3905));const i={title:"module Relation"},r=void 0,o={unversionedId:"Library/Relation",id:"Library/Relation",title:"module Relation",description:"Usage",source:"@site/docs/Library/Relation.md",sourceDirName:"Library",slug:"/Library/Relation",permalink:"/docs/Library/Relation",draft:!1,tags:[],version:"current",frontMatter:{title:"module Relation"},sidebar:"tutorialSidebar",previous:{title:"module Prelude",permalink:"/docs/Library/Prelude"},next:{title:"module Set",permalink:"/docs/Library/Set"}},s={},p=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"function carrier",id:"Relation-carrier",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Examples",id:"examples",level:4},{value:"function carrierR",id:"Relation-carrierR",level:2},{value:"Synopsis",id:"synopsis-2",level:4},{value:"Description",id:"description-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"function carrierX",id:"Relation-carrierX",level:2},{value:"Synopsis",id:"synopsis-3",level:4},{value:"Examples",id:"examples-2",level:4},{value:"Synopsis",id:"synopsis-4",level:4},{value:"Description",id:"description-2",level:4},{value:"Examples",id:"examples-3",level:4},{value:"function complement",id:"Relation-complement",level:2},{value:"Synopsis",id:"synopsis-5",level:4},{value:"Description",id:"description-3",level:4},{value:"Examples",id:"examples-4",level:4},{value:"function domain",id:"Relation-domain",level:2},{value:"Synopsis",id:"synopsis-6",level:4},{value:"Examples",id:"examples-5",level:4},{value:"function domainR",id:"Relation-domainR",level:2},{value:"Synopsis",id:"synopsis-7",level:4},{value:"Description",id:"description-4",level:4},{value:"Examples",id:"examples-6",level:4},{value:"function domainX",id:"Relation-domainX",level:2},{value:"Synopsis",id:"synopsis-8",level:4},{value:"Description",id:"description-5",level:4},{value:"Examples",id:"examples-7",level:4},{value:"function groupDomainByRange",id:"Relation-groupDomainByRange",level:2},{value:"Synopsis",id:"synopsis-9",level:4},{value:"Examples",id:"examples-8",level:4},{value:"function groupRangeByDomain",id:"Relation-groupRangeByDomain",level:2},{value:"Synopsis",id:"synopsis-10",level:4},{value:"Description",id:"description-6",level:4},{value:"function ident",id:"Relation-ident",level:2},{value:"Synopsis",id:"synopsis-11",level:4},{value:"Description",id:"description-7",level:4},{value:"Examples",id:"examples-9",level:4},{value:"function invert",id:"Relation-invert",level:2},{value:"Synopsis",id:"synopsis-12",level:4},{value:"Examples",id:"examples-10",level:4},{value:"function range",id:"Relation-range",level:2},{value:"Synopsis",id:"synopsis-13",level:4},{value:"Examples",id:"examples-11",level:4},{value:"function rangeR",id:"Relation-rangeR",level:2},{value:"Synopsis",id:"synopsis-14",level:4},{value:"Description",id:"description-8",level:4},{value:"Examples",id:"examples-12",level:4},{value:"function rangeX",id:"Relation-rangeX",level:2},{value:"Synopsis",id:"synopsis-15",level:4},{value:"Description",id:"description-9",level:4},{value:"Examples",id:"examples-13",level:4},{value:"function index",id:"Relation-index",level:2},{value:"Synopsis",id:"synopsis-16",level:4},{value:"Description",id:"description-10",level:4},{value:"Examples",id:"examples-14",level:4}],m={toc:p};function u(e){let{components:n,...l}=e;return(0,t.kt)("wrapper",(0,a.Z)({},m,l,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h4",{id:"usage"},"Usage"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"import Relation;")),(0,t.kt)("h4",{id:"synopsis"},"Synopsis"),(0,t.kt)("p",null,"Library functions for relations."),(0,t.kt)("h4",{id:"description"},"Description"),(0,t.kt)("p",null,"For operators on relations see ",(0,t.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/Values/Relation/"},"Relation")," in the Rascal Language Reference."),(0,t.kt)("p",null,"The following functions are defined for relations:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Library/Relation#Relation-carrier"},"carrier")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Library/Relation#Relation-carrierR"},"carrierR")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Library/Relation#Relation-carrierX"},"carrierX")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Library/Relation#Relation-complement"},"complement")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Library/Relation#Relation-domain"},"domain")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Library/Relation#Relation-domainR"},"domainR")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Library/Relation#Relation-domainX"},"domainX")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Library/Relation#Relation-groupDomainByRange"},"groupDomainByRange")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Library/Relation#Relation-groupRangeByDomain"},"groupRangeByDomain")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Library/Relation#Relation-ident"},"ident")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Library/Relation#Relation-index"},"index")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Library/Relation#Relation-invert"},"invert")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Library/Relation#Relation-range"},"range")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Library/Relation#Relation-rangeR"},"rangeR")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/Library/Relation#Relation-rangeX"},"rangeX"))),(0,t.kt)("h2",{id:"Relation-carrier"},"function carrier"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"set[&T]  carrier (rel[&T,&T] R)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"set[&T]  carrier (rel[&T,&T,&T] R)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"set[&T]  carrier (rel[&T,&T,&T,&T] R)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"set[&T]  carrier (rel[&T,&T,&T,&T,&T] R)"))),(0,t.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,t.kt)("p",null,"Return the set of all elements in any tuple in a relation."),(0,t.kt)("h4",{id:"examples"},"Examples"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Relation;\nok\nrascal>carrier({<1,10>, <2,20>});\nset[int]: {10,1,20,2}\nrascal>carrier({<1,10,100,1000>, <2,20,200,2000>});\nset[int]: {10,200,20,2,100,1000,1,2000}\n")),(0,t.kt)("h2",{id:"Relation-carrierR"},"function carrierR"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T,&T] carrierR (rel[&T,&T] R, set[&T] S)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T,&T,&T] carrierR (rel[&T,&T,&T] R, set[&T] S)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T,&T,&T,&T] carrierR (rel[&T,&T,&T,&T] R, set[&T] S)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T,&T,&T,&T,&T] carrierR (rel[&T,&T,&T,&T,&T] R, set[&T] S)"))),(0,t.kt)("h4",{id:"synopsis-2"},"Synopsis"),(0,t.kt)("p",null,"A relation restricted to certain element values in tuples."),(0,t.kt)("h4",{id:"description-1"},"Description"),(0,t.kt)("p",null,"Returns relation ",(0,t.kt)("inlineCode",{parentName:"p"},"R")," restricted to tuples with elements in set ",(0,t.kt)("inlineCode",{parentName:"p"},"S"),"."),(0,t.kt)("h4",{id:"examples-1"},"Examples"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Relation;\nok\nrascal>carrierR({<1,10>, <2,20>, <3,30>}, {10, 1, 20});\nrel[int,int]: {<1,10>}\n")),(0,t.kt)("h2",{id:"Relation-carrierX"},"function carrierX"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T,&T] carrierX (rel[&T,&T] R, set[&T] S)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T,&T,&T] carrierX (rel[&T,&T,&T] R, set[&T] S)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T,&T,&T,&T] carrierX (rel[&T,&T,&T,&T] R, set[&T] S)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T,&T,&T,&T,&T] carrierX (rel[&T,&T,&T,&T,&T] R, set[&T] S)"))),(0,t.kt)("h4",{id:"synopsis-3"},"Synopsis"),(0,t.kt)("p",null,"A relation excluding tuples that contain certain element values."),(0,t.kt)("h4",{id:"examples-2"},"Examples"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Relation;\nok\nrascal>carrierX({<1,10>, <2,20>, <3,30>}, {10, 1, 20});\nrel[int,int]: {<3,30>}\n")),(0,t.kt)("h4",{id:"synopsis-4"},"Synopsis"),(0,t.kt)("p",null,"A relation excluded tuples containing certain values."),(0,t.kt)("h4",{id:"description-2"},"Description"),(0,t.kt)("p",null,"Returns relation ",(0,t.kt)("inlineCode",{parentName:"p"},"R")," excluding tuples with some element in ",(0,t.kt)("inlineCode",{parentName:"p"},"S"),"."),(0,t.kt)("h4",{id:"examples-3"},"Examples"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Relation;\nok\nrascal>carrierX({<1,10>, <2,20>, <3,30>}, {10, 1, 20});\nrel[int,int]: {<3,30>}\n")),(0,t.kt)("h2",{id:"Relation-complement"},"function complement"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T0, &T1] complement(rel[&T0, &T1] R)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T0, &T1, &T2] complement(rel[&T0, &T1, &T2] R)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T0, &T1, &T2, &T3] complement(rel[&T0, &T1, &T2, &T3] R)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T0, &T1, &T2, &T3, &T4] complement(rel[&T0, &T1, &T2, &T3, &T4] R)"))),(0,t.kt)("h4",{id:"synopsis-5"},"Synopsis"),(0,t.kt)("p",null,"Complement of a relation."),(0,t.kt)("h4",{id:"description-3"},"Description"),(0,t.kt)("p",null,"Given a relation ",(0,t.kt)("inlineCode",{parentName:"p"},"R")," a new relation ",(0,t.kt)("inlineCode",{parentName:"p"},"U")," can be constructed that contains\nall possible tuples with element values that occur at corresponding tuple positions in ",(0,t.kt)("inlineCode",{parentName:"p"},"R"),".\nThe function ",(0,t.kt)("inlineCode",{parentName:"p"},"complement")," returns the complement of ",(0,t.kt)("inlineCode",{parentName:"p"},"R")," relative to ",(0,t.kt)("inlineCode",{parentName:"p"},"U"),", in other words: ",(0,t.kt)("inlineCode",{parentName:"p"},"U - R"),"."),(0,t.kt)("h4",{id:"examples-4"},"Examples"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Relation;\nok\n")),(0,t.kt)("p",null,"Declare ",(0,t.kt)("inlineCode",{parentName:"p"},"R")," and compute corresponding ",(0,t.kt)("inlineCode",{parentName:"p"},"U"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>R = {<1,10>, <2, 20>, <3, 30>};\nrel[int,int]: {\n  <1,10>,\n  <3,30>,\n  <2,20>\n}\nrascal>U = domain(R) * range(R);\nrel[int,int]: {\n  <1,10>,\n  <1,20>,\n  <1,30>,\n  <3,10>,\n  <3,20>,\n  <3,30>,\n  <2,10>,\n  <2,20>,\n  <2,30>\n}\n")),(0,t.kt)("p",null,"Here is the complement of ",(0,t.kt)("inlineCode",{parentName:"p"},"R")," computed in two ways:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>U - R;\nrel[int,int]: {\n  <1,20>,\n  <1,30>,\n  <3,10>,\n  <3,20>,\n  <2,10>,\n  <2,30>\n}\nrascal>complement({<1,10>, <2, 20>, <3, 30>});\nrel[int,int]: {\n  <1,20>,\n  <1,30>,\n  <3,10>,\n  <3,20>,\n  <2,10>,\n  <2,30>\n}\n")),(0,t.kt)("h2",{id:"Relation-domain"},"function domain"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"set[&T0] domain (rel[&T0,&T1] R)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"set[&T0] domain (rel[&T0,&T1,&T2] R)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"set[&T0] domain (rel[&T0,&T1,&T2,&T3] R)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"set[&T0] domain (rel[&T0,&T1,&T2,&T3,&T4] R)"))),(0,t.kt)("h4",{id:"synopsis-6"},"Synopsis"),(0,t.kt)("p",null,"Domain of a  relation: a set consisting of the first element of each tuple."),(0,t.kt)("h4",{id:"examples-5"},"Examples"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Relation;\nok\nrascal>domain({<1,10>, <2,20>});\nset[int]: {1,2}\nrascal>domain({<"mon", 1>, <"tue", 2>});\nset[str]: {"tue","mon"}\n')),(0,t.kt)("h2",{id:"Relation-domainR"},"function domainR"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T0,&T1] domainR (rel[&T0,&T1] R, set[&T0] S)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T0,&T1,&T2] domainR (rel[&T0,&T1,&T2] R, set[&T0] S)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T0,&T1,&T2,&T3] domainR (rel[&T0,&T1,&T2,&T3] R, set[&T0] S)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T0,&T1,&T2,&T3,&T4] domainR (rel[&T0,&T1,&T2,&T3,&T4] R, set[&T0] S)"))),(0,t.kt)("h4",{id:"synopsis-7"},"Synopsis"),(0,t.kt)("p",null,"Relation restricted to certain domain elements."),(0,t.kt)("h4",{id:"description-4"},"Description"),(0,t.kt)("p",null,"Restriction of a relation ",(0,t.kt)("inlineCode",{parentName:"p"},"R")," to tuples with first element in ",(0,t.kt)("inlineCode",{parentName:"p"},"S"),"."),(0,t.kt)("h4",{id:"examples-6"},"Examples"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Relation;\nok\nrascal>domainR({<1,10>, <2,20>, <3,30>}, {3, 1});\nrel[int,int]: {\n  <1,10>,\n  <3,30>\n}\n")),(0,t.kt)("h2",{id:"Relation-domainX"},"function domainX"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T0,&T1] domainX (rel[&T0,&T1] R, set[&T0] S)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T0,&T1,&T2] domainX (rel[&T0,&T1,&T2] R, set[&T0] S)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T0,&T1,&T2,&T3] domainX (rel[&T0,&T1,&T2,&T3] R, set[&T0] S)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T0,&T1,&T2,&T3,&T4] domainX (rel[&T0,&T1,&T2,&T3,&T4] R, set[&T0] S)"))),(0,t.kt)("h4",{id:"synopsis-8"},"Synopsis"),(0,t.kt)("p",null,"Relation excluding certain domain values."),(0,t.kt)("h4",{id:"description-5"},"Description"),(0,t.kt)("p",null,"Relation ",(0,t.kt)("inlineCode",{parentName:"p"},"R")," excluded tuples with first element in ",(0,t.kt)("inlineCode",{parentName:"p"},"S"),"."),(0,t.kt)("h4",{id:"examples-7"},"Examples"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Relation;\nok\nrascal>domainX({<1,10>, <2,20>, <3,30>}, {3, 1});\nrel[int,int]: {<2,20>}\n")),(0,t.kt)("h2",{id:"Relation-groupDomainByRange"},"function groupDomainByRange"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"set[set[&U]] groupDomainByRange(rel[&U dom, &T ran] input)"))),(0,t.kt)("h4",{id:"synopsis-9"},"Synopsis"),(0,t.kt)("p",null,"Make sets of elements in the domain that relate to the same element in the range."),(0,t.kt)("h4",{id:"examples-8"},"Examples"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Relation;\nok\nrascal>legs = {<"bird", 2>, <"dog", 4>, <"human", 2>, <"spider", 8>, <"millepede", 1000>, <"crab", 8>, <"cat", 4>};\nrel[str,int]: {\n  <"spider",8>,\n  <"human",2>,\n  <"crab",8>,\n  <"cat",4>,\n  <"bird",2>,\n  <"dog",4>,\n  <"millepede",1000>\n}\nrascal>groupDomainByRange(legs);\nset[set[str]]: {\n  {"human","bird"},\n  {"cat","dog"},\n  {"spider","crab"},\n  {"millepede"}\n}\n')),(0,t.kt)("h2",{id:"Relation-groupRangeByDomain"},"function groupRangeByDomain"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"set[set[&T]] groupRangeByDomain(rel[&U dom, &T ran] input)"))),(0,t.kt)("h4",{id:"synopsis-10"},"Synopsis"),(0,t.kt)("p",null,"Make sets of elements in the range that relate to the same element in the domain."),(0,t.kt)("h4",{id:"description-6"},"Description"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Relation;\nok\nrascal>skins = {<"bird", "feather">, <"dog", "fur">, <"tortoise", "shell">, <"human", "skin">, <"fish", "scale">, <"lizard", "scale">, <"crab", "shell">, <"cat", "fur">};\nrel[str,str]: {\n  <"tortoise","shell">,\n  <"human","skin">,\n  <"crab","shell">,\n  <"fish","scale">,\n  <"bird","feather">,\n  <"dog","fur">,\n  <"lizard","scale">,\n  <"cat","fur">\n}\nrascal>groupRangeByDomain(skins);\nset[set[str]]: {\n  {"scale"},\n  {"shell"},\n  {"skin"},\n  {"feather"},\n  {"fur"}\n}\n')),(0,t.kt)("h2",{id:"Relation-ident"},"function ident"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T, &T] ident (set[&T] S)"))),(0,t.kt)("h4",{id:"synopsis-11"},"Synopsis"),(0,t.kt)("p",null,"The identity relation."),(0,t.kt)("h4",{id:"description-7"},"Description"),(0,t.kt)("p",null,"The identity relation for set ",(0,t.kt)("inlineCode",{parentName:"p"},"S"),"."),(0,t.kt)("h4",{id:"examples-9"},"Examples"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Relation;\nok\nrascal>ident({"mon", "tue", "wed"});\nrel[str,str]: {\n  <"tue","tue">,\n  <"mon","mon">,\n  <"wed","wed">\n}\n')),(0,t.kt)("h2",{id:"Relation-invert"},"function invert"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T1, &T0] invert (rel[&T0, &T1] R)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T2, &T1, &T0] invert (rel[&T0, &T1, &T2] R)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T3, &T2, &T1, &T0] invert (rel[&T0, &T1, &T2, &T3] R)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T4, &T3, &T2, &T1, &T0] invert (rel[&T0, &T1, &T2, &T3, &T4] R)"))),(0,t.kt)("h4",{id:"synopsis-12"},"Synopsis"),(0,t.kt)("p",null,"Invert the tuples in a relation."),(0,t.kt)("h4",{id:"examples-10"},"Examples"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Relation;\nok\nrascal>invert({<1,10>, <2,20>});\nrel[int,int]: {\n  <10,1>,\n  <20,2>\n}\n")),(0,t.kt)("h2",{id:"Relation-range"},"function range"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"set[&T1] range (rel[&T0,&T1] R)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T1,&T2] range (rel[&T0,&T1, &T2] R)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T1,&T2,&T3] range (rel[&T0,&T1,&T2,&T3] R)")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T1,&T2,&T3,&T4] range (rel[&T0,&T1,&T2,&T3,&T4] R)"))),(0,t.kt)("h4",{id:"synopsis-13"},"Synopsis"),(0,t.kt)("p",null,"The range (i.e., all but the first element of each tuple) of a relation."),(0,t.kt)("h4",{id:"examples-11"},"Examples"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import Relation;\nok\nrascal>range({<1,10>, <2,20>});\nset[int]: {10,20}\nrascal>range({<"mon", 1>, <"tue", 2>});\nset[int]: {1,2}\n')),(0,t.kt)("h2",{id:"Relation-rangeR"},"function rangeR"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T0,&T1] rangeR (rel[&T0,&T1] R, set[&T2] S)"))),(0,t.kt)("h4",{id:"synopsis-14"},"Synopsis"),(0,t.kt)("p",null,"Relation restricted to certain range values."),(0,t.kt)("h4",{id:"description-8"},"Description"),(0,t.kt)("p",null,"Restriction of binary relation ",(0,t.kt)("inlineCode",{parentName:"p"},"R")," to tuples with second element in set ",(0,t.kt)("inlineCode",{parentName:"p"},"S"),"."),(0,t.kt)("h4",{id:"examples-12"},"Examples"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Relation;\nok\nrascal>rangeR({<1,10>, <2,20>, <3,30>}, {30, 10});\nrel[int,int]: {\n  <1,10>,\n  <3,30>\n}\n")),(0,t.kt)("h2",{id:"Relation-rangeX"},"function rangeX"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"rel[&T0,&T1] rangeX (rel[&T0,&T1] R, set[&T2] S)"))),(0,t.kt)("h4",{id:"synopsis-15"},"Synopsis"),(0,t.kt)("p",null,"Relation excluding certain range values."),(0,t.kt)("h4",{id:"description-9"},"Description"),(0,t.kt)("p",null,"Restriction of binary relation ",(0,t.kt)("inlineCode",{parentName:"p"},"R")," to tuples with second element not in set ",(0,t.kt)("inlineCode",{parentName:"p"},"S"),"."),(0,t.kt)("h4",{id:"examples-13"},"Examples"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Relation;\nok\nrascal>rangeX({<1,10>, <2,20>, <3,30>}, {30, 10});\nrel[int,int]: {<2,20>}\n")),(0,t.kt)("h2",{id:"Relation-index"},"function index"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"map[&K, set[&V]] index(rel[&K, &V] R)"))),(0,t.kt)("h4",{id:"synopsis-16"},"Synopsis"),(0,t.kt)("p",null,"Indexes a binary relation as a map"),(0,t.kt)("h4",{id:"description-10"},"Description"),(0,t.kt)("p",null,"Converts a binary relation to a map of the domain to a set of the range."),(0,t.kt)("h4",{id:"examples-14"},"Examples"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Relation;\nok\nrascal>index({<1,10>, <2,20>, <3,30>, <30,10>});\nmap[int, set[int]]: (\n  1:{10},\n  3:{30},\n  2:{20},\n  30:{10}\n)\n")))}u.isMDXComponent=!0}}]);