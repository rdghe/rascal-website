"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[28557],{3905:(t,e,s)=>{s.d(e,{Zo:()=>u,kt:()=>b});var l=s(67294);function a(t,e,s){return e in t?Object.defineProperty(t,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[e]=s,t}function n(t,e){var s=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),s.push.apply(s,l)}return s}function i(t){for(var e=1;e<arguments.length;e++){var s=null!=arguments[e]?arguments[e]:{};e%2?n(Object(s),!0).forEach((function(e){a(t,e,s[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(s)):n(Object(s)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(s,e))}))}return t}function r(t,e){if(null==t)return{};var s,l,a=function(t,e){if(null==t)return{};var s,l,a={},n=Object.keys(t);for(l=0;l<n.length;l++)s=n[l],e.indexOf(s)>=0||(a[s]=t[s]);return a}(t,e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);for(l=0;l<n.length;l++)s=n[l],e.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(t,s)&&(a[s]=t[s])}return a}var o=l.createContext({}),c=function(t){var e=l.useContext(o),s=e;return t&&(s="function"==typeof t?t(e):i(i({},e),t)),s},u=function(t){var e=c(t.components);return l.createElement(o.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},k=l.forwardRef((function(t,e){var s=t.components,a=t.mdxType,n=t.originalType,o=t.parentName,u=r(t,["components","mdxType","originalType","parentName"]),k=c(s),b=a,p=k["".concat(o,".").concat(b)]||k[b]||d[b]||n;return s?l.createElement(p,i(i({ref:e},u),{},{components:s})):l.createElement(p,i({ref:e},u))}));function b(t,e){var s=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var n=s.length,i=new Array(n);i[0]=k;var r={};for(var o in e)hasOwnProperty.call(e,o)&&(r[o]=e[o]);r.originalType=t,r.mdxType="string"==typeof t?t:a,i[1]=r;for(var c=2;c<n;c++)i[c]=s[c];return l.createElement.apply(null,i)}return l.createElement.apply(null,s)}k.displayName="MDXCreateElement"},97034:(t,e,s)=>{s.r(e),s.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>n,metadata:()=>r,toc:()=>c});var l=s(83117),a=(s(67294),s(3905));const n={title:"module lang::rascal::tests::basic::Sets"},i=void 0,r={unversionedId:"Library/lang/rascal/tests/basic/Sets",id:"Library/lang/rascal/tests/basic/Sets",title:"module lang::rascal::tests::basic::Sets",description:"Usage",source:"@site/docs/Library/lang/rascal/tests/basic/Sets.md",sourceDirName:"Library/lang/rascal/tests/basic",slug:"/Library/lang/rascal/tests/basic/Sets",permalink:"/docs/Library/lang/rascal/tests/basic/Sets",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Library/lang/rascal/tests/basic/Sets.md",tags:[],version:"current",frontMatter:{title:"module lang::rascal::tests::basic::Sets"},sidebar:"tutorialSidebar",previous:{title:"module lang::rascal::tests::basic::Relations",permalink:"/docs/Library/lang/rascal/tests/basic/Relations"},next:{title:"module lang::rascal::tests::basic::SolvedIssues",permalink:"/docs/Library/lang/rascal/tests/basic/SolvedIssues"}},o={},c=[{value:"Usage",id:"usage",level:4},{value:"function eqSet",id:"lang-rascal-tests-basic-Sets-eqSet",level:2},{value:"function elemInAorB",id:"lang-rascal-tests-basic-Sets-elemInAorB",level:2},{value:"function isUnion",id:"lang-rascal-tests-basic-Sets-isUnion",level:2},{value:"function union1",id:"lang-rascal-tests-basic-Sets-union1",level:2},{value:"function union2",id:"lang-rascal-tests-basic-Sets-union2",level:2},{value:"function union3",id:"lang-rascal-tests-basic-Sets-union3",level:2},{value:"function elemInAandNotInB",id:"lang-rascal-tests-basic-Sets-elemInAandNotInB",level:2},{value:"function isDiff",id:"lang-rascal-tests-basic-Sets-isDiff",level:2},{value:"function diff",id:"lang-rascal-tests-basic-Sets-diff",level:2},{value:"function isEqual",id:"lang-rascal-tests-basic-Sets-isEqual",level:2},{value:"function equal1",id:"lang-rascal-tests-basic-Sets-equal1",level:2},{value:"function equal2",id:"lang-rascal-tests-basic-Sets-equal2",level:2},{value:"function notEqual1",id:"lang-rascal-tests-basic-Sets-notEqual1",level:2},{value:"function notEqual2",id:"lang-rascal-tests-basic-Sets-notEqual2",level:2},{value:"function intersection",id:"lang-rascal-tests-basic-Sets-intersection",level:2},{value:"function lesseq",id:"lang-rascal-tests-basic-Sets-lesseq",level:2},{value:"function less",id:"lang-rascal-tests-basic-Sets-less",level:2},{value:"function greatereq",id:"lang-rascal-tests-basic-Sets-greatereq",level:2},{value:"function greater",id:"lang-rascal-tests-basic-Sets-greater",level:2},{value:"function tst_in",id:"lang-rascal-tests-basic-Sets-tst_in",level:2},{value:"function tst_notin",id:"lang-rascal-tests-basic-Sets-tst_notin",level:2},{value:"function splicing",id:"lang-rascal-tests-basic-Sets-splicing",level:2},{value:"function similar",id:"lang-rascal-tests-basic-Sets-similar",level:2},{value:"function getClass",id:"lang-rascal-tests-basic-Sets-getClass",level:2},{value:"function tst_classify",id:"lang-rascal-tests-basic-Sets-tst_classify",level:2},{value:"function tst_getOneFrom",id:"lang-rascal-tests-basic-Sets-tst_getOneFrom",level:2},{value:"function tst_group1",id:"lang-rascal-tests-basic-Sets-tst_group1",level:2},{value:"function tst_group2",id:"lang-rascal-tests-basic-Sets-tst_group2",level:2},{value:"function tst_index1",id:"lang-rascal-tests-basic-Sets-tst_index1",level:2},{value:"function tst_index2",id:"lang-rascal-tests-basic-Sets-tst_index2",level:2},{value:"function tst_index3",id:"lang-rascal-tests-basic-Sets-tst_index3",level:2},{value:"function tst_max",id:"lang-rascal-tests-basic-Sets-tst_max",level:2},{value:"function tst_min",id:"lang-rascal-tests-basic-Sets-tst_min",level:2},{value:"function tst_size",id:"lang-rascal-tests-basic-Sets-tst_size",level:2},{value:"function tst_sort",id:"lang-rascal-tests-basic-Sets-tst_sort",level:2},{value:"function tst_sum",id:"lang-rascal-tests-basic-Sets-tst_sum",level:2},{value:"function tst_takeOneFrom",id:"lang-rascal-tests-basic-Sets-tst_takeOneFrom",level:2},{value:"function tst_toList",id:"lang-rascal-tests-basic-Sets-tst_toList",level:2},{value:"function tst_toMap",id:"lang-rascal-tests-basic-Sets-tst_toMap",level:2},{value:"data X",id:"lang-rascal-tests-basic-Sets-X",level:2},{value:"function tst_toMapUnique",id:"lang-rascal-tests-basic-Sets-tst_toMapUnique",level:2},{value:"function dtstDifference",id:"lang-rascal-tests-basic-Sets-dtstDifference",level:2},{value:"function dtstIntersection",id:"lang-rascal-tests-basic-Sets-dtstIntersection",level:2}],u={toc:c};function d(t){let{components:e,...s}=t;return(0,a.kt)("wrapper",(0,l.Z)({},u,s,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"import lang::rascal::tests::basic::Sets;")),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-eqSet"},"function eqSet"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool eqSet(value a, value b)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-elemInAorB"},"function elemInAorB"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool elemInAorB(&T x, set[&T] A, set[&T] B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-isUnion"},"function isUnion"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isUnion(set[&T] A, set[&T] B, set[&T] C)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-union1"},"function union1"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool union1(set[&T] A, set[&T] B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-union2"},"function union2"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool union2(     &T A, set[&T] B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-union3"},"function union3"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool union3(set[&T] A,      &T B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-elemInAandNotInB"},"function elemInAandNotInB"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool elemInAandNotInB(&T x, set[&T] A, set[&T] B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-isDiff"},"function isDiff"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isDiff(set[&T] A, set[&T] B, set[&T] C)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-diff"},"function diff"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool diff(set[&T] A, set[&T] B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-isEqual"},"function isEqual"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isEqual(set[&T] A, set[&T] B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-equal1"},"function equal1"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool equal1(set[&T] A)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-equal2"},"function equal2"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool equal2(set[int] A, set[int] B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-notEqual1"},"function notEqual1"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool notEqual1(set[&T] A)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-notEqual2"},"function notEqual2"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool notEqual2(set[int] A, set[int] B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-intersection"},"function intersection"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool intersection(set[&T] A, set[&T] B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-lesseq"},"function lesseq"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool lesseq(set[int] A, set[int] B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-less"},"function less"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool less(set[int] A, set[int] B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-greatereq"},"function greatereq"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool greatereq(set[int] A, set[int] B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-greater"},"function greater"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool greater(set[int] A, set[int] B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_in"},"function tst_in"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_in(int A, set[int] B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_notin"},"function tst_notin"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_notin(int A, set[int] B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-splicing"},"function splicing"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool splicing(set[&T] A, set[&T] B)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-similar"},"function similar"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool similar(int a, int b)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-getClass"},"function getClass"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int getClass(int a)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_classify"},"function tst_classify"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_classify(set[int] S)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_getOneFrom"},"function tst_getOneFrom"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_getOneFrom(set[&A] S)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_group1"},"function tst_group1"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_group1(set[int] S)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_group2"},"function tst_group2"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_group2(set[int] S)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_index1"},"function tst_index1"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_index1(set[int] S)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_index2"},"function tst_index2"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_index2(set[int] S)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_index3"},"function tst_index3"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_index3(set[int] S)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_max"},"function tst_max"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_max(set[int] S)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_min"},"function tst_min"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_min(set[int] S)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_size"},"function tst_size"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_size(set[int] S)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_sort"},"function tst_sort"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_sort(set[int] S)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_sum"},"function tst_sum"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_sum(set[int] S)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_takeOneFrom"},"function tst_takeOneFrom"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_takeOneFrom(set[int] S)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_toList"},"function tst_toList"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_toList(set[int] S)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_toMap"},"function tst_toMap"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_toMap(rel[int, int] S)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-X"},"data X"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"data X  \n     = y(int y)\n     ;\n")),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-tst_toMapUnique"},"function tst_toMapUnique"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool tst_toMapUnique(set[int] D, set[int] R)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-dtstDifference"},"function dtstDifference"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool dtstDifference(set[&T] s)"))),(0,a.kt)("h2",{id:"lang-rascal-tests-basic-Sets-dtstIntersection"},"function dtstIntersection"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test bool dtstIntersection(set[&T] s)"))))}d.isMDXComponent=!0}}]);