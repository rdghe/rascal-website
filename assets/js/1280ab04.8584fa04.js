"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[24895],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var i=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function u(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=i.createContext({}),o=function(e){var t=i.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=o(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=o(a),f=n,b=p["".concat(s,".").concat(f)]||p[f]||d[f]||r;return a?i.createElement(b,l(l({ref:t},c),{},{components:a})):i.createElement(b,l({ref:t},c))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=p;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:n,l[1]=u;for(var o=2;o<r;o++)l[o]=a[o];return i.createElement.apply(null,l)}return i.createElement.apply(null,a)}p.displayName="MDXCreateElement"},95338:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>u,toc:()=>o});var i=a(83117),n=(a(67294),a(3905));const r={title:"module util::UUID"},l=void 0,u={unversionedId:"Library/util/UUID",id:"Library/util/UUID",title:"module util::UUID",description:"Usage",source:"@site/docs/Library/util/UUID.md",sourceDirName:"Library/util",slug:"/Library/util/UUID",permalink:"/docs/Library/util/UUID",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/util/UUID.md",tags:[],version:"current",frontMatter:{title:"module util::UUID"},sidebar:"tutorialSidebar",previous:{title:"module util::Test",permalink:"/docs/Library/util/Test"},next:{title:"module util::Webserver",permalink:"/docs/Library/util/Webserver"}},s={},o=[{value:"Usage",id:"usage",level:4},{value:"function uuid",id:"util-UUID-uuid",level:2},{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4},{value:"Pitfalls",id:"pitfalls",level:4},{value:"function uuidi",id:"util-UUID-uuidi",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Pitfalls",id:"pitfalls-1",level:4}],c={toc:o};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,i.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"usage"},"Usage"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"import util::UUID;")),(0,n.kt)("h2",{id:"util-UUID-uuid"},"function uuid"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"loc uuid()"))),(0,n.kt)("h4",{id:"synopsis"},"Synopsis"),(0,n.kt)("p",null,"generates a unique identifier shaped as a ",(0,n.kt)("inlineCode",{parentName:"p"},"loc")),(0,n.kt)("h4",{id:"description"},"Description"),(0,n.kt)("p",null,"This function generates a UUID, see ",(0,n.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Universally_unique_identifier"},"http://en.wikipedia.org/wiki/Universally_unique_identifier"),".\nSince UUIDs are useful to assign an opaque and unique identity to data, the function returns\na ",(0,n.kt)("a",{parentName:"p",href:"../../Rascal/Expressions/Values/Location"},"Location")," (which is the preferred representation for encoding identities in Rascal)"),(0,n.kt)("h4",{id:"examples"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import util::UUID;\nok\n")),(0,n.kt)("p",null,"The uuid() function generates a location with the authority showing the literal canonical UUID string"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>uuid()\nloc: |uuid://dade67d7-e9a4-4502-8d96-80ec49cd036b|\n")),(0,n.kt)("p",null,"Use it to relate identies to data objects, as in this example which adds a field to a relation:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>myData = { <i,i*i> | i <- [1..11] }; \nrel[int,int]: {\n  <10,100>,\n  <7,49>,\n  <1,1>,\n  <3,9>,\n  <9,81>,\n  <2,4>,\n  <4,16>,\n  <6,36>,\n  <5,25>,\n  <8,64>\n}\nrascal>rel[int n, int square, loc id] myUniqueData = { <i,j,uuid()> | <i,j> <- myData };\nrel[int n,int square,loc id]: {\n  <3,9,|uuid://3d364708-61a6-44b9-a897-2ec84f7b5751|>,\n  <7,49,|uuid://251f38ce-6225-4f3c-bd00-0201589e79fe|>,\n  <8,64,|uuid://3dd380f6-b6dd-4a92-88ff-91000e6091c8|>,\n  <4,16,|uuid://3b38bde4-fa4a-4a30-b465-e6a5f58133fd|>,\n  <1,1,|uuid://5ca8ae7b-bf1c-4127-b7f0-d93c7a089d25|>,\n  <10,100,|uuid://83c56006-afc6-46fc-9389-d14e2cc56915|>,\n  <6,36,|uuid://930a0d92-b73d-4f67-b936-2f19ef208cb9|>,\n  <5,25,|uuid://8a5e9e1e-4c41-40cb-ad88-299ac1eb7474|>,\n  <9,81,|uuid://98882e70-3276-442f-b1bd-f917a541476a|>,\n  <2,4,|uuid://7e80d58c-952b-408d-ac04-4fa0e7daef65|>\n}\nrascal>map[tuple[int i, int j] t, loc id] myUniqueMap = (<i,j>:uuid() | <i,j> <- myData );\nmap[tuple[int i,int j] t, loc id]: (\n  <6,36>:|uuid://85eb7668-3d1f-4a3f-a1c0-eb501928da80|,\n  <2,4>:|uuid://92500672-956f-4227-93fb-02f5502e77a5|,\n  <7,49>:|uuid://aa742cfb-4519-4ae5-9837-6edf62b33635|,\n  <9,81>:|uuid://361eecaf-0f20-4406-9b90-769c52f83f0c|,\n  <8,64>:|uuid://60425959-66b0-45a4-a88f-827eb272a2b2|,\n  <5,25>:|uuid://0c05f6a2-831d-43f8-a192-6c934bb6cdbd|,\n  <4,16>:|uuid://fe547ca2-5d7c-46e0-95bd-23124c6b6fd0|,\n  <1,1>:|uuid://3c01e73f-0c10-42bc-a6f3-b3ffcfb2a15a|,\n  <10,100>:|uuid://21a9c69e-c8ec-43b7-b5fc-2c61b5017195|,\n  <3,9>:|uuid://be4dcfc9-7410-4e5f-80db-0da59779fb9c|\n)\n")),(0,n.kt)("p",null,"Note how uuid() should always generate a fresh value:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>assert uuid() != uuid(); \nbool: true\n")),(0,n.kt)("h4",{id:"benefits"},"Benefits"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"../../Rascal/Expressions/Values/Location"},"Location"),"s are used for identifying program elements or model elements in Rascal. The uuid() function provides\nan quick-and-easy way of acquiring such an identity without having to design a naming scheme.")),(0,n.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"UUIDs are a quick and dirty way of identifying data which may lead to hard to debug code. A naming scheme for ",(0,n.kt)("a",{parentName:"li",href:"../../Rascal/Expressions/Values/Location"},"Location"),"s is better because it generates human readable\n",(0,n.kt)("a",{parentName:"li",href:"../../Rascal/Expressions/Values/Location"},"Location"),"s which carry meaning. For example consider the difference in readability between these two values:\n",(0,n.kt)("inlineCode",{parentName:"li"},"|uuid://47fdcd64-4fd0-41a1-8aa3-61c5b272c3fc|")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"|java+class:///java/lang/Object|"),". Both may lead to the same\nresults in your computation, but if we print either of them out, one of them is opaque and the other is transparent. A transparent naming scheme is preferable for\ndebugging purposes.")),(0,n.kt)("h2",{id:"util-UUID-uuidi"},"function uuidi"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"int uuidi()"))),(0,n.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,n.kt)("p",null,"see ","[uuid]",", this function does the same except return the UUID as an int."),(0,n.kt)("h4",{id:"pitfalls-1"},"Pitfalls"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"beware that this integer is almost guaranteed to use 128 bits, so communicating it outside of\nRascal should not be done via a Java 32-bit integer.")))}d.isMDXComponent=!0}}]);