"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[50295],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>y});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=u(a),y=r,f=d["".concat(s,".").concat(y)]||d[y]||c[y]||i;return a?n.createElement(f,l(l({ref:t},m),{},{components:a})):n.createElement(f,l({ref:t},m))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},48895:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var n=a(83117),r=(a(67294),a(3905));const i={title:"module lang::rascal::grammar::definition::Layout"},l=void 0,o={unversionedId:"Library/lang/rascal/grammar/definition/Layout",id:"Library/lang/rascal/grammar/definition/Layout",title:"module lang::rascal::grammar::definition::Layout",description:"Usage",source:"@site/docs/Library/lang/rascal/grammar/definition/Layout.md",sourceDirName:"Library/lang/rascal/grammar/definition",slug:"/Library/lang/rascal/grammar/definition/Layout",permalink:"/docs/Library/lang/rascal/grammar/definition/Layout",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Library/lang/rascal/grammar/definition/Layout.md",tags:[],version:"current",frontMatter:{title:"module lang::rascal::grammar::definition::Layout"},sidebar:"tutorialSidebar",previous:{title:"module lang::rascal::grammar::definition::Keywords",permalink:"/docs/Library/lang/rascal/grammar/definition/Keywords"},next:{title:"module lang::rascal::grammar::definition::Literals",permalink:"/docs/Library/lang/rascal/grammar/definition/Literals"}},s={},u=[{value:"Usage",id:"usage",level:4},{value:"function layouts",id:"lang-rascal-grammar-definition-Layout-layouts",level:2},{value:"function allLayouts",id:"lang-rascal-grammar-definition-Layout-allLayouts",level:2},{value:"function activeLayout",id:"lang-rascal-grammar-definition-Layout-activeLayout",level:2},{value:"function layouts",id:"lang-rascal-grammar-definition-Layout-layouts",level:2},{value:"function intermix",id:"lang-rascal-grammar-definition-Layout-intermix",level:2},{value:"function sepInOthers",id:"lang-rascal-grammar-definition-Layout-sepInOthers",level:2},{value:"function regulars",id:"lang-rascal-grammar-definition-Layout-regulars",level:2}],m={toc:u};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"import lang::rascal::grammar::definition::Layout;")),(0,r.kt)("h2",{id:"lang-rascal-grammar-definition-Layout-\\layouts"},"function \\layouts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GrammarDefinition \\layouts(GrammarDefinition def)"))),(0,r.kt)("p",null,"intermixes the actively visible layout definition in each module into the relevant syntax definitions"),(0,r.kt)("h2",{id:"lang-rascal-grammar-definition-Layout-allLayouts"},"function allLayouts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set[Symbol] allLayouts(set[str] defs, GrammarDefinition def)"))),(0,r.kt)("p",null,"collects for a set of modules the names of all layout sorts and returns them as sorts for later processing"),(0,r.kt)("h2",{id:"lang-rascal-grammar-definition-Layout-activeLayout"},"function activeLayout"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Symbol activeLayout(str name, set[str] deps, GrammarDefinition def)"))),(0,r.kt)("p",null,"computes which layout definitions are visible in a certain given module.\nif a module contains a layout definition, this overrides any imported layout definition\nif a module does not contain a layout definition, it will collect the definitions from all imports (not recursively),\nand also collect the definitions from all extends (recursively).\nthe static checker should check whether multiple visible layout definitions are active, because this function\nwill just produce an arbitrary one if there are multiple definitions"),(0,r.kt)("h2",{id:"lang-rascal-grammar-definition-Layout-\\layouts"},"function \\layouts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Grammar \\layouts(Grammar g, Symbol l, set[Symbol] others)"))),(0,r.kt)("p",null,"intersperses layout symbols in all non-lexical productions"),(0,r.kt)("h2",{id:"lang-rascal-grammar-definition-Layout-intermix"},"function intermix"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"list[Symbol] intermix(list[Symbol] syms, Symbol l, set[Symbol] others)"))),(0,r.kt)("h2",{id:"lang-rascal-grammar-definition-Layout-sepInOthers"},"function sepInOthers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bool sepInOthers(Symbol sep, set[Symbol] others)"))),(0,r.kt)("h2",{id:"lang-rascal-grammar-definition-Layout-regulars"},"function regulars"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Symbol regulars(Symbol s, Symbol l, set[Symbol] others)"))))}c.isMDXComponent=!0}}]);