"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[26748],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,v=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return t?a.createElement(v,s(s({ref:n},c),{},{components:t})):a.createElement(v,s({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},65235:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const i={title:"Runtime"},s=void 0,o={unversionedId:"Recipes/Languages/Lisra/Runtime/index",id:"Recipes/Languages/Lisra/Runtime/index",title:"Runtime",description:"Synopsis",source:"@site/docs/Recipes/Languages/Lisra/Runtime/index.md",sourceDirName:"Recipes/Languages/Lisra/Runtime",slug:"/Recipes/Languages/Lisra/Runtime/",permalink:"/docs/Recipes/Languages/Lisra/Runtime/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Recipes/Languages/Lisra/Runtime/index.md",tags:[],version:"current",frontMatter:{title:"Runtime"},sidebar:"tutorialSidebar",previous:{title:"Pretty",permalink:"/docs/Recipes/Languages/Lisra/Pretty/"},next:{title:"Syntax",permalink:"/docs/Recipes/Languages/Lisra/Syntax/"}},l={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"The runtime representation of Lisp programs and data."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"There are several aspects of the runtime representation of Lisp programs and Lisp data\nthat have to be described:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The representation of values (see ",(0,r.kt)("inlineCode",{parentName:"li"},"Lval")," below)."),(0,r.kt)("li",{parentName:"ul"},"The handling of the ",(0,r.kt)("em",{parentName:"li"},"scope")," of variables (see ",(0,r.kt)("inlineCode",{parentName:"li"},"Scope"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Env"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"makeEnv")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"find")," below)."),(0,r.kt)("li",{parentName:"ul"},"The way the interpreter returns its results (see ",(0,r.kt)("inlineCode",{parentName:"li"},"Result")," below).")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'module demo::lang::Lisra::Runtime\n\nimport Prelude;\n\ndata Lval // <1>\n     = Integer(int n)   \n     | Atom(str name)\n     | List(list[Lval] elms)\n     | Closure(Result(list[Lval] args, Env env))\n     ;\n         \nalias Scope  = map[Lval,Lval]; // <2>\nalias Env    = list[Scope];\n\npublic Env emptyEnv = [()];\n\nEnv makeEnv(list[Lval] vars, list[Lval] values, Env outer) = // <3>\n   [(vars[i] : values[i] | i <- index(vars))] + outer;\n\nint find(Lval sym, Env e){ // <4>\n   for(n <- index(e))\n       if(e[n][sym]?)\n          return n;\n   return -1;\n}\n\npublic Lval TRUE  = Atom("#t"); // <5>\npublic Lval FALSE = Atom("#f");\n\nalias Result = tuple[Lval val, Env env]; // <6>\n\n')),(0,r.kt)("p",null,"<1> The data type ",(0,r.kt)("inlineCode",{parentName:"p"},"Lval")," takes care of the representation of Lisp values.\nIt covers integers, atoms, lists and closures (the representation of a functions and\nthe context in which it will be executed)."),(0,r.kt)("p",null,"<2> A ",(0,r.kt)("inlineCode",{parentName:"p"},"Scope")," describes the binding of several related variables to their value.\nSince scopes may be nested, an environment (",(0,r.kt)("inlineCode",{parentName:"p"},"Env"),") consisted of a list of scope.\nThe most inner scope is at the start of the list and the most global one at the end."),(0,r.kt)("p",null,"<3> Creating a new scope is done by ",(0,r.kt)("inlineCode",{parentName:"p"},"makeEnv")," which takes a list of variables\n(represented by ",(0,r.kt)("inlineCode",{parentName:"p"},"Lval"),"s, in most cases this will be an atom like ",(0,r.kt)("inlineCode",{parentName:"p"},'Atom("X")'),"),\na list of values and creates a new scope in front of the current environment."),(0,r.kt)("p",null,"<4> The function ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," tries to locate the scope in which a name was previously defined.\nIt searches the nested scopes inside-out and returns the ",(0,r.kt)("em",{parentName:"p"},"index")," in the given environment\nof the scope in which the name is defined, or ",(0,r.kt)("inlineCode",{parentName:"p"},"-1")," if it is not found."),(0,r.kt)("p",null,"<5> We define useful constants for true and false (the atoms ",(0,r.kt)("inlineCode",{parentName:"p"},"#t")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"#f"),", respectively)."),(0,r.kt)("p",null,"<6> Finally, we define ",(0,r.kt)("inlineCode",{parentName:"p"},"Result")," as a tuple of an ",(0,r.kt)("inlineCode",{parentName:"p"},"Lval")," and an ",(0,r.kt)("inlineCode",{parentName:"p"},"Env"),".\nEach step during interpretation will thus return the value it computed and\na possibly modified environment."))}u.isMDXComponent=!0}}]);