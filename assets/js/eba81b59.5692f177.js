"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[95413],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(a),m=l,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return a?n.createElement(k,i(i({ref:t},c),{},{components:a})):n.createElement(k,i({ref:t},c))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},704:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(83117),l=(a(67294),a(3905));const r={title:"lang::csv::IO"},i=void 0,o={unversionedId:"Library/lang/csv/IO",id:"Library/lang/csv/IO",title:"lang::csv::IO",description:"Usage",source:"@site/docs/Library/lang/csv/IO.md",sourceDirName:"Library/lang/csv",slug:"/Library/lang/csv/IO",permalink:"/docs/Library/lang/csv/IO",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/lang/csv/IO.md",tags:[],version:"current",frontMatter:{title:"lang::csv::IO"},sidebar:"tutorialSidebar",previous:{title:"lang::csv",permalink:"/docs/Library/lang/csv/"},next:{title:"lang::csv::ast",permalink:"/docs/Library/lang/csv/ast/"}},s={},p=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"function readCSV",id:"lang-csv-IO-readCSV",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Description",id:"description-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"function getCSVType",id:"lang-csv-IO-getCSVType",level:2},{value:"function writeCSV",id:"lang-csv-IO-writeCSV",level:2},{value:"Synopsis",id:"synopsis-2",level:4},{value:"Description",id:"description-2",level:4},{value:"Examples",id:"examples-2",level:4},{value:"function loadCSV",id:"lang-csv-IO-loadCSV",level:2},{value:"function loadNormalizedCSV",id:"lang-csv-IO-loadNormalizedCSV",level:2},{value:"function generate",id:"lang-csv-IO-generate",level:2},{value:"Synopsis",id:"synopsis-3",level:4}],c={toc:p};function d(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"usage"},"Usage"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import lang::csv::IO;")),(0,l.kt)("h4",{id:"synopsis"},"Synopsis"),(0,l.kt)("p",null,"Functions for reading and writing Comma-Separated Values (CSV) files."),(0,l.kt)("h4",{id:"description"},"Description"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"http://tools.ietf.org/html/rfc4180%5BCSV"},"http://tools.ietf.org/html/rfc4180[CSV")," format] is used for exchanging\ninformation between spreadsheets and databases. A CSV file has the following structure:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"An optional header line consisting of field names separated by comma's."),(0,l.kt)("li",{parentName:"ul"},"One or more lines consisting of values separated by comma's.")),(0,l.kt)("p",null,"The following functions are provided:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/lang/csv/IO#lang::csv::IO-generate"},"Library:function:lang::csv::IO::generate")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/lang/csv/IO#lang::csv::IO-getCSVType"},"Library:function:lang::csv::IO::get c s v type")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/lang/csv/IO#lang::csv::IO-loadCSV"},"Library:function:lang::csv::IO::load c sV")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/lang/csv/IO#lang::csv::IO-loadNormalizedCSV"},"Library:function:lang::csv::IO::load normalized c sV")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/lang/csv/IO#lang::csv::IO-readCSV"},"Library:function:lang::csv::IO::read c sV")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/Library/lang/csv/IO#lang::csv::IO-writeCSV"},"Library:function:lang::csv::IO::write c sV"))),(0,l.kt)("h4",{id:"examples"},"Examples"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"CSV file with headers")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csv"},"field_name1,field_name2,field_name3\naaa,bbb,ccc \nzzz,yyy,xxx \n")),(0,l.kt)("h2",{id:"lang-csv-IO-readCSV"},"function readCSV"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'value readCSV(loc location, bool header = true, str separator = ",", str encoding = "UTF8")')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"value readCSV(loc location, map[str,str] options)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'&T readCSV(type[&T] result, loc location, bool header = true, str separator = ",", str encoding = "UTF8")'))),(0,l.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,l.kt)("p",null,"Read a relation from a CSV (Comma Separated Values) file."),(0,l.kt)("h4",{id:"description-1"},"Description"),(0,l.kt)("p",null,"Read a CSV file and return a value of a required type."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"result")," argument is the required type of the value that is produced by reading the CSV\nthat is found at ",(0,l.kt)("inlineCode",{parentName:"p"},"location"),".\nOptionally, the following arguments can be supplied:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"header = true")," specifies that a header is present (default)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"header = false")," specifies that no header is present."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'separator = ","')," specifies that ",(0,l.kt)("inlineCode",{parentName:"li"},",")," is the separator character between fields (default).")),(0,l.kt)("p",null,"The CSV data should conform to the specified type (if any)."),(0,l.kt)("p",null,"If the required type is not specified, it is ",(0,l.kt)("em",{parentName:"p"},"inferred")," in three steps:"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Step 1"),": The type of each field occurrence is inferred from its contents using the\nfollowing rules:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"An empty value is of type ",(0,l.kt)("inlineCode",{parentName:"li"},"void"),"."),(0,l.kt)("li",{parentName:"ul"},"A field that contains a string that corresponds to a number is numeric."),(0,l.kt)("li",{parentName:"ul"},"A field that contains ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"false")," is of type is ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"),"."),(0,l.kt)("li",{parentName:"ul"},"In all other cases the field is of type ",(0,l.kt)("inlineCode",{parentName:"li"},"str"),".")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Step 2"),": The type of each field is inferred from the type of all of its occurrences:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If all occurrences have a numeric type, then the smallest possible type is used."),(0,l.kt)("li",{parentName:"ul"},"If the occurrences have a mixed type, i.e., numeric, non-numeric, boolean or string, then the type is ",(0,l.kt)("inlineCode",{parentName:"li"},"str"),"."),(0,l.kt)("li",{parentName:"ul"},"If the requested type for a field is ",(0,l.kt)("inlineCode",{parentName:"li"},"str")," and another type would be inferred by the preceeding two rules,\nits inferred type will be ",(0,l.kt)("inlineCode",{parentName:"li"},"str"),".")),(0,l.kt)("p",null,"Reading the values in fields is straightforward, except for the case that the text in the field is enclosed between double quotes (",(0,l.kt)("inlineCode",{parentName:"p"},'"'),"):"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the text may include line breaks which are represented as ",(0,l.kt)("inlineCode",{parentName:"li"},"\\n")," in the resulting string value of the field."),(0,l.kt)("li",{parentName:"ul"},"the text may contain escaped double quotes (",(0,l.kt)("inlineCode",{parentName:"li"},'""'),") which are represented as ",(0,l.kt)("inlineCode",{parentName:"li"},'\\"')," in the resulting string value.")),(0,l.kt)("h4",{id:"examples-1"},"Examples"),(0,l.kt)("p",null,"Given is the follwing file ",(0,l.kt)("inlineCode",{parentName:"p"},"ex1.csv"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal"},"position;artist;title;year\n1;Eagles;Hotel California;1977\n2;Queen;Bohemian rhapsody;1975\n3;Boudewijn de Groot;Avond;1997\n")),(0,l.kt)("p",null,"We can read it in various ways:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import lang::csv::IO;\nok\nrascal>R1 = readCSV(#rel[int position, str artist, str title, int year],  |project://rascal/src/org/rascalmpl/library/lang/csv/examples/ex1.csv|, separator = ";");\nrel[int position,str artist,str title,int year]: {\n  <1,"Eagles","Hotel California",1977>,\n  <2,"Queen","Bohemian rhapsody",1975>,\n  <3,"Boudewijn de Groot","Avond",1997>\n}\n')),(0,l.kt)("p",null,"Now we can, for instance, select one of the fields of ",(0,l.kt)("inlineCode",{parentName:"p"},"R1"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>R1.artist;\nset[str]: {"Queen","Boudewijn de Groot","Eagles"}\n')),(0,l.kt)("p",null,"It is also possible to infer the type:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>R1 = readCSV(|project://rascal/src/org/rascalmpl/library/lang/csv/examples/ex1.csv|, separator = ";");\nrel[int position,str artist,str title,int year]: {\n  <1,"Eagles","Hotel California",1977>,\n  <2,"Queen","Bohemian rhapsody",1975>,\n  <3,"Boudewijn de Groot","Avond",1997>\n}\n')),(0,l.kt)("h2",{id:"lang-csv-IO-getCSVType"},"function getCSVType"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'type[value] getCSVType(loc location, bool header = true, str separator = ",", str encoding = "UTF8")'))),(0,l.kt)("h2",{id:"lang-csv-IO-writeCSV"},"function writeCSV"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'void writeCSV(type[&T] schema, &T relation, loc location, bool header = true, str separator = ",", str encoding = "UTF8")'))),(0,l.kt)("h4",{id:"synopsis-2"},"Synopsis"),(0,l.kt)("p",null,"Write a relation to a CSV (Comma Separated Values) file."),(0,l.kt)("h4",{id:"description-2"},"Description"),(0,l.kt)("p",null,"Write ",(0,l.kt)("inlineCode",{parentName:"p"},"relation")," to a CSV file at ",(0,l.kt)("inlineCode",{parentName:"p"},"location"),".\nThe options influence the way the actrual CSV file is written:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"header"),": add or omit a header (based on the labels of the relation)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"separator"),": defines the separator character between fields (default is ",(0,l.kt)("inlineCode",{parentName:"li"},","),").")),(0,l.kt)("h4",{id:"examples-2"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import lang::csv::IO;\nok\nrascal>rel[int position, str artist, str title, int year] R1 = {\n>>>>>>>  <1,"Eagles","Hotel California",1977>,\n>>>>>>>  <2,"Queen","Bohemian rhapsody",1975>,\n>>>>>>>  <3,"Boudewijn de Groot","Avond",1997>\n>>>>>>>};\nrel[int position,str artist,str title,int year]: {\n  <1,"Eagles","Hotel California",1977>,\n  <2,"Queen","Bohemian rhapsody",1975>,\n  <3,"Boudewijn de Groot","Avond",1997>\n}\n')),(0,l.kt)("p",null,"we can write the CSV with a header row:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>writeCSV(#rel[int position, str artist, str title, int year], R1, |tmp:///ex1a.csv|);\nok\nrascal>\n")),(0,l.kt)("p",null,"or write it without the header row:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>writeCSV(#rel[int, str, str, int], R1, |tmp:///ex1b.csv|, header = false, separator = ";");\nok\n')),(0,l.kt)("p",null,"The result of both calls to writeCSV are included below:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ex1a.csv")," (with a header line and default separator ",(0,l.kt)("inlineCode",{parentName:"p"},","),"):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal"},"position,artist,title,year\n1,Eagles,Hotel California,1977\n2,Queen,Bohemian rhapsody,1975\n3,Boudewijn de Groot,Avond,1997\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ex1b.csv")," (without a header line with separator ",(0,l.kt)("inlineCode",{parentName:"p"},";"),"):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal"},"1;Eagles;Hotel California;1977\n2;Queen;Bohemian rhapsody;1975\n3;Boudewijn de Groot;Avond;1997\n")),(0,l.kt)("h2",{id:"lang-csv-IO-loadCSV"},"function loadCSV"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"lang::csv::ast::CSV::Table loadCSV(loc l)"))),(0,l.kt)("h2",{id:"lang-csv-IO-loadNormalizedCSV"},"function loadNormalizedCSV"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"lang::csv::ast::CSV::Table loadNormalizedCSV(loc l)"))),(0,l.kt)("h2",{id:"lang-csv-IO-generate"},"function generate"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str generate(str moduleName, loc uri)"))),(0,l.kt)("h4",{id:"synopsis-3"},"Synopsis"),(0,l.kt)("p",null,"Generator for CSV resources"))}d.isMDXComponent=!0}}]);