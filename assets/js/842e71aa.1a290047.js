"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[22781],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),c=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},i=function(e){var t=c(e.components);return a.createElement(m.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,m=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,b=d["".concat(m,".").concat(u)]||d[u]||p[u]||s;return n?a.createElement(b,o(o({ref:t},i),{},{components:n})):a.createElement(b,o({ref:t},i))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6634:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const s={title:"module lang::smtlib2::command::response::Ast"},o=void 0,l={unversionedId:"Library/lang/smtlib2/command/response/Ast",id:"Library/lang/smtlib2/command/response/Ast",title:"module lang::smtlib2::command::response::Ast",description:"Usage",source:"@site/docs/Library/lang/smtlib2/command/response/Ast.md",sourceDirName:"Library/lang/smtlib2/command/response",slug:"/Library/lang/smtlib2/command/response/Ast",permalink:"/docs/Library/lang/smtlib2/command/response/Ast",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Library/lang/smtlib2/command/response/Ast.md",tags:[],version:"current",frontMatter:{title:"module lang::smtlib2::command::response::Ast"},sidebar:"tutorialSidebar",previous:{title:"lang::smtlib2::command::response",permalink:"/docs/Library/lang/smtlib2/command/response/"},next:{title:"module lang::smtlib2::command::response::Implode",permalink:"/docs/Library/lang/smtlib2/command/response/Implode"}},m={},c=[{value:"Usage",id:"usage",level:4},{value:"data Response",id:"lang-smtlib2-command-response-Ast-Response",level:2},{value:"data CheckSat",id:"lang-smtlib2-command-response-Ast-CheckSat",level:2},{value:"data GetUnsatCore",id:"lang-smtlib2-command-response-Ast-GetUnsatCore",level:2},{value:"data GetValue",id:"lang-smtlib2-command-response-Ast-GetValue",level:2},{value:"data Model",id:"lang-smtlib2-command-response-Ast-Model",level:2}],i={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"import lang::smtlib2::command::response::Ast;")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Synopsis: Represents the AST of the SMT solver response\n")),(0,r.kt)("h2",{id:"lang-smtlib2-command-response-Ast-Response"},"data Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"data Response  \n     = response(CheckSat sat)\n     | response(GetUnsatCore unsatCore)\n     | response(GetValue model)\n     | none()\n     ;\n")),(0,r.kt)("h2",{id:"lang-smtlib2-command-response-Ast-CheckSat"},"data CheckSat"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"data CheckSat  \n     = sat()\n     | unsat()\n     | unkown()\n     ;\n")),(0,r.kt)("h2",{id:"lang-smtlib2-command-response-Ast-GetUnsatCore"},"data GetUnsatCore"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"data GetUnsatCore  \n     = unsatCore(list[str] labels)\n     ;\n")),(0,r.kt)("h2",{id:"lang-smtlib2-command-response-Ast-GetValue"},"data GetValue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"data GetValue  \n     = foundValues(list[Model] models)\n     ;\n")),(0,r.kt)("h2",{id:"lang-smtlib2-command-response-Ast-Model"},"data Model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"data Model  \n     = model(Expr var, Expr val)\n     ;\n")))}p.isMDXComponent=!0}}]);