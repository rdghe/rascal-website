"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[3475],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>b});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(a),b=r,d=m["".concat(o,".").concat(b)]||m[b]||c[b]||l;return a?n.createElement(d,s(s({ref:t},u),{},{components:a})):n.createElement(d,s({ref:t},u))}));function b(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,s=new Array(l);s[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<l;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},92906:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=a(83117),r=(a(67294),a(3905));const l={title:"Relation",keywords:["{","}","rel"]},s=void 0,i={unversionedId:"Rascal/Expressions/Values/Relation/index",id:"Rascal/Expressions/Values/Relation/index",title:"Relation",description:"Synopsis",source:"@site/docs/Rascal/Expressions/Values/Relation/index.md",sourceDirName:"Rascal/Expressions/Values/Relation",slug:"/Rascal/Expressions/Values/Relation/",permalink:"/docs/Rascal/Expressions/Values/Relation/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascal/Expressions/Values/Relation/index.md",tags:[],version:"current",frontMatter:{title:"Relation",keywords:["{","}","rel"]},sidebar:"tutorialSidebar",previous:{title:"ReifiedTypes",permalink:"/docs/Rascal/Expressions/Values/ReifiedTypes/"},next:{title:"Relation CartesianProduct",permalink:"/docs/Rascal/Expressions/Values/Relation/CartesianProduct/"}},o={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],u={toc:p};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Relation values."),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"{ < Exp<sub>11</sub>, Exp<sub>12</sub>, ... > , < Exp<sub>21</sub>, Exp<sub>22</sub>, ... > , ... }")),(0,r.kt)("h4",{id:"types"},"Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"Exp<sub>11</sub>")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"Exp<sub>12</sub>")),(0,r.kt)("th",{parentName:"tr",align:null},"..."),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"{ < Exp<sub>11</sub>, Exp<sub>12</sub>, ... > , ... }")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"T<sub>1</sub>")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"T<sub>2</sub>")),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"rel[T<sub>1</sub>, T<sub>2</sub>, ... ]"))))),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"A relation is a set of elements with the following property:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All elements have the same static tuple type.")),(0,r.kt)("p",null,"Relations are thus nothing more than sets of tuples, but since they are used so often we provide a shorthand notation for them.\nRelations are represented by the type ",(0,r.kt)("inlineCode",{parentName:"p"},"rel[T<sub>1</sub> L<sub>1</sub>, T<sub>2</sub> L<sub>2</sub>, ... ]"),", where ",(0,r.kt)("em",{parentName:"p"},"T"),(0,r.kt)("sub",null,"1"),", ",(0,r.kt)("em",{parentName:"p"},"T"),(0,r.kt)("sub",null,"2"),", ... are arbitrary types and\n",(0,r.kt)("em",{parentName:"p"},"L"),(0,r.kt)("sub",null,"1"),", ",(0,r.kt)("em",{parentName:"p"},"L"),(0,r.kt)("sub",null,"2"),", ... are optional labels. It is a shorthand for ",(0,r.kt)("inlineCode",{parentName:"p"},"set[tuple[T<sub>1</sub> L<sub>1</sub>, T<sub>2</sub> L<sub>2</sub>, ... ]]"),"."),(0,r.kt)("p",null,"An n-ary relations with m tuples is denoted by\n",(0,r.kt)("inlineCode",{parentName:"p"},"{< E<sub>11</sub>, E<sub>12</sub>, ..., E~1n~ >,< E<sub>21</sub>, E<sub>22</sub>, ..., E~2n~ >, ..., < E~m1~, E~m2~, ..., E~mn~ >}"),",\nwhere the ",(0,r.kt)("em",{parentName:"p"},"E"),"~ij~ are expressions that yield the desired element type ",(0,r.kt)("em",{parentName:"p"},"T"),"~i~."),(0,r.kt)("p",null,"Since relations are a form of set all operations (see ",(0,r.kt)("a",{parentName:"p",href:"../../../../Rascal/Expressions/Values/Set"},"Set"),") and functions\n(see ",(0,r.kt)("a",{parentName:"p",href:"/docs/Library/Set"},"Set"),") are also applicable to relations."),(0,r.kt)("p",null,"The following additional operators are provided for relations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/Relation"},"Relation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/Relation/CartesianProduct"},"CartesianProduct")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/Relation/Composition"},"Composition")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/Relation/FieldSelection"},"FieldSelection")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/Relation/Join"},"Join")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/Relation/ReflexiveTransitiveClosure"},"ReflexiveTransitiveClosure")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/Relation/Subscription"},"Subscription")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../../../Rascal/Expressions/Values/Relation/TransitiveClosure"},"TransitiveClosure"))),(0,r.kt)("p",null,"There are also ",(0,r.kt)("a",{parentName:"p",href:"/docs/Library/Relation"},"library functions")," available for Relations."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>{<1,10>, <2,20>, <3,30>}\nrel[int,int]: {\n  <1,10>,\n  <3,30>,\n  <2,20>\n}\n")),(0,r.kt)("p",null,"instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"rel[int,int]")," we can also give ",(0,r.kt)("inlineCode",{parentName:"p"},"set[tuple[int,int]]")," as type of the above expression\nremember that these types are interchangeable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>{<"a",10>, <"b",20>, <"c",30>}\nrel[str,int]: {\n  <"a",10>,\n  <"b",20>,\n  <"c",30>\n}\nrascal>{<"a", 1, "b">, <"c", 2, "d">}\nrel[str,int,str]: {\n  <"c",2,"d">,\n  <"a",1,"b">\n}\n')))}c.isMDXComponent=!0}}]);