"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[43337],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=o(n),k=i,m=u["".concat(p,".").concat(k)]||u[k]||d[k]||r;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var o=2;o<r;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},20538:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>o});var a=n(83117),i=(n(67294),n(3905));const r={title:"module String"},l=void 0,s={unversionedId:"Library/String",id:"Library/String",title:"module String",description:"Usage",source:"@site/docs/Library/String.md",sourceDirName:"Library",slug:"/Library/String",permalink:"/docs/Library/String",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Library/String.md",tags:[],version:"current",frontMatter:{title:"module String"},sidebar:"tutorialSidebar",previous:{title:"module Set",permalink:"/docs/Library/Set"},next:{title:"module Traversal",permalink:"/docs/Library/Traversal"}},p={},o=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"function center",id:"String-center",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Description",id:"description-1",level:4},{value:"Examples",id:"examples",level:4},{value:"function charAt",id:"String-charAt",level:2},{value:"Synopsis",id:"synopsis-2",level:4},{value:"Description",id:"description-2",level:4},{value:"Examples",id:"examples-1",level:4},{value:"function chars",id:"String-chars",level:2},{value:"Synopsis",id:"synopsis-3",level:4},{value:"Description",id:"description-3",level:4},{value:"Examples",id:"examples-2",level:4},{value:"function contains",id:"String-contains",level:2},{value:"Synopsis",id:"synopsis-4",level:4},{value:"Description",id:"description-4",level:4},{value:"Examples",id:"examples-3",level:4},{value:"function deescape",id:"String-deescape",level:2},{value:"Synopsis",id:"synopsis-5",level:4},{value:"function endsWith",id:"String-endsWith",level:2},{value:"Synopsis",id:"synopsis-6",level:4},{value:"Description",id:"description-5",level:4},{value:"Examples",id:"examples-4",level:4},{value:"function escape",id:"String-escape",level:2},{value:"Synopsis",id:"synopsis-7",level:4},{value:"Description",id:"description-6",level:4},{value:"Examples",id:"examples-5",level:4},{value:"function findAll",id:"String-findAll",level:2},{value:"Synopsis",id:"synopsis-8",level:4},{value:"Description",id:"description-7",level:4},{value:"Examples",id:"examples-6",level:4},{value:"function findFirst",id:"String-findFirst",level:2},{value:"Synopsis",id:"synopsis-9",level:4},{value:"Description",id:"description-8",level:4},{value:"Examples",id:"examples-7",level:4},{value:"function findLast",id:"String-findLast",level:2},{value:"Synopsis",id:"synopsis-10",level:4},{value:"Description",id:"description-9",level:4},{value:"Examples",id:"examples-8",level:4},{value:"function isEmpty",id:"String-isEmpty",level:2},{value:"Synopsis",id:"synopsis-11",level:4},{value:"Description",id:"description-10",level:4},{value:"Examples",id:"examples-9",level:4},{value:"function arbString",id:"String-arbString",level:2},{value:"Synopsis",id:"synopsis-12",level:4},{value:"Description",id:"description-11",level:4},{value:"Examples",id:"examples-10",level:4},{value:"function left",id:"String-left",level:2},{value:"Synopsis",id:"synopsis-13",level:4},{value:"Description",id:"description-12",level:4},{value:"Examples",id:"examples-11",level:4},{value:"function replaceAll",id:"String-replaceAll",level:2},{value:"Synopsis",id:"synopsis-14",level:4},{value:"Description",id:"description-13",level:4},{value:"Examples",id:"examples-12",level:4},{value:"Pitfalls",id:"pitfalls",level:4},{value:"function replaceFirst",id:"String-replaceFirst",level:2},{value:"Synopsis",id:"synopsis-15",level:4},{value:"Description",id:"description-14",level:4},{value:"Examples",id:"examples-13",level:4},{value:"Pitfalls",id:"pitfalls-1",level:4},{value:"function replaceLast",id:"String-replaceLast",level:2},{value:"Synopsis",id:"synopsis-16",level:4},{value:"Description",id:"description-15",level:4},{value:"Examples",id:"examples-14",level:4},{value:"Pitfalls",id:"pitfalls-2",level:4},{value:"function reverse",id:"String-reverse",level:2},{value:"Synopsis",id:"synopsis-17",level:4},{value:"Description",id:"description-16",level:4},{value:"Examples",id:"examples-15",level:4},{value:"function right",id:"String-right",level:2},{value:"Synopsis",id:"synopsis-18",level:4},{value:"Examples",id:"examples-16",level:4},{value:"Synopsis",id:"synopsis-19",level:4},{value:"Description",id:"description-17",level:4},{value:"Examples",id:"examples-17",level:4},{value:"function size",id:"String-size",level:2},{value:"Synopsis",id:"synopsis-20",level:4},{value:"Description",id:"description-18",level:4},{value:"Examples",id:"examples-18",level:4},{value:"function startsWith",id:"String-startsWith",level:2},{value:"Synopsis",id:"synopsis-21",level:4},{value:"Description",id:"description-19",level:4},{value:"Examples",id:"examples-19",level:4},{value:"function stringChar",id:"String-stringChar",level:2},{value:"Synopsis",id:"synopsis-22",level:4},{value:"function stringChars",id:"String-stringChars",level:2},{value:"Synopsis",id:"synopsis-23",level:4},{value:"function isValidCharacter",id:"String-isValidCharacter",level:2},{value:"Synopsis",id:"synopsis-24",level:4},{value:"function substring",id:"String-substring",level:2},{value:"Synopsis",id:"synopsis-25",level:4},{value:"Description",id:"description-20",level:4},{value:"Examples",id:"examples-20",level:4},{value:"function toInt",id:"String-toInt",level:2},{value:"Synopsis",id:"synopsis-26",level:4},{value:"Description",id:"description-21",level:4},{value:"Examples",id:"examples-21",level:4},{value:"function toLowerCase",id:"String-toLowerCase",level:2},{value:"Synopsis",id:"synopsis-27",level:4},{value:"Description",id:"description-22",level:4},{value:"Examples",id:"examples-22",level:4},{value:"function toReal",id:"String-toReal",level:2},{value:"Synopsis",id:"synopsis-28",level:4},{value:"Description",id:"description-23",level:4},{value:"Examples",id:"examples-23",level:4},{value:"function toUpperCase",id:"String-toUpperCase",level:2},{value:"Synopsis",id:"synopsis-29",level:4},{value:"Description",id:"description-24",level:4},{value:"Examples",id:"examples-24",level:4},{value:"function trim",id:"String-trim",level:2},{value:"Synopsis",id:"synopsis-30",level:4},{value:"Examples",id:"examples-25",level:4},{value:"function squeeze",id:"String-squeeze",level:2},{value:"Synopsis",id:"synopsis-31",level:4},{value:"Description",id:"description-25",level:4},{value:"Examples",id:"examples-26",level:4},{value:"function split",id:"String-split",level:2},{value:"Synopsis",id:"synopsis-32",level:4},{value:"function capitalize",id:"String-capitalize",level:2},{value:"function uncapitalize",id:"String-uncapitalize",level:2},{value:"function toBase64",id:"String-toBase64",level:2},{value:"function fromBase64",id:"String-fromBase64",level:2},{value:"function wrap",id:"String-wrap",level:2},{value:"Synopsis",id:"synopsis-33",level:4},{value:"Description",id:"description-26",level:4},{value:"function format",id:"String-format",level:2},{value:"function rexpMatch",id:"String-rexpMatch",level:2},{value:"Synopsis",id:"synopsis-34",level:4},{value:"function toLocation",id:"String-toLocation",level:2},{value:"Synopsis",id:"synopsis-35",level:4},{value:"Description",id:"description-27",level:4},{value:"Examples",id:"examples-27",level:4},{value:"function substitute",id:"String-substitute",level:2},{value:"Synopsis",id:"synopsis-36",level:4},{value:"Examples",id:"examples-28",level:4}],c={toc:o};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"import String;")),(0,i.kt)("h4",{id:"synopsis"},"Synopsis"),(0,i.kt)("p",null,"Library functions for strings."),(0,i.kt)("h4",{id:"description"},"Description"),(0,i.kt)("p",null,"For operators on strings see ",(0,i.kt)("a",{parentName:"p",href:"../Rascal/Expressions/Values/String"},"String")," in the Rascal Language Reference."),(0,i.kt)("p",null,"The following functions are defined for strings:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-arbString"},"arbString")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-capitalize"},"capitalize")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-center"},"center")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-charAt"},"charAt")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-chars"},"chars")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-contains"},"contains")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-deescape"},"deescape")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-endsWith"},"endsWith")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-escape"},"escape")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-findAll"},"findAll")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-findFirst"},"findFirst")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-findLast"},"findLast")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-format"},"format")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-fromBase64"},"fromBase64")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-isEmpty"},"isEmpty")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-isValidCharacter"},"isValidCharacter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-left"},"left")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-replaceAll"},"replaceAll")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-replaceFirst"},"replaceFirst")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-replaceLast"},"replaceLast")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-reverse"},"reverse")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-rexpMatch"},"rexpMatch")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-right"},"right")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-size"},"size")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-split"},"split")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-squeeze"},"squeeze")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-startsWith"},"startsWith")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-stringChar"},"stringChar")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-stringChars"},"stringChars")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-substitute"},"substitute")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-substring"},"substring")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-toBase64"},"toBase64")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-toInt"},"toInt")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-toLocation"},"toLocation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-toLowerCase"},"toLowerCase")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-toReal"},"toReal")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-toUpperCase"},"toUpperCase")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-trim"},"trim")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-uncapitalize"},"uncapitalize")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Library/String#String-wrap"},"wrap"))),(0,i.kt)("h2",{id:"String-center"},"function center"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str center(str s, int n)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str center(str s, int n, str pad)"))),(0,i.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,i.kt)("p",null,"Center a string in given space."),(0,i.kt)("h4",{id:"description-1"},"Description"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Center string ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," in string of length ",(0,i.kt)("inlineCode",{parentName:"li"},"n")," using spaces."),(0,i.kt)("li",{parentName:"ul"},"Center string ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," in string of length ",(0,i.kt)("inlineCode",{parentName:"li"},"n")," using ",(0,i.kt)("inlineCode",{parentName:"li"},"pad")," as padding character.")),(0,i.kt)("h4",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>center("abc", 10);\nstr: "   abc    "\nrascal>center("abc", 10, "x");\nstr: "xxxabcxxxx"\n')),(0,i.kt)("h2",{id:"String-charAt"},"function charAt"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int charAt(str s, int i) throws IndexOutOfBounds"))),(0,i.kt)("h4",{id:"synopsis-2"},"Synopsis"),(0,i.kt)("p",null,"Return character in a string by its index position."),(0,i.kt)("h4",{id:"description-2"},"Description"),(0,i.kt)("p",null,"Return the character at position ",(0,i.kt)("inlineCode",{parentName:"p"},"i")," in string ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," as integer character code.\nAlso see ",(0,i.kt)("a",{parentName:"p",href:"/docs/Library/String#String-stringChar"},"stringChar")," that converts character codes back to string."),(0,i.kt)("h4",{id:"examples-1"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>charAt("abc", 0);\nint: 97\nrascal>stringChar(charAt("abc", 0));\nstr: "a"\n')),(0,i.kt)("h2",{id:"String-chars"},"function chars"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[int] chars(str s)"))),(0,i.kt)("h4",{id:"synopsis-3"},"Synopsis"),(0,i.kt)("p",null,"Return characters of a string."),(0,i.kt)("h4",{id:"description-3"},"Description"),(0,i.kt)("p",null,"Return a list of the characters of ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," as integer character codes.\nAlso see ",(0,i.kt)("a",{parentName:"p",href:"/docs/Library/String#String-stringChars"},"stringChars")," that converts character codes back to string."),(0,i.kt)("h4",{id:"examples-2"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>chars("abc");\nlist[int]: [97,98,99]\nrascal>stringChars(chars("abc")) == "abc";\nbool: true\n')),(0,i.kt)("h2",{id:"String-contains"},"function contains"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool contains(str input, str find)"))),(0,i.kt)("h4",{id:"synopsis-4"},"Synopsis"),(0,i.kt)("p",null,"Check that a string contains another string."),(0,i.kt)("h4",{id:"description-4"},"Description"),(0,i.kt)("p",null,"Check whether the string ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," occurs as substring in the string ",(0,i.kt)("inlineCode",{parentName:"p"},"subject"),"."),(0,i.kt)("h4",{id:"examples-3"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>contains("abracadabra", "bra");\nbool: true\nrascal>contains("abracadabra", "e");\nbool: false\n')),(0,i.kt)("h2",{id:"String-deescape"},"function deescape"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str deescape(str s)"))),(0,i.kt)("h4",{id:"synopsis-5"},"Synopsis"),(0,i.kt)("p",null,"Replace escaped characters by the escaped character itself (using Rascal escape conventions)."),(0,i.kt)("h2",{id:"String-endsWith"},"function endsWith"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool endsWith(str subject, str suffix)"))),(0,i.kt)("h4",{id:"synopsis-6"},"Synopsis"),(0,i.kt)("p",null,"Check whether a string ends with a given substring."),(0,i.kt)("h4",{id:"description-5"},"Description"),(0,i.kt)("p",null,"Yields ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if string ",(0,i.kt)("inlineCode",{parentName:"p"},"subject")," ends with the string ",(0,i.kt)("inlineCode",{parentName:"p"},"suffix"),"."),(0,i.kt)("h4",{id:"examples-4"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>endsWith("Hello.rsc", ".rsc");\nbool: true\n')),(0,i.kt)("h2",{id:"String-escape"},"function escape"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str escape(str subject, map[str,str] mapping)"))),(0,i.kt)("h4",{id:"synopsis-7"},"Synopsis"),(0,i.kt)("p",null,"Replace single characters in a string."),(0,i.kt)("h4",{id:"description-6"},"Description"),(0,i.kt)("p",null,"Return a copy of ",(0,i.kt)("inlineCode",{parentName:"p"},"subject")," in which each single character key in replacements\nhas been replaced by its associated value."),(0,i.kt)("h4",{id:"examples-5"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>import IO;\nok\nrascal>escape("abracadabra", ("a" : "AA", "c" : "C"));\nstr: "AAbrAACAAdAAbrAA"\nrascal>L = escape("\\"Good Morning\\", he said", ("\\"": "\\\\\\""));\nstr: "\\\\\\"Good Morning\\\\\\", he said"\nrascal>println(L);\nprintln(L);\n\\"Good Morning\\", he said\nok\n')),(0,i.kt)("h2",{id:"String-findAll"},"function findAll"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[int] findAll(str subject, str find)"))),(0,i.kt)("h4",{id:"synopsis-8"},"Synopsis"),(0,i.kt)("p",null,"Find all occurrences of a string in another string."),(0,i.kt)("h4",{id:"description-7"},"Description"),(0,i.kt)("p",null,"Find all occurrences of string ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," in string ",(0,i.kt)("inlineCode",{parentName:"p"},"subject"),".\nThe result is a (possible empty) list of positions where ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," matches."),(0,i.kt)("p",null,"See also ",(0,i.kt)("a",{parentName:"p",href:"/docs/Library/String#String-findFirst"},"find first")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/Library/String#String-findLast"},"find last"),"."),(0,i.kt)("h4",{id:"examples-6"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>findAll("abracadabra", "a");\nlist[int]: [0,3,5,7,10]\nrascal>findAll("abracadabra", "bra");\nlist[int]: [1,8]\nrascal>findAll("abracadabra", "e");\nlist[int]: []\n')),(0,i.kt)("h2",{id:"String-findFirst"},"function findFirst"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int findFirst(str subject, str find)"))),(0,i.kt)("h4",{id:"synopsis-9"},"Synopsis"),(0,i.kt)("p",null,"Find the first occurrence of a string in another string."),(0,i.kt)("h4",{id:"description-8"},"Description"),(0,i.kt)("p",null,"Find the first occurrence of string ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," in string ",(0,i.kt)("inlineCode",{parentName:"p"},"subject"),".\nThe result is either a position in ",(0,i.kt)("inlineCode",{parentName:"p"},"subject")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"-1")," when ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," is not found."),(0,i.kt)("p",null,"Also see ",(0,i.kt)("a",{parentName:"p",href:"/docs/Library/String#String-findAll"},"find all")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/Library/String#String-findLast"},"find last"),"."),(0,i.kt)("h4",{id:"examples-7"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>findFirst("abracadabra", "a");\nint: 0\nrascal>findFirst("abracadabra", "bra");\nint: 1\nrascal>findFirst("abracadabra", "e");\nint: -1\n')),(0,i.kt)("h2",{id:"String-findLast"},"function findLast"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int findLast(str subject, str find)"))),(0,i.kt)("h4",{id:"synopsis-10"},"Synopsis"),(0,i.kt)("p",null,"Find the last occurrence of a string in another string."),(0,i.kt)("h4",{id:"description-9"},"Description"),(0,i.kt)("p",null,"Find the last occurrence of string ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," in string ",(0,i.kt)("inlineCode",{parentName:"p"},"subject"),".\nThe result is either a position in ",(0,i.kt)("inlineCode",{parentName:"p"},"subject")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"-1")," when ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," is not found."),(0,i.kt)("p",null,"Also see ",(0,i.kt)("a",{parentName:"p",href:"/docs/Library/String#String-findAll"},"find all")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/Library/String#String-findFirst"},"find first"),"."),(0,i.kt)("h4",{id:"examples-8"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>findLast("abracadabra", "a");\nint: 10\nrascal>findLast("abracadabra", "bra");\nint: 8\nrascal>findLast("abracadabra", "e");\nint: -1\n')),(0,i.kt)("h2",{id:"String-isEmpty"},"function isEmpty"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isEmpty(str s)"))),(0,i.kt)("h4",{id:"synopsis-11"},"Synopsis"),(0,i.kt)("p",null,"Check whether a string is empty."),(0,i.kt)("h4",{id:"description-10"},"Description"),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if string ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," is empty."),(0,i.kt)("h4",{id:"examples-9"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>isEmpty("");\nbool: true\nrascal>isEmpty("abc");\nbool: false\n')),(0,i.kt)("h2",{id:"String-arbString"},"function arbString"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str arbString(int n)"))),(0,i.kt)("h4",{id:"synopsis-12"},"Synopsis"),(0,i.kt)("p",null,"Generate a arbitrary string."),(0,i.kt)("h4",{id:"description-11"},"Description"),(0,i.kt)("p",null,"Returns a string of maximum ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," length, with arbitrary characters."),(0,i.kt)("h4",{id:"examples-10"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>arbString(3);\nstr: "66"\nrascal>arbString(10);\nstr: "PrxNPWoes"\n')),(0,i.kt)("h2",{id:"String-left"},"function left"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str left(str s, int n)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str left(str s, int n, str pad)"))),(0,i.kt)("h4",{id:"synopsis-13"},"Synopsis"),(0,i.kt)("p",null,"Left alignment of string in given space."),(0,i.kt)("h4",{id:"description-12"},"Description"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Left align string ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," in string of length ",(0,i.kt)("inlineCode",{parentName:"li"},"n")," using spaces."),(0,i.kt)("li",{parentName:"ul"},"Left align string ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," in string of length ",(0,i.kt)("inlineCode",{parentName:"li"},"n")," using ",(0,i.kt)("inlineCode",{parentName:"li"},"pad")," as pad character.")),(0,i.kt)("h4",{id:"examples-11"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>left("abc", 10);\nstr: "abc       "\nrascal>left("abc", 10, "x");\nstr: "abcxxxxxxx"\n')),(0,i.kt)("h2",{id:"String-replaceAll"},"function replaceAll"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str replaceAll(str subject, str find, str replacement)"))),(0,i.kt)("h4",{id:"synopsis-14"},"Synopsis"),(0,i.kt)("p",null,"Replace all occurrences of a string in another string."),(0,i.kt)("h4",{id:"description-13"},"Description"),(0,i.kt)("p",null,"Return a copy of ",(0,i.kt)("inlineCode",{parentName:"p"},"subject")," in which all occurrences of ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," (if any) have been replaced by ",(0,i.kt)("inlineCode",{parentName:"p"},"replacement"),".\nAlso see ",(0,i.kt)("a",{parentName:"p",href:"/docs/Library/String#String-replaceFirst"},"replace first")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/Library/String#String-replaceLast"},"replace last"),"."),(0,i.kt)("h4",{id:"examples-12"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>replaceAll("abracadabra", "a", "A");\nstr: "AbrAcAdAbrA"\nrascal>replaceAll("abracadabra", "ra", "RARA");\nstr: "abRARAcadabRARA"\nrascal>replaceAll("abracadabra", "cra", "CRA");\nstr: "abracadabra"\n')),(0,i.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," is a string (as opposed to, for instance, a regular expression in Java)."),(0,i.kt)("h2",{id:"String-replaceFirst"},"function replaceFirst"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str replaceFirst(str subject, str find, str replacement)"))),(0,i.kt)("h4",{id:"synopsis-15"},"Synopsis"),(0,i.kt)("p",null,"Replace the first occurrence of a string in another string."),(0,i.kt)("h4",{id:"description-14"},"Description"),(0,i.kt)("p",null,"Return a copy of ",(0,i.kt)("inlineCode",{parentName:"p"},"subject")," in which the first occurrence of ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," (if it exists) has been replaced by ",(0,i.kt)("inlineCode",{parentName:"p"},"replacement"),".\nAlso see ",(0,i.kt)("a",{parentName:"p",href:"/docs/Library/String#String-replaceAll"},"replace all")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/Library/String#String-replaceLast"},"replace last"),"."),(0,i.kt)("h4",{id:"examples-13"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>replaceFirst("abracadabra", "a", "A");\nstr: "Abracadabra"\nrascal>replaceFirst("abracadabra", "ra", "RARA");\nstr: "abRARAcadabra"\nrascal>replaceFirst("abracadabra", "cra", "CRA");\nstr: "abracadabra"\n')),(0,i.kt)("h4",{id:"pitfalls-1"},"Pitfalls"),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," is a string (as opposed to, for instance, a regular expression in Java)."),(0,i.kt)("h2",{id:"String-replaceLast"},"function replaceLast"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str replaceLast(str subject, str find, str replacement)"))),(0,i.kt)("h4",{id:"synopsis-16"},"Synopsis"),(0,i.kt)("p",null,"Replace the last occurrence of a string in another string."),(0,i.kt)("h4",{id:"description-15"},"Description"),(0,i.kt)("p",null,"Return a copy of ",(0,i.kt)("inlineCode",{parentName:"p"},"subject")," in which the last occurrence of ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," (if it exists) has been replaced by ",(0,i.kt)("inlineCode",{parentName:"p"},"replacement"),".\nAlso see ",(0,i.kt)("a",{parentName:"p",href:"/docs/Library/String#String-replaceFirst"},"replace first")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/Library/String#String-replaceLast"},"replace last"),"."),(0,i.kt)("h4",{id:"examples-14"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>replaceLast("abracadabra", "a", "A");\nstr: "abracadabrA"\nrascal>replaceLast("abracadabra", "ra", "RARA");\nstr: "abracadabRARA"\nrascal>replaceLast("abracadabra", "cra", "CRA");\nstr: "abracadabra"\n')),(0,i.kt)("h4",{id:"pitfalls-2"},"Pitfalls"),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," is a string (as opposed to, for instance, a regular expression in Java)."),(0,i.kt)("h2",{id:"String-reverse"},"function reverse"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str reverse(str s)"))),(0,i.kt)("h4",{id:"synopsis-17"},"Synopsis"),(0,i.kt)("p",null,"Return a string with all characters in reverse order."),(0,i.kt)("h4",{id:"description-16"},"Description"),(0,i.kt)("p",null,"Returns string with all characters of string ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," in reverse order."),(0,i.kt)("h4",{id:"examples-15"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>reverse("abc");\nstr: "cba"\n')),(0,i.kt)("h2",{id:"String-right"},"function right"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str right(str s, int n)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str right(str s, int n, str pad)"))),(0,i.kt)("h4",{id:"synopsis-18"},"Synopsis"),(0,i.kt)("p",null,"Right align s in string of length n using space."),(0,i.kt)("h4",{id:"examples-16"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>right("abc", 10);\nstr: "       abc"\nrascal>right("abc", 10, "x");\nstr: "xxxxxxxabc"\n')),(0,i.kt)("h4",{id:"synopsis-19"},"Synopsis"),(0,i.kt)("p",null,"Right alignment of a string value in a given space."),(0,i.kt)("h4",{id:"description-17"},"Description"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Right align string ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," in string of length ",(0,i.kt)("inlineCode",{parentName:"li"},"n")," using spaces."),(0,i.kt)("li",{parentName:"ul"},"Right align string ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," in string of length ",(0,i.kt)("inlineCode",{parentName:"li"},"n")," using ",(0,i.kt)("inlineCode",{parentName:"li"},"pad")," as pad character.")),(0,i.kt)("h4",{id:"examples-17"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>right("abc", 10);\nstr: "       abc"\nrascal>right("abc", 10, "x");\nstr: "xxxxxxxabc"\n')),(0,i.kt)("h2",{id:"String-size"},"function size"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int size(str s)"))),(0,i.kt)("h4",{id:"synopsis-20"},"Synopsis"),(0,i.kt)("p",null,"Determine length of a string value."),(0,i.kt)("h4",{id:"description-18"},"Description"),(0,i.kt)("p",null,"Returns the length (number of characters) in string ",(0,i.kt)("inlineCode",{parentName:"p"},"s"),"."),(0,i.kt)("h4",{id:"examples-18"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>size("abc");\nint: 3\nrascal>size("");\nint: 0\n')),(0,i.kt)("h2",{id:"String-startsWith"},"function startsWith"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool startsWith(str subject, str prefix)"))),(0,i.kt)("h4",{id:"synopsis-21"},"Synopsis"),(0,i.kt)("p",null,"Check whether a string starts with a given prefix."),(0,i.kt)("h4",{id:"description-19"},"Description"),(0,i.kt)("p",null,"Yields ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if string ",(0,i.kt)("inlineCode",{parentName:"p"},"subject")," starts with the string ",(0,i.kt)("inlineCode",{parentName:"p"},"prefix"),"."),(0,i.kt)("h4",{id:"examples-19"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>startsWith("Hello.rsc", "Hell");\nbool: true\n')),(0,i.kt)("h2",{id:"String-stringChar"},"function stringChar"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str stringChar(int char) throws IllegalArgument"))),(0,i.kt)("h4",{id:"synopsis-22"},"Synopsis"),(0,i.kt)("p",null,"Convert a character code into a string. "),(0,i.kt)("h2",{id:"String-stringChars"},"function stringChars"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str stringChars(list[int] chars) throws IllegalArgument"))),(0,i.kt)("h4",{id:"synopsis-23"},"Synopsis"),(0,i.kt)("p",null,"Convert a list of character codes into a string."),(0,i.kt)("h2",{id:"String-isValidCharacter"},"function isValidCharacter"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isValidCharacter(int ch)"))),(0,i.kt)("h4",{id:"synopsis-24"},"Synopsis"),(0,i.kt)("p",null,"Check that a given integer value is a valid Unicode code point."),(0,i.kt)("h2",{id:"String-substring"},"function substring"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str substring(str s, int begin)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str substring(str s, int begin, int end)"))),(0,i.kt)("h4",{id:"synopsis-25"},"Synopsis"),(0,i.kt)("p",null,"Extract a substring from a string value."),(0,i.kt)("h4",{id:"description-20"},"Description"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Yields substring of string ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," from index ",(0,i.kt)("inlineCode",{parentName:"li"},"begin")," to the end of the string."),(0,i.kt)("li",{parentName:"ul"},"Yields substring of string ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," from index ",(0,i.kt)("inlineCode",{parentName:"li"},"begin")," to (but not including) index ",(0,i.kt)("inlineCode",{parentName:"li"},"end"),".")),(0,i.kt)("h4",{id:"examples-20"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>substring("abcdef", 2);\nstr: "cdef"\nrascal>substring("abcdef", 2, 4);\nstr: "cd"\n')),(0,i.kt)("h2",{id:"String-toInt"},"function toInt"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int toInt(str s) throws IllegalArgument")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int toInt(str s, int r) throws IllegalArgument"))),(0,i.kt)("h4",{id:"synopsis-26"},"Synopsis"),(0,i.kt)("p",null,"Convert a string value to integer."),(0,i.kt)("h4",{id:"description-21"},"Description"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Converts string ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," to integer. "),(0,i.kt)("li",{parentName:"ul"},"Convert string ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," to integer using radix ",(0,i.kt)("inlineCode",{parentName:"li"},"r"),".")),(0,i.kt)("p",null,"Throws ",(0,i.kt)("inlineCode",{parentName:"p"},"IllegalArgument")," when ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," cannot be converted."),(0,i.kt)("h4",{id:"examples-21"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>toInt("11");\nint: 11\nrascal>toInt("11", 8);\nint: 9\n')),(0,i.kt)("p",null,"Now try an erroneous argument:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>toInt("abc");\n|std:///String.rsc|(11107,480,<549,0>,<575,52>): IllegalArgument("abc","For input string: \\"abc\\"")\n    at *** somewhere ***(|std:///String.rsc|(11107,480,<549,0>,<575,52>))\n    at toInt(|prompt:///|(6,5,<1,6>,<1,11>))\nok\n')),(0,i.kt)("h2",{id:"String-toLowerCase"},"function toLowerCase"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str toLowerCase(str s)"))),(0,i.kt)("h4",{id:"synopsis-27"},"Synopsis"),(0,i.kt)("p",null,"Convert the characters in a string value to lower case."),(0,i.kt)("h4",{id:"description-22"},"Description"),(0,i.kt)("p",null,"Convert all characters in string ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," to lowercase. Also see ",(0,i.kt)("a",{parentName:"p",href:"/docs/Library/String#String-toUpperCase"},"to upper case"),"."),(0,i.kt)("h4",{id:"examples-22"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>toLowerCase("AaBbCc123");\nstr: "aabbcc123"\n')),(0,i.kt)("h2",{id:"String-toReal"},"function toReal"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"real toReal(str s)"))),(0,i.kt)("h4",{id:"synopsis-28"},"Synopsis"),(0,i.kt)("p",null,"Convert a string value to real."),(0,i.kt)("h4",{id:"description-23"},"Description"),(0,i.kt)("p",null,"Converts string ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," to a real. Throws ",(0,i.kt)("inlineCode",{parentName:"p"},"IllegalArgument")," when ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," cannot be converted."),(0,i.kt)("h4",{id:"examples-23"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>toReal("2.5e-3");\nreal: 0.0025\nrascal>toReal("123");\nreal: 123.\nrascal>toReal("abc");\n|std:///String.rsc|(12024,338,<600,0>,<619,31>): IllegalArgument()\n    at *** somewhere ***(|std:///String.rsc|(12024,338,<600,0>,<619,31>))\n    at toReal(|prompt:///|(7,5,<1,7>,<1,12>))\nok\n')),(0,i.kt)("h2",{id:"String-toUpperCase"},"function toUpperCase"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str toUpperCase(str s)"))),(0,i.kt)("h4",{id:"synopsis-29"},"Synopsis"),(0,i.kt)("p",null,"Convert the characters in a string value to upper case."),(0,i.kt)("h4",{id:"description-24"},"Description"),(0,i.kt)("p",null,"Converts all characters in string ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," to upper case."),(0,i.kt)("p",null,"Also see ",(0,i.kt)("a",{parentName:"p",href:"/docs/Library/String#String-toLowerCase"},"to lower case"),"."),(0,i.kt)("h4",{id:"examples-24"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>toUpperCase("AaBbCc123");\nstr: "AABBCC123"\n')),(0,i.kt)("h2",{id:"String-trim"},"function trim"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str trim(str s)"))),(0,i.kt)("h4",{id:"synopsis-30"},"Synopsis"),(0,i.kt)("p",null,"Returns string with leading and trailing whitespace removed."),(0,i.kt)("h4",{id:"examples-25"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>trim("  jelly\n>>>>>>>beans  ");\nstr: "jelly\\nbeans"\n')),(0,i.kt)("h2",{id:"String-squeeze"},"function squeeze"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str squeeze(str src, str charSet)"))),(0,i.kt)("h4",{id:"synopsis-31"},"Synopsis"),(0,i.kt)("p",null,"Squeeze repeated occurrences of characters."),(0,i.kt)("h4",{id:"description-25"},"Description"),(0,i.kt)("p",null,"Squeeze repeated occurrences in ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," of characters in ",(0,i.kt)("inlineCode",{parentName:"p"},"charSet")," removed.\nSee ",(0,i.kt)("a",{parentName:"p",href:"http://commons.apache.org/lang/api-2.6/index.html?org/apache/commons/lang/text/package-summary.html%5BApache%5D"},"http://commons.apache.org/lang/api-2.6/index.html?org/apache/commons/lang/text/package-summary.html[Apache]"),"\nfor the allowed syntax in ",(0,i.kt)("inlineCode",{parentName:"p"},"charSet"),"."),(0,i.kt)("h4",{id:"examples-26"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>squeeze("hello", "el");\nstr: "helo"\n')),(0,i.kt)("h2",{id:"String-split"},"function split"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[str] split(str sep, str src)"))),(0,i.kt)("h4",{id:"synopsis-32"},"Synopsis"),(0,i.kt)("p",null,"Split a string into a list of strings based on a literal separator."),(0,i.kt)("h2",{id:"String-capitalize"},"function capitalize"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str capitalize(str src)"))),(0,i.kt)("h2",{id:"String-uncapitalize"},"function uncapitalize"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str uncapitalize(str src)"))),(0,i.kt)("h2",{id:"String-toBase64"},"function toBase64"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str toBase64(str src)"))),(0,i.kt)("h2",{id:"String-fromBase64"},"function fromBase64"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str fromBase64(str src)"))),(0,i.kt)("h2",{id:"String-wrap"},"function wrap"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str wrap(str src, int wrapLength)"))),(0,i.kt)("h4",{id:"synopsis-33"},"Synopsis"),(0,i.kt)("p",null,"Word wrap a string to fit in a certain width."),(0,i.kt)("h4",{id:"description-26"},"Description"),(0,i.kt)("p",null,"Inserts newlines in a string in order to fit the string in a certain width. It only breaks on spaces (' '). "),(0,i.kt)("h2",{id:"String-format"},"function format"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str format(str s, str dir, int n, str pad)"))),(0,i.kt)("h2",{id:"String-rexpMatch"},"function rexpMatch"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool rexpMatch(str s, str re)"))),(0,i.kt)("h4",{id:"synopsis-34"},"Synopsis"),(0,i.kt)("p",null,"Determine if a string matches the given (Java-syntax) regular expression."),(0,i.kt)("h2",{id:"String-toLocation"},"function toLocation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"loc toLocation(str s)"))),(0,i.kt)("h4",{id:"synopsis-35"},"Synopsis"),(0,i.kt)("p",null,"Convert a string value to a (source code) location."),(0,i.kt)("h4",{id:"description-27"},"Description"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Converts string ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," to a location."),(0,i.kt)("li",{parentName:"ul"},"If the scheme is not provided, it is assumed to be ",(0,i.kt)("inlineCode",{parentName:"li"},"cwd"),".")),(0,i.kt)("h4",{id:"examples-27"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>toLocation("http://grammarware.net");\nloc: |http://grammarware.net|\nrascal>toLocation("document.xml");\nloc: |cwd:///document.xml|\n')),(0,i.kt)("h2",{id:"String-substitute"},"function substitute"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str substitute(str src, map[loc,str] s)"))),(0,i.kt)("h4",{id:"synopsis-36"},"Synopsis"),(0,i.kt)("p",null,"Substitute substrings in a string based on a substitution map from location to string."),(0,i.kt)("h4",{id:"examples-28"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import String;\nok\nrascal>substitute("abc", (|stdin:///|(1,1): "d"))\nstr: "adc"\n')))}d.isMDXComponent=!0}}]);