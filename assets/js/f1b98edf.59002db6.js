"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[51844],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),s=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(r),m=n,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return r?a.createElement(f,i(i({ref:t},p),{},{components:r})):a.createElement(f,i({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var s=2;s<o;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},82375:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var a=r(87462),n=(r(67294),r(3905));const o={title:"Compiler"},i=void 0,c={unversionedId:"Rascalopedia/Compiler/index",id:"Rascalopedia/Compiler/index",title:"Compiler",description:"Synopsis",source:"@site/docs/Rascalopedia/Compiler/index.md",sourceDirName:"Rascalopedia/Compiler",slug:"/Rascalopedia/Compiler/",permalink:"/docs/Rascalopedia/Compiler/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Rascalopedia/Compiler/index.md",tags:[],version:"current",frontMatter:{title:"Compiler"},sidebar:"tutorialSidebar",previous:{title:"Abstract Syntax Tree",permalink:"/docs/Rascalopedia/AbstractSyntaxTree/"},next:{title:"Domain Specific Language",permalink:"/docs/Rascalopedia/DomainSpecificLanguage/"}},l={},s=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4}],p={toc:s};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"synopsis"},"Synopsis"),(0,n.kt)("p",null,"Tranform source code to an executable form."),(0,n.kt)("h4",{id:"description"},"Description"),(0,n.kt)("p",null,"A ",(0,n.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Compiler"},"compiler")," transforms the source code of a program (in a source langue) to an executable form\n(in a target language)\nand consists of the following phases:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Rascalopedia/Parser/"},"Parser"),": read the source code and build an ",(0,n.kt)("a",{parentName:"li",href:"/docs/Rascalopedia/AbstractSyntaxTree/"},"Abstract Syntax Tree"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Rascalopedia/Typechecker/"},"Typechecker"),": perform a semantic analysis of the code, resolve all names\nand verify that the program is type correct."),(0,n.kt)("li",{parentName:"ul"},"Optimisation: perform optimisations (e.g., constant folding, dead code elimination, call unfolding).\nThis can be seen as a form of ",(0,n.kt)("a",{parentName:"li",href:"/docs/Rascalopedia/Refactoring/"},"Refactoring"),"."),(0,n.kt)("li",{parentName:"ul"},"Code generation: generate the final code, this can be asembly language or directly executable code.")))}u.isMDXComponent=!0}}]);