"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[97772],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),o=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=o(e.components);return a.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=o(n),m=r,b=u["".concat(d,".").concat(m)]||u[m]||c[m]||l;return n?a.createElement(b,i(i({ref:t},p),{},{components:n})):a.createElement(b,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var o=2;o<l;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},77637:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var a=n(83117),r=(n(67294),n(3905));const l={title:"Typed and Labelled Pattern",keywords:[":"]},i=void 0,s={unversionedId:"Rascal/Patterns/TypedLabelled/index",id:"Rascal/Patterns/TypedLabelled/index",title:"Typed and Labelled Pattern",description:"Synopsis",source:"@site/docs/Rascal/Patterns/TypedLabelled/index.md",sourceDirName:"Rascal/Patterns/TypedLabelled",slug:"/Rascal/Patterns/TypedLabelled/",permalink:"/docs/Rascal/Patterns/TypedLabelled/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Rascal/Patterns/TypedLabelled/index.md",tags:[],version:"current",frontMatter:{title:"Typed and Labelled Pattern",keywords:[":"]},sidebar:"tutorialSidebar",previous:{title:"Type Constrained Pattern",permalink:"/docs/Rascal/Patterns/TypeConstrained/"},next:{title:"Variable Pattern",permalink:"/docs/Rascal/Patterns/Variable/"}},d={},o=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],p={toc:o};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Typed, labelled, abstract pattern."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"A typed, labelled, pattern matches when the subject value has type ",(0,r.kt)("em",{parentName:"p"},"Type")," and ",(0,r.kt)("em",{parentName:"p"},"Pat")," matches.\nThe matched value is assigned to ",(0,r.kt)("em",{parentName:"p"},"Var"),"."),(0,r.kt)("p",null,"This construct is used for:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"binding the ",(0,r.kt)("em",{parentName:"li"},"whole pattern")," to a variable while also matching some stuff out of it: ",(0,r.kt)("inlineCode",{parentName:"li"},"MyType t : someComplexPattern(f(int a), int b))"),".\nThis is similar to ",(0,r.kt)("a",{parentName:"li",href:"../../../Rascal/Patterns/Labelled"},"Labelled"),"s patterns but with an extra type"),(0,r.kt)("li",{parentName:"ul"},"to assert that the pattern has a certain type. This can be useful in disambiguating a constructor name, as in the example below.")),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>data Lang = add(Lang l, Lang r) | number(int i);\nok\nrascal>data Exp = id(str n) | add(Exp l, Exp r) | subtract(Exp l, Exp r) | otherLang(Lang a);\nok\nrascal>ex = add(id("x"), add(id("y"), otherLang(add(number(1),number(2)))));\nExp: add(\n  id("x"),\n  add(\n    id("y"),\n    otherLang(add(\n        number(1),\n        number(2)))))\nrascal>visit (ex) {\n>>>>>>>  case Lang l:add(_,_) : println("I found a Lang <l>");\n>>>>>>>  case Exp e:add(_,_)  : println("And I found an Exp <e>");\n>>>>>>>}\n}\nI found a Lang add(number(1),number(2))\nAnd I found an Exp add(id("y"),otherLang(add(number(1),number(2))))\nAnd I found an Exp add(id("x"),add(id("y"),otherLang(add(number(1),number(2)))))\nExp: add(\n  id("x"),\n  add(\n    id("y"),\n    otherLang(add(\n        number(1),\n        number(2)))))\n')))}c.isMDXComponent=!0}}]);