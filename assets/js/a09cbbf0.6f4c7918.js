"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[81828],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var l=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,l,a=function(e,n){if(null==e)return{};var t,l,a={},o=Object.keys(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=l.createContext({}),c=function(e){var n=l.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return l.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},u=l.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return t?l.createElement(h,r(r({ref:n},p),{},{components:t})):l.createElement(h,r({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var c=2;c<o;c++)r[c]=t[c];return l.createElement.apply(null,r)}return l.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5370:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var l=t(87462),a=(t(67294),t(3905));const o={title:"Hello"},r=void 0,i={unversionedId:"Recipes/Basic/Hello/index",id:"Recipes/Basic/Hello/index",title:"Hello",description:"Synopsis",source:"@site/docs/Recipes/Basic/Hello/index.md",sourceDirName:"Recipes/Basic/Hello",slug:"/Recipes/Basic/Hello/",permalink:"/docs/Recipes/Basic/Hello/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Recipes/Basic/Hello/index.md",tags:[],version:"current",frontMatter:{title:"Hello"},sidebar:"tutorialSidebar",previous:{title:"FizzBuzz",permalink:"/docs/Recipes/Basic/FizzBuzz/"},next:{title:"Quine",permalink:"/docs/Recipes/Basic/Quine/"}},s={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"<code>hello</code> on command line",id:"hello-on-command-line",level:2},{value:"<code>hello</code> as function",id:"hello-as-function",level:2},{value:"<code>hello</code> as module",id:"hello-as-module",level:2}],p={toc:c};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,l.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Variations on the ubiquitous ",(0,a.kt)("em",{parentName:"p"},"Hello World")," example."),(0,a.kt)("h2",{id:"hello-on-command-line"},(0,a.kt)("inlineCode",{parentName:"h2"},"hello")," on command line"),(0,a.kt)("p",null,"We demonstrate hello via an interactive session with the Rascal system. First we get the prompt ",(0,a.kt)("inlineCode",{parentName:"p"},"rascal>")," that shows that Rascal is ready for our input.\nNext, we import the library module ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO"},"IO")," since hello world requires printing. Rascal responds with the feedback ",(0,a.kt)("inlineCode",{parentName:"p"},"ok")," so we know that all went well. Finally, we call ",(0,a.kt)("inlineCode",{parentName:"p"},"println")," and proudly observe our first Rascal output!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>println("Hello world, this is my first Rascal program");\nprintln("Hello world, this is my first Rascal program");\nHello world, this is my first Rascal program\nok\n')),(0,a.kt)("h2",{id:"hello-as-function"},(0,a.kt)("inlineCode",{parentName:"h2"},"hello")," as function"),(0,a.kt)("p",null,"A slightly more audacious approach is to wrap the print statement in a function and call it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>void hello() {\n>>>>>>>   println("Hello world, this is my first Rascal program");\n>>>>>>>}\nvoid (): function(|prompt:///|(0,76,<1,0>,<3,1>))\n')),(0,a.kt)("p",null,"When you type in a command and continue it on a new line\nthe Rascal systems prompts you with ",(0,a.kt)("inlineCode",{parentName:"p"},">>>>>>>")," to\nindicate that more input is needed. Don't get scared by\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"void (): void hello();")," that you get back\nwhen typing in the hello function. The first\n",(0,a.kt)("inlineCode",{parentName:"p"},"void ()")," part says the result is a function that\nreturns nothing, and the second part\n",(0,a.kt)("inlineCode",{parentName:"p"},"void hello()")," summarizes its value\n(or would you prefer a hex dump?).\nFinally, we call the ",(0,a.kt)("inlineCode",{parentName:"p"},"hello")," function and enjoy its output."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>hello();\nhello();\nHello world, this is my first Rascal program\nok\n")),(0,a.kt)("h2",{id:"hello-as-module"},(0,a.kt)("inlineCode",{parentName:"h2"},"hello")," as module"),(0,a.kt)("p",null,"The summit of hello-engineering can be reached by placing all the above in a separate module:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},'\nmodule demo::basic::Hello\n\nimport IO;\n\nvoid hello() {\n   println("Hello world, this is my first Rascal program!");\n}\n\n')),(0,a.kt)("p",null,"This module should be placed in ",(0,a.kt)("inlineCode",{parentName:"p"},"<project dir>/src/demo/basic/Hello.rsc"),"."),(0,a.kt)("p",null,"Using this Hello module is now simple:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import demo::basic::Hello;\nok\nrascal>hello();\nhello();\nHello world, this is my first Rascal program!\nok\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"hello")," function is by default visible outside the ",(0,a.kt)("inlineCode",{parentName:"p"},"Hello")," module.\nWe could stress this by adding writing ",(0,a.kt)("inlineCode",{parentName:"p"},"public void hello() { ... }"),".\nRestricting visibility to the module itself can be achieved by adding the keyword ",(0,a.kt)("inlineCode",{parentName:"p"},"private"),"\nto the definition of ",(0,a.kt)("inlineCode",{parentName:"p"},"hello"),"."))}d.isMDXComponent=!0}}]);