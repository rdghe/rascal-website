"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[96492],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(a),d=r,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},79863:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var n=a(83117),r=(a(67294),a(3905));const s={title:"Concrete Patterns",keywords:["(",")","`","<",">"]},o=void 0,i={unversionedId:"Rascal/Patterns/Concrete/index",id:"Rascal/Patterns/Concrete/index",title:"Concrete Patterns",description:"Synopsis",source:"@site/docs/Rascal/Patterns/Concrete/index.md",sourceDirName:"Rascal/Patterns/Concrete",slug:"/Rascal/Patterns/Concrete/",permalink:"/docs/Rascal/Patterns/Concrete/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascal/Patterns/Concrete/index.md",tags:[],version:"current",frontMatter:{title:"Concrete Patterns",keywords:["(",")","`","<",">"]},sidebar:"tutorialSidebar",previous:{title:"Patterns",permalink:"/docs/Rascal/Patterns/"},next:{title:"Descendant Pattern",permalink:"/docs/Rascal/Patterns/Descendant/"}},l={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Concrete patterns."),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"Concrete pattern with expected symbol type: (_Symbol_) ` Token<sub>1</sub> Token<sub>2</sub> ... Token~n~ `\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"Typed variable inside a concrete pattern: <_Type_ _Var_>\n")),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"A concrete pattern is a pattern for matching a ",(0,r.kt)("a",{parentName:"p",href:"/docs/Library/ParseTree"},"Library:module:Parse tree"),". The notation of a concrete pattern is the ",(0,r.kt)("em",{parentName:"p"},"object language")," itself, the language that the parse tree describes.\nIn other words, you can use a code example to match parsed code using a concrete pattern. These concrete code examples can contain ",(0,r.kt)("a",{parentName:"p",href:"../../../Rascal/Patterns/Variable"},"Variable"),"s like the other ",(0,r.kt)("a",{parentName:"p",href:"../../../Rascal/Patterns"},"Patterns"),"."),(0,r.kt)("p",null,"The mechanism of concete patterns gives a good notation for matching complex structures such as a ",(0,r.kt)("a",{parentName:"p",href:"/docs/Library/ParseTree"},"Library:module:Parse tree"),", and it works in a simple manner:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the input code is parsed using a parser generated from a ",(0,r.kt)("a",{parentName:"li",href:"../../../Rascal/Declarations/SyntaxDefinition"},"Syntax Definition"),"; this generates parse trees."),(0,r.kt)("li",{parentName:"ul"},"the pattern example code is parsed using the ",(0,r.kt)("em",{parentName:"li"},"same")," parser; this generates parse trees with ",(0,r.kt)("a",{parentName:"li",href:"../../../Rascal/Patterns/Variable"},"Variable"),"s."),(0,r.kt)("li",{parentName:"ul"},"the parse tree with the ",(0,r.kt)("a",{parentName:"li",href:"../../../Rascal/Patterns/Variable"},"Variable"),"s is matches against the parse tree of the input code, similarly to the way ",(0,r.kt)("a",{parentName:"li",href:"../../../Rascal/Patterns/Node"},"Node")," work.     ")),(0,r.kt)("p",null,"So, you could say that ",(0,r.kt)("a",{parentName:"p",href:"../../../Rascal/Patterns/Concrete"},"Concrete")," are a short notation for otherwise highly complex ",(0,r.kt)("a",{parentName:"p",href:"../../../Rascal/Patterns/Node"},"Node")," on ",(0,r.kt)("a",{parentName:"p",href:"/docs/Library/ParseTree"},"Library:module:Parse tree"),".  Note that the ",(0,r.kt)("a",{parentName:"p",href:"../../../Rascal/Patterns/VariableDeclaration"},"Variable declaration"),"s in a concrete pattern can\nonly occur in the pattern at the location where the code for a full non-terminal of the ",(0,r.kt)("a",{parentName:"p",href:"../../../Rascal/Declarations/SyntaxDefinition"},"Syntax Definition")," would be. The structure of a concrete pattern follows the structure of the\ngrammar in the ",(0,r.kt)("a",{parentName:"p",href:"../../../Rascal/Declarations/SyntaxDefinition"},"Syntax definition")," and the types of the ",(0,r.kt)("a",{parentName:"p",href:"../../../Rascal/Patterns/Variable"},"Variable"),"s are the syntax non-terminals of the ",(0,r.kt)("a",{parentName:"p",href:"../../../Rascal/Declarations/SyntaxDefinition"},"Syntax Definition"),".  "),(0,r.kt)("p",null,"Inside concrete syntax patterns, layout is ignored while pattern matching. So parse trees which have different whitespace and comments but are otherwise the same will match anyway."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Examples (in a context where an appropriate concrete syntax has been defined):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Quoted syntax pattern with two pattern variable declarations:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import ParseTree;\nok\nrascal>syntax Id = [a-z]+;\nok\nrascal>syntax Num = [0-9]+;\nok\nrascal>syntax Exp = left Exp "*" Exp > Exp "+" Exp |  Id | Num;\nok\nrascal>layout WS = [\\ \\n\\r\\t]*;\nok\nrascal>visit (parse(#Exp, "x + x")) {\n>>>>>>>   case (Exp) `<Id a> + <Id b>` => (Exp) `2 * <Id a>` when a == b\n>>>>>>>}\nExp: (Exp) `x + x`\n')),(0,r.kt)("p",null,"Some observations about this example:"),(0,r.kt)("p",null,"** Notice how the non-terminals ",(0,r.kt)("inlineCode",{parentName:"p"},"Exp")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," from the ",(0,r.kt)("a",{parentName:"p",href:"../../../Rascal/Declarations/SyntaxDefinition"},"Syntax Definition")," become types for the pattern."),(0,r.kt)("p",null,"** When this example pattern actually matches the variable ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," is bound and can be used again like any other ",(0,r.kt)("a",{parentName:"p",href:"../../../Rascal/Patterns/Variable"},"Variable"),". "),(0,r.kt)("p",null,"A full example of concrete patterns can be found in ",(0,r.kt)("a",{parentName:"p",href:"../../../Recipes/Languages/Exp/Concrete/WithLayout"},"WithLayout"),"."))}u.isMDXComponent=!0}}]);