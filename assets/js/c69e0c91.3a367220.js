"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[51022],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,b=m["".concat(o,".").concat(d)]||m[d]||c[d]||s;return n?r.createElement(b,l(l({ref:t},u),{},{components:n})):r.createElement(b,l({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<s;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},73410:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=n(83117),a=(n(67294),n(3905));const s={title:"List Comprehension",keywords:["[","|","]"]},l=void 0,i={unversionedId:"Rascal/Expressions/Values/List/Comprehension/index",id:"Rascal/Expressions/Values/List/Comprehension/index",title:"List Comprehension",description:"Synopsis",source:"@site/docs/Rascal/Expressions/Values/List/Comprehension/index.md",sourceDirName:"Rascal/Expressions/Values/List/Comprehension",slug:"/Rascal/Expressions/Values/List/Comprehension/",permalink:"/docs/Rascal/Expressions/Values/List/Comprehension/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Rascal/Expressions/Values/List/Comprehension/index.md",tags:[],version:"current",frontMatter:{title:"List Comprehension",keywords:["[","|","]"]},sidebar:"tutorialSidebar",previous:{title:"List Append",permalink:"/docs/Rascal/Expressions/Values/List/Append/"},next:{title:"List Concatenation",permalink:"/docs/Rascal/Expressions/Values/List/Concatenation/"}},o={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"A list comprehension generates a list value."),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"[ Exp<sub>1</sub>, Exp<sub>2</sub>, ... | Gen<sub>1</sub>, Gen<sub>2</sub>, ... ]")),(0,a.kt)("h4",{id:"types"},"Types"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"th"},"Exp<sub>1</sub>")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"th"},"Exp<sub>2</sub>")),(0,a.kt)("th",{parentName:"tr",align:null},"..."),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"th"},"[ Exp<sub>1</sub>, Exp<sub>2</sub>, ... \\| Gen<sub>1</sub>, Gen<sub>2</sub>, ... ]")),(0,a.kt)("th",{parentName:"tr",align:null}))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"T<sub>1</sub>")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"T<sub>2</sub>")),(0,a.kt)("td",{parentName:"tr",align:null},"..."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"list[ lub( T<sub>1</sub>, T<sub>2</sub>, ... ) ]")),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"A list comprehension consists of a number of contributing expressions ",(0,a.kt)("em",{parentName:"p"},"Exp"),(0,a.kt)("sub",null,"1"),", ",(0,a.kt)("em",{parentName:"p"},"Exp"),(0,a.kt)("sub",null,"2"),", ... and a number of\ngenerators ",(0,a.kt)("em",{parentName:"p"},"Gen"),(0,a.kt)("sub",null,"1"),", ",(0,a.kt)("em",{parentName:"p"},"Gen"),(0,a.kt)("sub",null,"2"),", ",(0,a.kt)("em",{parentName:"p"},"Gen"),(0,a.kt)("sub",null,"3"),", ... that are evaluated as described in ",(0,a.kt)("a",{parentName:"p",href:"../../../../../Rascal/Expressions/Comprehensions"},"Comprehensions"),"."),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Computing a list of squares of the numbers from 0 to 10 that are divisible by 3:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>[n * n | int n <- [0 .. 10], n % 3 == 0];\nlist[int]: [0,9,36,81]\n")),(0,a.kt)("p",null,"But we can also include the relevant ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," in the resulting list:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>[n, n * n | int n <- [0 .. 10], n % 3 == 0];\nlist[int]: [0,0,3,9,6,36,9,81]\n")))}c.isMDXComponent=!0}}]);