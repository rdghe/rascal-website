"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[11182],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),y=c(n),d=a,f=y["".concat(l,".").concat(d)]||y[d]||u[d]||o;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=y;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},9030:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={title:"Concrete Syntax",keywords:["`","(",")"]},s=void 0,i={unversionedId:"Rascal/Expressions/ConcreteSyntax/index",id:"Rascal/Expressions/ConcreteSyntax/index",title:"Concrete Syntax",description:"Synopsis",source:"@site/docs/Rascal/Expressions/ConcreteSyntax/index.md",sourceDirName:"Rascal/Expressions/ConcreteSyntax",slug:"/Rascal/Expressions/ConcreteSyntax/",permalink:"/docs/Rascal/Expressions/ConcreteSyntax/",draft:!1,tags:[],version:"current",frontMatter:{title:"Concrete Syntax",keywords:["`","(",")"]},sidebar:"tutorialSidebar",previous:{title:"Filter",permalink:"/docs/Rascal/Expressions/Comprehensions/Filter/"},next:{title:"Operators",permalink:"/docs/Rascal/Expressions/Operators/"}},l={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Description",id:"description",level:4},{value:"Benefits",id:"benefits",level:4}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Concrete syntax is a notation for patterns that match parse trees and expressions that generate them."),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"`(Nonterminal) `sentence``\n")),(0,a.kt)("p",null,"Where each ",(0,a.kt)("inlineCode",{parentName:"p"},"sentence")," is a string over the language generated from ",(0,a.kt)("inlineCode",{parentName:"p"},"Nonterminal"),". This language is extended in the following way. Each non-terminal reachable ",(0,a.kt)("inlineCode",{parentName:"p"},"X")," from ",(0,a.kt)("em",{parentName:"p"},"Non"),"-terminal has an added alternative to allow nested Rascal ",(0,a.kt)("a",{parentName:"p",href:"/docs/Rascal/Patterns/"},"Patterns")," inside of concrete syntax fragments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'syntax X = "<" Pattern p ">";'))),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"A concrete syntax fragment allows the programmer to write patterns and expressions in the language that is currently analyzed,\ntransformed or generated. The ",(0,a.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/ConcreteSyntax/"},"./Concrete Syntax")," feature is derived from ",(0,a.kt)("a",{parentName:"p",href:"/docs/Rascal/Declarations/SyntaxDefinition/"},"Syntax Definition"),"s.\nFor any non-terminal defined in a ",(0,a.kt)("a",{parentName:"p",href:"/docs/Rascal/Declarations/SyntaxDefinition/"},"Syntax Definition"),", you may use ",(0,a.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/ConcreteSyntax/"},"./Concrete Syntax")," to match or generate its parse trees."),(0,a.kt)("h4",{id:"benefits"},"Benefits"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Easy notation for complex structures"),(0,a.kt)("li",{parentName:"ul"},"The leading Nonterminal always scopes the right parser to run."),(0,a.kt)("li",{parentName:"ul"},"Source-to-source transformations are easy with concrete syntax patterns.")))}u.isMDXComponent=!0}}]);