"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[40786],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(a),f=r,b=u["".concat(i,".").concat(f)]||u[f]||d[f]||l;return a?n.createElement(b,s(s({ref:t},p),{},{components:a})):n.createElement(b,s({ref:t},p))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,s=new Array(l);s[0]=u;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<l;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},84139:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var n=a(83117),r=(a(67294),a(3905));const l={title:"Labelled Pattern",keywords:[":"]},s=void 0,o={unversionedId:"Rascal/Patterns/Labelled/index",id:"Rascal/Patterns/Labelled/index",title:"Labelled Pattern",description:"Synopsis",source:"@site/docs/Rascal/Patterns/Labelled/index.md",sourceDirName:"Rascal/Patterns/Labelled",slug:"/Rascal/Patterns/Labelled/",permalink:"/docs/Rascal/Patterns/Labelled/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascal/Patterns/Labelled/index.md",tags:[],version:"current",frontMatter:{title:"Labelled Pattern",keywords:[":"]},sidebar:"tutorialSidebar",previous:{title:"Descendant Pattern",permalink:"/docs/Rascal/Patterns/Descendant/"},next:{title:"List Pattern",permalink:"/docs/Rascal/Patterns/List/"}},i={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],p={toc:c};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Labelled abstract pattern."),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("h4",{id:"types"},"Types"),(0,r.kt)("h4",{id:"function"},"Function"),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"A labelled pattern matches the same values as ",(0,r.kt)("em",{parentName:"p"},"Pat"),", but has as side-effect that the matched value is assigned to ",(0,r.kt)("em",{parentName:"p"},"Var"),"."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>data ColoredTree = leaf(int N)\n>>>>>>>                 | red(ColoredTree left, ColoredTree right) \n>>>>>>>                 | black(ColoredTree left, ColoredTree right);\nok\nrascal>T = red(red(black(leaf(1), leaf(2)), black(leaf(3), leaf(4))), black(leaf(5), leaf(4)));\nColoredTree: red(\n  red(\n    black(\n      leaf(1),\n      leaf(2)),\n    black(\n      leaf(3),\n      leaf(4))),\n  black(\n    leaf(5),\n    leaf(4)))\nrascal>for(/M:black(_,leaf(4)) := T)\n>>>>>>>    println("Match <M>");\n    println("Match <M>");\nMatch black(leaf(3),leaf(4))\nMatch black(leaf(5),leaf(4))\nlist[void]: []\n')),(0,r.kt)("p",null,"We use an ",(0,r.kt)("em",{parentName:"p"},"anonymous variable")," ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," at a position where we don't care about the actual value that is matched."),(0,r.kt)("h4",{id:"benefits"},"Benefits"))}d.isMDXComponent=!0}}]);