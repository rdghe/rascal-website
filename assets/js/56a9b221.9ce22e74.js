"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[74540],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),f=a,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},44734:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={title:"Case Distinction",sidebar_position:7},s=void 0,i={unversionedId:"RascalConcepts/CaseDistinction/index",id:"RascalConcepts/CaseDistinction/index",title:"Case Distinction",description:"Synopsis",source:"@site/docs/RascalConcepts/CaseDistinction/index.md",sourceDirName:"RascalConcepts/CaseDistinction",slug:"/RascalConcepts/CaseDistinction/",permalink:"/docs/RascalConcepts/CaseDistinction/",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Case Distinction",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Control Structures",permalink:"/docs/RascalConcepts/ControlStructures/"},next:{title:"Visiting",permalink:"/docs/RascalConcepts/Visiting/"}},c={},l=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],p={toc:l};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Case distinction via pattern matching."),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"The switch statement as known from C and Java is generalized: the subject value to switch on may be an\narbitrary value and the cases are arbitrary patterns followed by a statement.\nEach case is comparable to a ",(0,a.kt)("em",{parentName:"p"},"transaction"),": when the pattern succeeds and the following statement is\nexecuted successfully, all changes to variables made by the statement are committed and thus become permanent.\nThe variables bound by the pattern are always local to the statement associated with the case. "),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/Rascal/Statements/Switch/"},"Switch"),",",(0,a.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/Visit/"},"Visit")," and\n",(0,a.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/Visit/PatternWithAction/"},"Pattern With Action")," for more details."),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"We use the ",(0,a.kt)("a",{parentName:"p",href:"/docs/Recipes/Common/ColoredTrees/"},"ColoredTrees")," datatype as example and use a switch to\ndistinguish between red and black nodes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>data ColoredTree = \n>>>>>>>      leaf(int N) \n>>>>>>>    | red(ColoredTree left, ColoredTree right) \n>>>>>>>    | black(ColoredTree left, ColoredTree right);\nok\nrascal>ColoredTree CT = red(black(leaf(1), red(leaf(2),leaf(3))), black(leaf(3), leaf(4)));\nColoredTree: red(\n  black(\n    leaf(1),\n    red(\n      leaf(2),\n      leaf(3))),\n  black(\n    leaf(3),\n    leaf(4)))\nrascal>import IO;\nok\nrascal>switch (CT){\n>>>>>>>case red(_, _):\n>>>>>>>     println("A red root node");\n>>>>>>>case black(_, _):\n>>>>>>>     println("A black root node");\n>>>>>>>}\nA red root node\nok\n')))}d.isMDXComponent=!0}}]);