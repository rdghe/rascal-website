"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[70502],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=s,f=m["".concat(l,".").concat(d)]||m[d]||c[d]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},40771:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=n(83117),s=(n(67294),n(3905));const a={},o=void 0,i={unversionedId:"RascalTests/TestSoftwareEvolution/index",id:"RascalTests/TestSoftwareEvolution/index",title:"index",description:"Name: TestSoftwareEvolution",source:"@site/docs/RascalTests/TestSoftwareEvolution/index.md",sourceDirName:"RascalTests/TestSoftwareEvolution",slug:"/RascalTests/TestSoftwareEvolution/",permalink:"/docs/RascalTests/TestSoftwareEvolution/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/RascalTests/TestSoftwareEvolution/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"RascalTests",permalink:"/docs/RascalTests/"},next:{title:"Rascalopedia",permalink:"/docs/Rascalopedia/"}},l={},u=[],p={toc:u};function c(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Name: TestSoftwareEvolution"),(0,s.kt)("p",null,"Details:"),(0,s.kt)("p",null,"Syntax:"),(0,s.kt)("p",null,"Types:"),(0,s.kt)("p",null,"Function:"),(0,s.kt)("p",null,"Synopsis:"),(0,s.kt)("p",null,"Description:\nThis test assesses basic Rascal skills. In each exercise you have to select a choice or fill in a text field.\nPush the ",(0,s.kt)("strong",{parentName:"p"},"Give answer")," button when you have completed your answer."),(0,s.kt)("p",null,"When you make an error, you can push the ",(0,s.kt)("strong",{parentName:"p"},"I want another question")," button for a similar question (if available).\nYou can repeat this until you have the right answer or you give up."),(0,s.kt)("p",null,"You pass when you have more than 60% of the questions right."),(0,s.kt)("p",null,"Examples:"),(0,s.kt)("p",null,"Benefits:"),(0,s.kt)("p",null,"Pitfalls:"),(0,s.kt)("p",null,"This assessment software is still experimental; please bear with us and take the following into account:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Answers are not recorded: show at the end of the session all your answers to the instructor."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("em",{parentName:"li"},"Do not go to another page of the tutor since all your answers will be erased")," (precaution: record your answers yourself)"),(0,s.kt)("li",{parentName:"ul"},"Always push the ",(0,s.kt)("strong",{parentName:"li"},"Give answer")," button when you are ready (a newline in the text box will not work).")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Be aware: in the web version, there are no questions visible: use the Eclipse version instead")),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},'There is a "TODO" in the documentation source:\nmsg\n(((TODO: new tutor compiler does not compile questions to js yet)))')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'Questions:\n\nQChoice: Sets can be used to represent a sequence of values when\nb: The values have duplicates.\ng: The values have no duplicates and no order.\nb: The values are unordered.\n\nQChoice: The type of a list is determined by:\nb: The type of the first element that was first added to the list.\nb: The upperbound of the type of two arbitrary elements.\ng: The upperbound of the type of all elements.\n\nQType: <A:set[arb[int,real,str,loc]]>\n\nQType: <A:list[arb[int,real,str,loc]]>\n\nQType: <A:map[str,arb]>\n\n\nQType: \nmake: A = int\ntype: set[int]\ntest: {<A>, <?> } \nhint: one or more integer values separated by commas\n\nQType: \nmake: A = str\ntype: map[str,int]\ntest: (<A>: <?>)\nhint: a map from strings to integers\n\nQType: <A:set[arb[int,real,num,str,loc]]>\n\nQType: {<A:int>, <B:str>, <C:int>}\n\nQType: <A:rel[str,int,loc]>\n\nQType: <A:rel[int[0,20],int]>\n\nQValue:\ndesc: Determine the number of elements in a list\nlist:\nimport List;\ntext = ["abc", "def", "ghi"];\ntest: <?>(text) == 3;\n\nQValue:\ndesc: Determine the number of strings that contain "a".\nlist:\ntext = ["andra", "moi", "ennepe", "Mousa", "polutropon"];\npublic int count(list[str] text){\n  n = 0;\n  for(s <- text)\n    if(<?> := s)\n      n +=1;\n  return n;\n}\n\ntest: count(text) == 2;\n\nQValue:\ndesc: Return the strings that contain "o".\nlist:\ntext = ["andra", "moi", "ennepe", "Mousa", "polutropon"];\npublic list[str] find(list[str] text){\n  return \n    for(s <- text)\n      if(/o/ := s)\n        <?>;\n}\ntest: find(text) == ["moi", "Mousa", "polutropon"];\n\nQValue:\ndesc: Complete this function that finds duplicates in a list of strings\nlist:\ntext = ["the", "jaws", "that", "bite", "the", "claws", "that", "catch"];\npublic list[str] duplicates(list[str] text){\n    m = {};\n    return \n      for(s <- text)\n        if(<?>)\n           append s;\n        else\n           m += s;\n}\ntest: duplicates(text) == ["the", "that"];\n\nQValue:\ndesc: Complete this function that tests that a list of words forms a palindrome. A palindrome is a word that is symmetrical \nand can be read\nfrom left to right and from right to left.\nlist:\nimport List;\npublic bool isPalindrome(list[str] words){\n  return words == <?>;\n}\ntest: isPalindrome(["a", "b", "b", "a"]) == true;\n\n')))}c.isMDXComponent=!0}}]);