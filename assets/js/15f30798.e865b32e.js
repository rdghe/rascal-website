"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[50110],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},25707:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var r=n(83117),i=(n(67294),n(3905));const a={title:"Rewriting"},o=void 0,p={unversionedId:"RascalConcepts/Rewriting/index",id:"RascalConcepts/Rewriting/index",title:"Rewriting",description:"Synopsis",source:"@site/docs/RascalConcepts/Rewriting/index.md",sourceDirName:"RascalConcepts/Rewriting",slug:"/RascalConcepts/Rewriting/",permalink:"/docs/RascalConcepts/Rewriting/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/RascalConcepts/Rewriting/index.md",tags:[],version:"current",frontMatter:{title:"Rewriting"},sidebar:"tutorialSidebar",previous:{title:"Pattern Matching",permalink:"/docs/RascalConcepts/PatternMatching/"},next:{title:"Static Typing",permalink:"/docs/RascalConcepts/StaticTyping/"}},s={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],l={toc:c};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"synopsis"},"Synopsis"),(0,i.kt)("p",null,"Rewriting using pattern-directed invocation"),(0,i.kt)("h4",{id:"description"},"Description"),(0,i.kt)("p",null,"A rewrite rule is a recipe on how to simplify values.\nRemember: (",(0,i.kt)("em",{parentName:"p"},"a")," + ",(0,i.kt)("em",{parentName:"p"},"b"),")^2^ = ",(0,i.kt)("em",{parentName:"p"},"a"),"^2^ + 2 ",(0,i.kt)("em",{parentName:"p"},"ab")," + ",(0,i.kt)("em",{parentName:"p"},"b"),"^2^?\nA rewrite rule has a pattern as left-hand side -- here: (",(0,i.kt)("em",{parentName:"p"},"a")," + ",(0,i.kt)("em",{parentName:"p"},"b"),")^2^ -- and a replacement as\nright-hand side -- here: ",(0,i.kt)("em",{parentName:"p"},"a"),"^2^ + 2 ",(0,i.kt)("em",{parentName:"p"},"ab")," + ",(0,i.kt)("em",{parentName:"p"},"b"),"^2^.\nGiven a value and a set of rewrite rules the patterns are tried on every subpart of the value and replacements are made if a match is successful. This is repeated as long as some pattern matches."),(0,i.kt)("p",null,"Rascal has ancestors, notably ",(0,i.kt)("a",{parentName:"p",href:"http://www.meta-environment.org/"},"ASF+SDF"),", where rewriting was the most important computation mechanism.\nIn Rascal, rewriting can be achieved using pattern-directed invocation,\nsee ",(0,i.kt)("a",{parentName:"p",href:"../../Rascal/Declarations/Function"},"Function Declaration"),",\npossibly combined with a ",(0,i.kt)("a",{parentName:"p",href:"../../Rascal/Expressions/Visit"},"Visit")," statement."),(0,i.kt)("h4",{id:"examples"},"Examples"),(0,i.kt)("p",null,"In a package for symbolic differentiation it is desirable to keep expressions in simplified form in order\nto avoid intermediate results like ",(0,i.kt)("inlineCode",{parentName:"p"},"add(product(con(1), x), mul(con(0), y))")," that can be simplified to ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),".\nThe following definitions achieve this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal"},"Exp simp(add(con(n), con(m))) = con(n + m);   //<1>\nExp simp(mul(con(n), con(m))) = con(n * m);\n\nExp simp(mul(con(1), Exp e))  = e;\nExp simp(mul(Exp e, con(1)))  = e;\nExp simp(mul(con(0), Exp e))  = con(0);\nExp simp(mul(Exp e, con(0)))  = con(0);\n\nExp simp(add(con(0), Exp e))  = e;\nExp simp(add(Exp e, con(0)))  = e;\n\ndefault Exp simp(Exp e)       = e;            // <2>\n\nExp simplify(Exp e){                          // <3>\n  return bottom-up visit(e){\n           case Exp e1 => simp(e1)\n         }\n}\n")),(0,i.kt)("p",null,"<1> Definitions of the function ",(0,i.kt)("inlineCode",{parentName:"p"},"simp")," are given with different patterns as formal argument.\nEach definition is responsible for one particular simplification\n(here is where the similarity with rewrite rules surfaces)."),(0,i.kt)("p",null,"<2> A default for ",(0,i.kt)("inlineCode",{parentName:"p"},"simp")," is given: if no other definition applies, the default one is used."),(0,i.kt)("p",null,"<3> The actual ",(0,i.kt)("inlineCode",{parentName:"p"},"simplify")," function: it performs a bottom up visit of the expression, replacing each subexpression by\na simplified version."),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"../../Recipes/Common/Derivative"},"Derivative")," for a full explanation of this example."))}m.isMDXComponent=!0}}]);