"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[21627],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),u=o(n),c=i,g=u["".concat(p,".").concat(c)]||u[c]||d[c]||l;return n?a.createElement(g,s(s({ref:t},m),{},{components:n})):a.createElement(g,s({ref:t},m))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,s=new Array(l);s[0]=u;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var o=2;o<l;o++)s[o]=n[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},67324:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>o});var a=n(83117),i=(n(67294),n(3905));const l={title:"Assignment",keywords:["=","+=","-=","*=","/=","?=","[","..","]",".","?","@"]},s=void 0,r={unversionedId:"Rascal/Statements/Assignment/index",id:"Rascal/Statements/Assignment/index",title:"Assignment",description:"Synopsis",source:"@site/docs/Rascal/Statements/Assignment/index.md",sourceDirName:"Rascal/Statements/Assignment",slug:"/Rascal/Statements/Assignment/",permalink:"/docs/Rascal/Statements/Assignment/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascal/Statements/Assignment/index.md",tags:[],version:"current",frontMatter:{title:"Assignment",keywords:["=","+=","-=","*=","/=","?=","[","..","]",".","?","@"]},sidebar:"tutorialSidebar",previous:{title:"Assert",permalink:"/docs/Rascal/Statements/Assert/"},next:{title:"Annotation",permalink:"/docs/Rascal/Statements/Assignment/Annotation/"}},p={},o=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],m={toc:o};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"synopsis"},"Synopsis"),(0,i.kt)("p",null,"Assign a value to a variable or more complex data structure."),(0,i.kt)("h4",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Assignable AssignmentOp Exp")),(0,i.kt)("p",null,"where ",(0,i.kt)("em",{parentName:"p"},"AssignmentOp")," may be one of ",(0,i.kt)("inlineCode",{parentName:"p"},"="),", ",(0,i.kt)("inlineCode",{parentName:"p"},"+="),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-="),", ",(0,i.kt)("inlineCode",{parentName:"p"},"*="),", ",(0,i.kt)("inlineCode",{parentName:"p"},"/="),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"?="),"."),(0,i.kt)("p",null,"An ",(0,i.kt)("em",{parentName:"p"},"Assignable")," is one of the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Var")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Assignable [ Exp ]")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Assignable [ Exp .. Exp ]")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Assignable [ Exp, Exp .. Exp ]")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Assignable . Name")," "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"< Assignable, Assignable, ..., Assignable >")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Assignable ? Exp")," "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Assignable @ Name")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Name ( Assignable, Assignable, ... )"))),(0,i.kt)("h4",{id:"types"},"Types"),(0,i.kt)("h4",{id:"function"},"Function"),(0,i.kt)("h4",{id:"description"},"Description"),(0,i.kt)("p",null,"The purpose of an assignment is to assign a new value to a simple variable or to an element of a more complex data structure. "),(0,i.kt)("p",null,"The standard assignment operator is ",(0,i.kt)("inlineCode",{parentName:"p"},"="),".\nThe other assignment operators can be expressed as abbreviations for the standard assignment operator."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Assignment Operator"),(0,i.kt)("th",{parentName:"tr",align:null},"Equivalent to"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Assignable += Exp")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Assignable = Assignable + Exp"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Assignable -= Exp")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Assignable = Assignable - Exp"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Assignable *= Exp")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Assignable = Assignable * Exp"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Assignable /= Exp")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Assignable = Assignable / Exp"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Assignable &= Exp")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Assignable = Assignable & Exp"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Assignable ?= Exp")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Assignable = Assignable ? Exp"))))),(0,i.kt)("p",null,"An assignable is either a single variable, (the base variable), optionally followed by subscriptions, slices or field selections.\nThe assignment statement always results in assigning a completely new value to the base variable.\nWe distinguish the following forms of assignment:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"((Rascal:Statements/Assignment))"),(0,i.kt)("li",{parentName:"ul"},"((Rascal:Statements/Assignment/Annotation))"),(0,i.kt)("li",{parentName:"ul"},"((Rascal:Statements/Assignment/Constructor))"),(0,i.kt)("li",{parentName:"ul"},"((Rascal:Statements/Assignment/Field))"),(0,i.kt)("li",{parentName:"ul"},"((Rascal:Statements/Assignment/IsDefined))"),(0,i.kt)("li",{parentName:"ul"},"((Rascal:Statements/Assignment/Multiple))"),(0,i.kt)("li",{parentName:"ul"},"((Rascal:Statements/Assignment/Slice))"),(0,i.kt)("li",{parentName:"ul"},"((Rascal:Statements/Assignment/Subscription))"),(0,i.kt)("li",{parentName:"ul"},"((Rascal:Statements/Assignment/Variable))")),(0,i.kt)("h4",{id:"examples"},"Examples"),(0,i.kt)("h4",{id:"benefits"},"Benefits"))}d.isMDXComponent=!0}}]);