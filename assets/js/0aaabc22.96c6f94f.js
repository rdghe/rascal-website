"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[85334],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),b=i,m=d["".concat(o,".").concat(b)]||d[b]||c[b]||a;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var u=2;u<a;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},437:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(83117),i=(n(67294),n(3905));const a={title:"ListRelation Reflexive Transitive Closure",keywords:["*"]},l=void 0,s={unversionedId:"Rascal/Expressions/Values/ListRelation/ReflexiveTransitiveClosure/index",id:"Rascal/Expressions/Values/ListRelation/ReflexiveTransitiveClosure/index",title:"ListRelation Reflexive Transitive Closure",description:"Synopsis",source:"@site/docs/Rascal/Expressions/Values/ListRelation/ReflexiveTransitiveClosure/index.md",sourceDirName:"Rascal/Expressions/Values/ListRelation/ReflexiveTransitiveClosure",slug:"/Rascal/Expressions/Values/ListRelation/ReflexiveTransitiveClosure/",permalink:"/docs/Rascal/Expressions/Values/ListRelation/ReflexiveTransitiveClosure/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascal/Expressions/Values/ListRelation/ReflexiveTransitiveClosure/index.md",tags:[],version:"current",frontMatter:{title:"ListRelation Reflexive Transitive Closure",keywords:["*"]},sidebar:"tutorialSidebar",previous:{title:"ListRelation Join",permalink:"/docs/Rascal/Expressions/Values/ListRelation/Join/"},next:{title:"ListRelation Subscription",permalink:"/docs/Rascal/Expressions/Values/ListRelation/Subscription/"}},o={},u=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"synopsis"},"Synopsis"),(0,i.kt)("p",null,"The reflexive transitive closure of a binary list relation."),(0,i.kt)("h4",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Exp *")),(0,i.kt)("h4",{id:"types"},"Types"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"th"},"Exp")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"th"},"Exp *")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"lrel[T<sub>1</sub>, T<sub>2</sub>]")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"lrel[T<sub>1</sub>, T<sub>2</sub>]"))))),(0,i.kt)("h4",{id:"description"},"Description"),(0,i.kt)("p",null,"Reflexive transitive closure is defined by repeated composition of a list relation.\nIf we define for a given list relation R:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"R<sub>0</sub> = "),"[<a, a>, <b, b> | <a, b> <- R]",";`"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"R<sub>1</sub> = R")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"R<sub>2</sub> = R o R")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"R<sub>3</sub> = R o R<sub>2</sub>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"..."))),(0,i.kt)("p",null,"then the reflexive transitive closure R* can be defined in two ways:\n(also see ",(0,i.kt)("a",{parentName:"p",href:"../../../../../Rascal/Expressions/Values/ListRelation/TransitiveClosure"},"TransitiveClosure"),"):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"R* = R<sub>0</sub> + R<sub>1</sub> + R<sub>2</sub> + R<sub>3</sub> + ...")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"R* = R<sub>0</sub> + R+"))),(0,i.kt)("h4",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>[<1,2>, <2,3>, <3,4>]*;\nlrel[int,int]: [\n  <1,2>,\n  <2,3>,\n  <3,4>,\n  <1,3>,\n  <2,4>,\n  <1,4>,\n  <4,4>,\n  <3,3>,\n  <2,2>,\n  <1,1>\n]\n")))}c.isMDXComponent=!0}}]);