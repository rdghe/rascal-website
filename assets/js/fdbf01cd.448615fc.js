"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[78712],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=s,b=d["".concat(o,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(b,l(l({ref:t},u),{},{components:n})):r.createElement(b,l({ref:t},u))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:s,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},44908:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(83117),s=(n(67294),n(3905));const a={title:"List Intersection",keywords:["&"]},l=void 0,i={unversionedId:"Rascal/Expressions/Values/List/Intersection/index",id:"Rascal/Expressions/Values/List/Intersection/index",title:"List Intersection",description:"Synopsis",source:"@site/docs/Rascal/Expressions/Values/List/Intersection/index.md",sourceDirName:"Rascal/Expressions/Values/List/Intersection",slug:"/Rascal/Expressions/Values/List/Intersection/",permalink:"/docs/Rascal/Expressions/Values/List/Intersection/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascal/Expressions/Values/List/Intersection/index.md",tags:[],version:"current",frontMatter:{title:"List Intersection",keywords:["&"]},sidebar:"tutorialSidebar",previous:{title:"List Insert",permalink:"/docs/Rascal/Expressions/Values/List/Insert/"},next:{title:"List NotEqual",permalink:"/docs/Rascal/Expressions/Values/List/NotEqual/"}},o={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h4",{id:"synopsis"},"Synopsis"),(0,s.kt)("p",null,"Intersection of two lists."),(0,s.kt)("h4",{id:"syntax"},"Syntax"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Exp<sub>1</sub> & Exp<sub>2</sub>")),(0,s.kt)("h4",{id:"types"},"Types"),(0,s.kt)("p",null,"//"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"th"},"Exp<sub>1</sub>")),(0,s.kt)("th",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"th"},"Exp<sub>2</sub>")),(0,s.kt)("th",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"th"},"Exp<sub>1</sub> & Exp<sub>2</sub>")))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"list[T<sub>1</sub>]")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"list[T<sub>2</sub>]")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"list[lub(T<sub>1</sub>,T<sub>2</sub>)]"))))),(0,s.kt)("h4",{id:"description"},"Description"),(0,s.kt)("p",null,"Returns the intersection of the two list values of  ",(0,s.kt)("em",{parentName:"p"},"Exp"),(0,s.kt)("sub",null,"1")," and ",(0,s.kt)("em",{parentName:"p"},"Exp"),(0,s.kt)("sub",null,"2"),", i.e.,\nthe list value of ",(0,s.kt)("em",{parentName:"p"},"Exp"),(0,s.kt)("sub",null,"1")," with all elements removed that do not occur in the list value of ",(0,s.kt)("em",{parentName:"p"},"Exp"),(0,s.kt)("sub",null,"2"),"."),(0,s.kt)("h4",{id:"examples"},"Examples"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>[1, 2, 3, 4, 5] & [4, 5, 6];\nlist[int]: [4,5]\n")))}c.isMDXComponent=!0}}]);