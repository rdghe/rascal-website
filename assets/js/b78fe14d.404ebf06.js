"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[7251],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=s(n),k=r,d=c["".concat(o,".").concat(k)]||c[k]||u[k]||l;return n?a.createElement(d,p(p({ref:t},m),{},{components:n})):a.createElement(d,p({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,p=new Array(l);p[0]=c;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var s=2;s<l;s++)p[s]=n[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4890:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return o},default:function(){return k},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var a=n(3117),r=n(102),l=(n(7294),n(3905)),p=["components"],i={sidebar_position:10,title:"Runtime Errors"},o=void 0,s={unversionedId:"RunTimeErrors",id:"RunTimeErrors",title:"Runtime Errors",description:"Synopsis.",source:"@site/docs/RunTimeErrors.md",sourceDirName:".",slug:"/RunTimeErrors",permalink:"/docs/RunTimeErrors",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/RunTimeErrors.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"Runtime Errors"},sidebar:"tutorialSidebar",previous:{title:"TypePal",permalink:"/docs/TypePal"},next:{title:"Compile Time Errors",permalink:"/docs/CompileTimeErrors"}},m={},u=[{value:"Runtime Exceptions",id:"runtime-exceptions",level:2},{value:"Ambiguity",id:"ambiguity",level:3},{value:"Arithmetic Exception",id:"arithmetic-exception",level:3},{value:"Assertion Failed",id:"assertion-failed",level:3},{value:"Empty List",id:"empty-list",level:3},{value:"Empty Map",id:"empty-map",level:3},{value:"Empty Set",id:"empty-set",level:3},{value:"IO",id:"io",level:3},{value:"Index Out Of Bounds",id:"index-out-of-bounds",level:3},{value:"Invalid Argument",id:"invalid-argument",level:3},{value:"Invalid URI",id:"invalid-uri",level:3},{value:"Invalid Use Of Date",id:"invalid-use-of-date",level:3},{value:"Invalid Use Of Location",id:"invalid-use-of-location",level:3},{value:"Invalid Use Of Time",id:"invalid-use-of-time",level:3},{value:"Java",id:"java",level:3},{value:"No Main Function",id:"no-main-function",level:3},{value:"No Parent",id:"no-parent",level:3},{value:"No Such Annotation",id:"no-such-annotation",level:3},{value:"No Such Field",id:"no-such-field",level:3},{value:"No Such Key",id:"no-such-key",level:3},{value:"Not Implemented",id:"not-implemented",level:3},{value:"Parse Error",id:"parse-error",level:3},{value:"RegExp Syntax Error",id:"regexp-syntax-error",level:3},{value:"Unavailable Information",id:"unavailable-information",level:3},{value:"Other Runtime Errors",id:"other-runtime-errors",level:2},{value:"Compiler Error",id:"compiler-error",level:3}],c={toc:u};function k(e){var t=e.components,n=(0,r.Z)(e,p);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"All exceptions and errors a Rascal program can generate during execution (run time)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"Rascal can generate various kinds of exceptions and errors during execution (run time):"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#runtime-exceptions"},"Runtime Exceptions")," are discovered during execution of the Rascal program and can\nbe caught by the Rascal program. When a runtime exception is not caught in the program, execution is aborted.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#other-runtime-errors"},"Other Runtime Errors")," are discovered during execution of the Rascal program and\ncannot be caught by the Rascal program. They always lead to abortion of execution. These are the errors which can be\nprevented by fixing statically detected errors by the type checker."))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The structure and naming of exceptions and error messages is being revised so actual exceptions may differ from what\nis presented here.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Since the type checker is not available yet, the interpreter throws more run-time exceptions than necessary."))),(0,l.kt)("h2",{id:"runtime-exceptions"},"Runtime Exceptions"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"All runtime exceptions that can occur during execution of a Rascal program."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"The following exceptions can be trown as the result of a run-time error:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#ambiguity"},"Ambiguity"),": Ambiguity found in parsed text.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#arithmetic-exception"},"Arithmetic Exception"),": An arithmetic exception occurred.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#assertion-failed"},"Assertion Failed"),": An assertion in the Rascal code is false.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#empty-list"},"Empty List"),": Illegal operation on an empty list.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#empty-map"},"Empty Map"),": Illegal operation on an empty map.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#empty-set"},"Empty Set"),": Illegal operation on an empty set.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#io"},"IO"),": An input/output operation caused an error.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#index-out-of-bounds"},"Index Out Of Bounds"),": Index is out of bounds.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#invalid-argument"},"Invalid Argument"),": A function or operation is applied to an invalid argument\nvalue.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#invalid-uri"},"Invalid URI"),": An invalid URI is created at runtime.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#invalid-use-of-date"},"Invalid Use Of Date"),": Invalid of of a date at runtime.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#invalid-use-of-location"},"Invalid Use Of Location"),": Invalid use of a source location at runtime.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#invalid-use-of-time"},"Invalid Use Of Time"),": Invalid use of a time value at runtime.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#java"},"Java"),": Runtime error generated by Java code.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#no-main-function"},"No Main Function"),": Rascal program does not provide a ",(0,l.kt)("inlineCode",{parentName:"p"},"main")," function.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#no-parent"},"No Parent"),": Parent directory is missing in source location.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#no-such-annoation"},"No Such Annotation"),": Annotation without a value.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#no-such-field"},"No Such Field"),": Field of an abstract data type value cannot be found at runtime.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#no-such-key"},"No Such Key"),": A map does not contain a requested key.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#not-implemented"},"Not Implemented"),": Attempt to execute an unimplemented feature.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#parse-error"},"Parse Error"),": Parse of a syntactically incorrect string.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#regexp-syntax-error"},"RegExp Syntax Error"),": Syntax error in regular expression at run time.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"#unavailable-information"},"Unavailable Information"),": Requested information is unavailable at\nruntime."))),(0,l.kt)("h3",{id:"ambiguity"},"Ambiguity"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Ambiguity found in parsed text."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"Rascal supports general context-free grammars and also provides various mechanisms to disambiguate them."),(0,l.kt)("p",null,"This exception is thrown when, given a grammar and a sentence, an ambiguity is found while parsing the sentence\naccording to that grammar."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("p",null,"First declare a very simple expression language that should recognize expressions like ",(0,l.kt)("inlineCode",{parentName:"p"},"a"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"a+a"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"a+(a+a)"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'syntax A = "a";\nsyntax E = A | "(" E ")" | E "+" E;\n')),(0,l.kt)("p",null,"Next, import the ParseTree module that provides a ",(0,l.kt)("inlineCode",{parentName:"p"},"parse")," function that we will use:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"import ParseTree;\n")),(0,l.kt)("p",null,"Entering a first expression goes well, except that the parser generator already predicts future ambiguity. So it prints\na warning."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell-error"},'parse(#e, "a+a");\n')),(0,l.kt)("p",null,"The following example triggers the predicted ambiguity indeed:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'parse(#e, "a+a+a");\n')),(0,l.kt)("p",null,"The conclusion is that there are two parses here: ",(0,l.kt)("inlineCode",{parentName:"p"},"a+(a+a)")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"(a+a)+a"),", because we did forget to define the\nassociativity of the ",(0,l.kt)("inlineCode",{parentName:"p"},"+")," operator."),(0,l.kt)("p",null,"Let\u2019s fix this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'syntax A = "a";\nsyntax E = A | "(" E ")" | left E "+" E;\nimport ParseTree;\nparse(#e, "a+a+a");\n')),(0,l.kt)("p",null,"However, one can also deal with ambiguity differently. For example we could have the parser build a tree for all\nambiguous interpretations and inspect the resulting data-structure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'syntax A = "a";\nsyntax E = A | "(" E ")" | left E "+" E | left E "*" E;\nimport ParseTree;\nt = parse(#e, "a+a*a", allowAmbiguity=true);\n// Is the forest indeed ambiguous?\n/amb(_) := t\n// How many alternatives?\nimport Set;\nimport IO;\n/amb(a) := t ? size(a) : 0;\n// Which rules are at the top of the alternatives?\nif (/docs/amb({a1, a2}) := t)\n  println("alternative 1: <a1.prod>\n          \'alternative 2: <a2.prod>");\n')),(0,l.kt)("p",null,"Or, one could catch the ambiguity and report it like a ",(0,l.kt)("a",{parentName:"p",href:"#parseError"},"Parse Error"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'import IO;\ntry\n  parse(#e, "a+a*a");\ncatch Ambiguity(loc l, str s, _):\n  println("the input is ambiguous for <s> on line <l.begin.line>");\n')),(0,l.kt)("p",null,"Here are some pointers for further disambiguation help:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#syntax-definition"},"Syntax Definitions"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#disambiguation"},"Disambiguation features"),"."))),(0,l.kt)("h3",{id:"arithmetic-exception"},"Arithmetic Exception"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"An arithmetic exception occurred."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = ArithmeticException(str message);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"ArithmeticException")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"This error is generated when an illegal arithmetic operation occurs or when a numeric function is called with an\nout-of-range argument."),(0,l.kt)("p",null,"Remedies:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Check the validity of the argument before you call the function or apply the operator.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Catch the ",(0,l.kt)("inlineCode",{parentName:"p"},"ArithmeticException")," yourself, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#try-catch"},"try catch")," statement."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("p",null,"Division by 0 gives an error:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"3/0;\n")),(0,l.kt)("p",null,"Giving an out-of-range argument to a mathematical function also gives an error:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"import util::Math;\ntan(-550000000000000000000000);\n")),(0,l.kt)("p",null,"We can also catch the ",(0,l.kt)("inlineCode",{parentName:"p"},"ArithmeticException")," error. First import the Rascal exceptions (which are also included in\n",(0,l.kt)("inlineCode",{parentName:"p"},"Prelude"),") and ",(0,l.kt)("inlineCode",{parentName:"p"},"IO"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'import Exception;\nimport IO;\ntry println(3/0); catch ArithmeticException(msg): println("The message is: <msg>");\n')),(0,l.kt)("h3",{id:"assertion-failed"},"Assertion Failed"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"An assertion in the Rascal code is false."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Function.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = AssertionFailed(str label);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"An ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#assert"},"Assert")," statement can be used to check assumptions during the execution of a Rascal program. This\nerror is generated if an assertion is not true."),(0,l.kt)("p",null,"Remedies:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Modify your code to make the assertion true.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Modify your assertion to reflect the current behaviour of your code.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Catch the ",(0,l.kt)("inlineCode",{parentName:"p"},"AssertionFailed")," yourself, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#try-catch"},"try catch"),"."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("p",null,"A false assertion gives an error:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"assert 3 > 4;\n")),(0,l.kt)("p",null,"Define a function that only increments positive integers:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'int incrPositive(int n) { assert n > 0: "n should be greater than 0"; return n + 1; }\n')),(0,l.kt)("p",null,"Calling it with a positive integer is fine:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"incrPositive(3);\n")),(0,l.kt)("p",null,"But a negative argument gives an error:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"incrPositive(-3);\n")),(0,l.kt)("p",null,"We can also catch the ",(0,l.kt)("inlineCode",{parentName:"p"},"AssertionFailed")," error. First import the Rascal exceptions (which are also included in ",(0,l.kt)("inlineCode",{parentName:"p"},"Prelude"),")\nand ",(0,l.kt)("inlineCode",{parentName:"p"},"IO"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'import Exception;\nimport IO;\ntry println(incrPositive(-3)); catch AssertionFailed(msg): println("incrPositive: <msg>");\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Enables the precise expression of assumptions in your code.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Asserts are actually executed when the compiler option ",(0,l.kt)("inlineCode",{parentName:"p"},"enableAsserts")," is set to true (by default set to ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),").")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"In the RascalShell, ",(0,l.kt)("inlineCode",{parentName:"p"},"enableAsserts")," is always true."))),(0,l.kt)("h3",{id:"empty-list"},"Empty List"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Illegal operation on an empty list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = EmptyList();")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"EmptyList")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"Rascal provides many operations and functions on lists, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#list"},"list values")," and ",(0,l.kt)("a",{parentName:"p",href:"/docs/Libraries#list"},"list\nfunctions"),". This error is generated when a function or operation cannot handle the empty list."),(0,l.kt)("p",null,"Remedies:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Guard the function or operation with a test on the empty list (",(0,l.kt)("a",{parentName:"p",href:"/docs/Libraries#isempty"},"isEmpty"),") and take\nalternative action in that case.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Catch the ",(0,l.kt)("inlineCode",{parentName:"p"},"EmptyList")," yourself, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#try-catch"},"try catch"),"."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("p",null,"Import the ",(0,l.kt)("inlineCode",{parentName:"p"},"List")," library and introduce ",(0,l.kt)("inlineCode",{parentName:"p"},"L")," with an empty list as value:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"import List;\nL = [];\n")),(0,l.kt)("p",null,"Taking the head of an empty list gives an error:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"head(L);\n")),(0,l.kt)("p",null,"This is the case when taking the tail as well:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"tail(L);\n")),(0,l.kt)("p",null,"We can also catch the ",(0,l.kt)("inlineCode",{parentName:"p"},"EmptyList")," error. First import the Rascal exceptions (which are also included in ",(0,l.kt)("inlineCode",{parentName:"p"},"Prelude"),") and\n",(0,l.kt)("inlineCode",{parentName:"p"},"IO"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'import Exception;\nimport IO;\ntry\n  println(head(L));\ncatch EmptyList():\n  println("Cannot take head of empty list");\n')),(0,l.kt)("h3",{id:"empty-map"},"Empty Map"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Illegal operation on an empty map."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = EmptyMap();")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"EmptyMap")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"Rascal provides many operations and functions on maps, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#map"},"map values")," and ",(0,l.kt)("a",{parentName:"p",href:"/docs/Libraries#map"},"map\nfunctions"),". This error is generated when a function or operations cannot handle the empty map\ncase."),(0,l.kt)("p",null,"Remedies:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Guard the function or operation with a test on the empty map (",(0,l.kt)("a",{parentName:"p",href:"/docs/Libraries#isempty"},"isEmpty"),") and take\nalternative action in that case.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Catch the ",(0,l.kt)("inlineCode",{parentName:"p"},"EmptyMap")," yourself, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#try-catch"},"try catch"),"."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("p",null,"Import the ",(0,l.kt)("inlineCode",{parentName:"p"},"Map")," library and introduce ",(0,l.kt)("inlineCode",{parentName:"p"},"M")," with an empty map as value:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"import Map;\nM = ();\n")),(0,l.kt)("p",null,"Trying to get an arbitrary value from it gives an error:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"getOneFrom(M);\n")),(0,l.kt)("p",null,"We can also catch the ",(0,l.kt)("inlineCode",{parentName:"p"},"EmptyMap")," error. First import the Rascal exceptions (which are also included in ",(0,l.kt)("inlineCode",{parentName:"p"},"Prelude"),") and\n",(0,l.kt)("inlineCode",{parentName:"p"},"IO"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'import Exception;\nimport IO;\ntry\n  println(getOneFrom(M));\ncatch EmptyMap():\n  println("Cannot use getOneFrom on empty map");\n')),(0,l.kt)("h3",{id:"empty-set"},"Empty Set"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Illegal operation on an empty set."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = EmptySet();")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"EmptySet")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"Rascal provides many operations and functions on sets, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#set"},"set values")," and ",(0,l.kt)("a",{parentName:"p",href:"/docs/Libraries#set"},"set\nfunctions"),". This error is generated when a function or operations cannot handle the empty set."),(0,l.kt)("p",null,"Remedies:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Guard the function or operation with a test on the empty set (",(0,l.kt)("a",{parentName:"p",href:"/docs/Libraries#isempty"},"isEmpty"),") and take\nalternative action in that case.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Catch the ",(0,l.kt)("inlineCode",{parentName:"p"},"EmptySet")," yourself, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#try-catch"},"try catch"),"."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("p",null,"Import the ",(0,l.kt)("inlineCode",{parentName:"p"},"Set")," library and introduce ",(0,l.kt)("inlineCode",{parentName:"p"},"S")," with an empty set as value:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"import Set;\nS = {};\n")),(0,l.kt)("p",null,"Taking an element from an empty set gives an error:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"getOneFrom(S);\n")),(0,l.kt)("p",null,"We can also catch the ",(0,l.kt)("inlineCode",{parentName:"p"},"EmptySet")," error. First import the Rascal exceptions (which are also included in ",(0,l.kt)("inlineCode",{parentName:"p"},"Prelude"),") and\n",(0,l.kt)("inlineCode",{parentName:"p"},"IO"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'import Exception;\nimport IO;\ntry\n  println(getOneFrom(S));\ncatch EmptySet():\n  println("Cannot apply getOneFrom to empty set");\n')),(0,l.kt)("h3",{id:"io"},"IO"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"An input/output operation caused an error."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = IO(str message);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"IO")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"This error can be generated for many reasons."),(0,l.kt)("p",null,"First there may be a problem in the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#location"},"location")," that is used. It maybe that the ",(0,l.kt)("em",{parentName:"p"},"schemes")," is not\nsupported. Examples of supported schemes include ",(0,l.kt)("inlineCode",{parentName:"p"},"http"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"file"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"home"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"std"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"rascal")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"project"),". It can also be\nthe case that the ",(0,l.kt)("em",{parentName:"p"},"host")," that occurs in the location cannot be found."),(0,l.kt)("p",null,"Second, while trying to open the file things can go wrong like insufficient access rights"),(0,l.kt)("p",null,"Finally, actual reading or writing can fail (device failure, device full, and the like)."),(0,l.kt)("p",null,"Remedies:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Check for any errors in the location you are using.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Check that you are allowed to read or write the resource indicated by the location.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Catch ",(0,l.kt)("inlineCode",{parentName:"p"},"IO")," using a ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#try-catch"},"try catch"),"."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("p",null,"Import the ",(0,l.kt)("inlineCode",{parentName:"p"},"IO")," library and attempt to use a non-existing scheme:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"import IO;\nreadFile(|myScheme:///example.rsc|);\n")),(0,l.kt)("p",null,"We can catch this ",(0,l.kt)("inlineCode",{parentName:"p"},"IO")," error. First import the Rascal exceptions (which are also included in ",(0,l.kt)("inlineCode",{parentName:"p"},"Prelude"),"):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'import Exception;\ntry\n  readFileLines(|myScheme:///example.rsc|);\ncatch IO(msg):\n  println("This did not work: <msg>");\n')),(0,l.kt)("h3",{id:"index-out-of-bounds"},"Index Out Of Bounds"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Index is out of bounds."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = IndexOutOfBounds(int index)")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"IndexOutOfBounds")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"Subscription is possible on various ordered types, including ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#subscription"},"list"),",\n",(0,l.kt)("a",{parentName:"p",href:"docs/Rascal#subscription"},"tuple"),", and ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#subscription"},"node"),". This error is generated when a\nsubscript is out of bounds for the value that is being subscripted."),(0,l.kt)("p",null,"Remedies:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Guard the subscription with a test that the index is within bounds.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Make your code less dependent on index values. Suggestions:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Libraries#index"},"index")," to produce all legal indices of a list. Instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"for(int i \u2190\n[0..size(L)]) { \u2026\u200b }")," use ",(0,l.kt)("inlineCode",{parentName:"p"},"for(int i \u2190 index(L)) { \u2026\u200b }"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use a ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#slice"},"list slice")," to automate part of the index computation.")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Catch the ",(0,l.kt)("inlineCode",{parentName:"p"},"IndexOutOfBounds")," yourself, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#try-catch"},"try catch"),"."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("p",null,"Initialize a list ",(0,l.kt)("inlineCode",{parentName:"p"},"L"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"L = [0, 10, 20, 30, 40];\n")),(0,l.kt)("p",null,"The legal indices are 0, 1, 2, 3, 4, so index 5 gives an error:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"L[5];\n")),(0,l.kt)("p",null,"We can catch the ",(0,l.kt)("inlineCode",{parentName:"p"},"IndexOutOfBounds")," error. First import the Rascal exceptions (which are also included in ",(0,l.kt)("inlineCode",{parentName:"p"},"Prelude"),") and\n",(0,l.kt)("inlineCode",{parentName:"p"},"IO"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'import Exception;\nimport IO;\ntry\n  L[5];\ncatch IndexOutOfBounds(msg):\n  println("The message is: <msg>");\n')),(0,l.kt)("h3",{id:"invalid-argument"},"Invalid Argument"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"A function or operation is applied to an invalid argument value."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = InvalidArgument() | InvalidArgument(value v) | InvalidArgument(value v, str message);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"InvalidArgument")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"This error is generated when a function or operation is applied to a value that it does not expect."),(0,l.kt)("p",null,"Remedies:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Check the value or values to which you apply the function or operation.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("p",null,"Changing the month of a ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#datetime"},"DateTime")," to an illegal month (13):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"NOW = $2013-01-13T22:16:51.740+01:00$;\nNOW.month = 13;\n")),(0,l.kt)("p",null,"Setting the offset in a location to a negative value:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"someLoc = |home:///abc.txt|;\nsomeLoc.offset = -1;\n")),(0,l.kt)("h3",{id:"invalid-uri"},"Invalid URI"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"An invalid URI is created at runtime."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = InvalidURI(str uri);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"InvalidURI")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"Thrown by operations on ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#location"},"source locations")," that would lead to an invalid URI part of a source\nlocation value."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'someLoc = |home:///abc.txt|;\nsomeLoc.scheme = "a:b";\n')),(0,l.kt)("p",null,"Another well-known example is a missing path when using ",(0,l.kt)("inlineCode",{parentName:"p"},"//")," (wrong) instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"///")," (good):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"|home:///|;\n|home://|;\n")),(0,l.kt)("h3",{id:"invalid-use-of-date"},"Invalid Use Of Date"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Invalid of of a date at runtime"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = InvalidUseOfDate(str message);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"InvalidUseOfDate")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"Thrown by operations on date values that try to update unavailable information."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("p",null,"Setting the ",(0,l.kt)("inlineCode",{parentName:"p"},"hour")," field on a date value throws an exception:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"NOW = $2016-09-18$;\nNOW.hour = 14;\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Note")),(0,l.kt)("p",{parentName:"blockquote"},"Exception is not shown properly")),(0,l.kt)("h3",{id:"invalid-use-of-location"},"Invalid Use Of Location"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Invalid use of a source location at runtime."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = InvalidUseOfLocation(str message);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"InvalidUseOfLocation")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"Thrown by operations on ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#location"},"source locations")," that would lead to an inconsistent or incomplete\nlocation value."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"someLoc = |home:///abc.txt|;\nsomeLoc.begin = <1, 2>;\n")),(0,l.kt)("h3",{id:"invalid-use-of-time"},"Invalid Use Of Time"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Invalid use of a time value at runtime"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = InvalidUseOfTime(str message);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"InvalidUseOfTime")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"Thrown by operations on time values that try to update unavailable information."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("p",null,"Setting the ",(0,l.kt)("inlineCode",{parentName:"p"},"year")," field on a time value throws an exception:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"NOW = $T20:11:01.463+00:00$;\nNOW.year = 2020;\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Note")),(0,l.kt)("p",{parentName:"blockquote"},"Exception is not shown properly")),(0,l.kt)("h3",{id:"java"},"Java"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Runtime error generated by Java code."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"This error is generated when an unexpected Java execption is thrown in the Rascal implementation."),(0,l.kt)("p",null,"Remedy: Contact the Rascal developers:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Ask a question at ",(0,l.kt)("a",{parentName:"p",href:"http://stackoverflow.com/questions/tagged/rascal"},"http://stackoverflow.com/questions/tagged/rascal"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Read the currently open issues at the Rascal\u2019s issue tracker at\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/cwi-swat/rascal/issues?state=open"},"https://github.com/cwi-swat/rascal/issues?state=open"),". If your problem has not yet been reported by someone else,\nplease report it here."))),(0,l.kt)("p",null,"If you are an expert developer and have implemented your own extension in Java, please check your own extension code\nfirst."),(0,l.kt)("h3",{id:"no-main-function"},"No Main Function"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Rascal program does not provide a ",(0,l.kt)("inlineCode",{parentName:"p"},"main")," function."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = NoMainFunction(str message);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"NoMainFunction")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"Thrown when executing a Rascal program that does not declare a main function."),(0,l.kt)("h3",{id:"no-parent"},"No Parent"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Parent directory is missing in source location."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = NoParent(loc noparentloc);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"NoParent")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("h3",{id:"no-such-annotation"},"No Such Annotation"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Annotation without a value."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = NoSuchAnnotation(str label);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"NoSuchAnnotation")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"An ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#annotation"},"annotation")," can be associated with any node value (including any ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#aDT"},"algebraic data\ntype"),"). This error is generated when the value of an annotation is requested but\nhas not been defined."),(0,l.kt)("p",null,"Remedies:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Ensure that the annotation value is properly initialized for all relevant parts of the node value.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#isDefined"},"isDefined")," and ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#ifDefinedElse"},"ifDefinedElse")," operators to check\nwhether the annotation value is set and act accordingly.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Catch the ",(0,l.kt)("inlineCode",{parentName:"p"},"NoSuchAnnotation yourself"),", see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#try-catch"},"try catch"),"."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("p",null,"INFO: Eliminate the double Error: Error:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"data Fruit = apple(int n) | orange(int n);\nanno str Fruit @ quality;\npiece = orange(13);\npiece@quality;\n")),(0,l.kt)("p",null,"Use the unary postfix operator isDefined ",(0,l.kt)("inlineCode",{parentName:"p"},"?")," to check whether the ",(0,l.kt)("inlineCode",{parentName:"p"},"quality")," annotation is set:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"piece@quality?;\n")),(0,l.kt)("p",null,"Use the ternary operator ifDefinedElse ",(0,l.kt)("inlineCode",{parentName:"p"},"?")," to compute an alternative value when the ",(0,l.kt)("inlineCode",{parentName:"p"},"quality")," annotation is not set:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'piece@quality ? "no quality value";\n')),(0,l.kt)("p",null,"We can also catch the ",(0,l.kt)("inlineCode",{parentName:"p"},"NoSuchAnnotation")," error. First import the Rascal exceptions (which are also included in\n",(0,l.kt)("inlineCode",{parentName:"p"},"Prelude"),") and ",(0,l.kt)("inlineCode",{parentName:"p"},"IO"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'import Exception;\nimport IO;\ntry piece@quality; catch NoSuchAnnotation(l): println("No such annotation: <l>");\n')),(0,l.kt)("p",null,"Finally, we can just assign a value to the ",(0,l.kt)("inlineCode",{parentName:"p"},"quality")," annotation:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'piece@quality = "excellent";\npiece@quality;\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Warning")),(0,l.kt)("p",{parentName:"blockquote"},"Using white space around the ",(0,l.kt)("inlineCode",{parentName:"p"},"@")," confuses the Rascal parser")),(0,l.kt)("h3",{id:"no-such-field"},"No Such Field"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Field of an abstract data type value cannot be found at runtime."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = NoSuchField(str name);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"NoSuchField")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"Selecting a field from an abstract datatype depends on the actual constructor being used at run time. This exception is\nthrown when a non-existent field is accessed."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("p",null,"Consider this highly simplified view on persons:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'data Person = man(str name, bool beard) | woman(str name, bool necklace);\njane = woman("jane", false);\n')),(0,l.kt)("p",null,"The field ",(0,l.kt)("inlineCode",{parentName:"p"},"beard")," is evidently only applicable to a ",(0,l.kt)("inlineCode",{parentName:"p"},"man"),' but not to a woman (didn\u2019t we say "simplified", above):'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"jane.beard;\n")),(0,l.kt)("h3",{id:"no-such-key"},"No Such Key"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"A map does not contain a requested key."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = NoSuchKey(value v);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"NoSuchKey")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"Rascal provides many operations and functions on maps, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#map"},"map values")," and ",(0,l.kt)("a",{parentName:"p",href:"/docs/Libraries#map"},"map\nfunctions"),". This error is generated when a function or operation cannot find a requested key\nvalue in a map."),(0,l.kt)("p",null,"Remedies:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#isDefined"},"isDefined")," and ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#ifDefinedElse"},"ifDefinedElse")," operator to guard\na lookup in a map.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Catch the ",(0,l.kt)("inlineCode",{parentName:"p"},"NoSuchKey")," yourself, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#try-catch"},"try catch"),"."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("p",null,"Import the ",(0,l.kt)("inlineCode",{parentName:"p"},"Map")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"IO")," libraries and introduce map ",(0,l.kt)("inlineCode",{parentName:"p"},"M"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'import Map;\nimport IO;\nM = ("a" : 1, "b" : 2);\n')),(0,l.kt)("p",null,"Indexing ",(0,l.kt)("inlineCode",{parentName:"p"},"M")," with a non-existing key gives an error:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'M["c"]\n')),(0,l.kt)("p",null,"Use the postfix isDefined operator ",(0,l.kt)("inlineCode",{parentName:"p"},"?")," to test whether the value is defined:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'if(M["c"]?) println("defined"); else println("not defined");\n')),(0,l.kt)("p",null,"Or use the binary ifDefinedElse operator ",(0,l.kt)("inlineCode",{parentName:"p"},"?")," to return an alternative value when the value of ",(0,l.kt)("inlineCode",{parentName:"p"},'M["c"]')," is undefined:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'M["c"] ? 3\n')),(0,l.kt)("p",null,"Yet another solution is to use try/catch. First we import the Rascal exceptions (which are also included in ",(0,l.kt)("inlineCode",{parentName:"p"},"Prelude"),"):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'import Exception;\ntry println(M["c"]); catch NoSuchKey(k): println("Key <k> does not exist");\n')),(0,l.kt)("h3",{id:"not-implemented"},"Not Implemented"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Attempt to execute an unimplemented feature."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = NotImplemented(str msg), loc src);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"NotImplemented")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"Thrown when a not (yet) implemented feature is executed. This exception is mostly used by the Rascal implementors."),(0,l.kt)("h3",{id:"parse-error"},"Parse Error"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Parse of a syntactically incorrect string."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = ParseError(loc parseloc) | ParseError(loc parseloc, str nt, str s);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"ParseError")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"This error is generated when during the execution of a Rascal program the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Libraries#parse"},"parse")," function\nis applied to a syntactically incorrect input sentence."),(0,l.kt)("p",null,"Remedies:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Correct the input sentence.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Adapt the grammar so that it accepts the input sentence.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Catch the ParseError yourself, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#try-catch"},"try catch"),"."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("p",null,"Define the non-terminal ",(0,l.kt)("inlineCode",{parentName:"p"},"As")," that accepts one or more letters ",(0,l.kt)("inlineCode",{parentName:"p"},"a"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'syntax As = "a"+;\n')),(0,l.kt)("p",null,"Then import ",(0,l.kt)("inlineCode",{parentName:"p"},"ParseTree")," so that we can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"parse")," function:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"import ParseTree;\n")),(0,l.kt)("p",null,"Now we can parse sentences consisting of letters ",(0,l.kt)("inlineCode",{parentName:"p"},"a"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'parse(#as, "aaaaaaaa");\n')),(0,l.kt)("p",null,"But we get an error when parsing syntactically incorrect input (i.e., that does not consists of letters ",(0,l.kt)("inlineCode",{parentName:"p"},"a")," only):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'parse(#as, "aaaabaaa");\n')),(0,l.kt)("p",null,"We can also catch the ParseError but first import the Rascal modules ",(0,l.kt)("inlineCode",{parentName:"p"},"Exception")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"IO"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'import Exception;\nimport IO;\ntry\n  parse(#as, "aaaabaaa");\ncatch ParseError(e):\n  println("Your input cannot be parsed: <e>");\n')),(0,l.kt)("h3",{id:"regexp-syntax-error"},"RegExp Syntax Error"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Syntax error in regular expression at run time"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = RegExpSyntaxError(str message);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"RegExpSyntaxError")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"At the moment, the parsing and compilation of regular expression is done at run time. This exception is thrown when a\nsyntactically incorrect regular expression is used."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("p",null,"The following regular expression ",(0,l.kt)("inlineCode",{parentName:"p"},"/+/")," is incorrect (maybe ",(0,l.kt)("inlineCode",{parentName:"p"},"/a+/")," was meant?):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'/+/ := "aaaa";\n')),(0,l.kt)("h3",{id:"unavailable-information"},"Unavailable Information"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Requested information is unavailable at runtime"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Types.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"data RuntimeException = UnavailableInformation(str message);")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import Exception;")," (only needed when ",(0,l.kt)("inlineCode",{parentName:"p"},"UnavailableInformation")," is used in ",(0,l.kt)("inlineCode",{parentName:"p"},"catch"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"Several datetypes may contain optional information that is not always available:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"In a ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#dateTime"},"datetime")," value the date or the time may be missing.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"In a ",(0,l.kt)("a",{parentName:"p",href:"/docs/Rascal#location"},"location")," value, various fields are optional, e.g., ",(0,l.kt)("inlineCode",{parentName:"p"},"port"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"offset"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"begin")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"end"),"."))),(0,l.kt)("p",null,"This exception is thrown when optional information is not available."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"$2016-09-14$.hour;\nsomeLoc = |home:///abc.txt|;\nsomeLoc.offset;\n")),(0,l.kt)("h2",{id:"other-runtime-errors"},"Other Runtime Errors"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"Other runtime errors that cannot be caught as a runtime exception."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"Note: Examples will be collected here"),(0,l.kt)("h3",{id:"compiler-error"},"Compiler Error"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Synopsis.")),(0,l.kt)("p",null,"An internal error in the Rascal compiler"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Description.")),(0,l.kt)("p",null,"An internal error condition occurred while running the Rascal compiler. This exception may be generated due to:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"An actual internal inconsistency.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Incorrect information as computed by the type checker.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Incorrect configuration of paths (PathConfig) when calling the compiler.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Causes outside control of the compiler."))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Pitfalls.")),(0,l.kt)("p",null,"At the moment this error category is too wide and should be narrowed."))}k.isMDXComponent=!0}}]);