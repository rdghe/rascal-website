"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[60967],{3905:(t,s,e)=>{e.d(s,{Zo:()=>u,kt:()=>g});var l=e(67294);function i(t,s,e){return s in t?Object.defineProperty(t,s,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[s]=e,t}function a(t,s){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);s&&(l=l.filter((function(s){return Object.getOwnPropertyDescriptor(t,s).enumerable}))),e.push.apply(e,l)}return e}function n(t){for(var s=1;s<arguments.length;s++){var e=null!=arguments[s]?arguments[s]:{};s%2?a(Object(e),!0).forEach((function(s){i(t,s,e[s])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(s){Object.defineProperty(t,s,Object.getOwnPropertyDescriptor(e,s))}))}return t}function c(t,s){if(null==t)return{};var e,l,i=function(t,s){if(null==t)return{};var e,l,i={},a=Object.keys(t);for(l=0;l<a.length;l++)e=a[l],s.indexOf(e)>=0||(i[e]=t[e]);return i}(t,s);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(l=0;l<a.length;l++)e=a[l],s.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(i[e]=t[e])}return i}var r=l.createContext({}),o=function(t){var s=l.useContext(r),e=s;return t&&(e="function"==typeof t?t(s):n(n({},s),t)),e},u=function(t){var s=o(t.components);return l.createElement(r.Provider,{value:s},t.children)},d={inlineCode:"code",wrapper:function(t){var s=t.children;return l.createElement(l.Fragment,{},s)}},k=l.forwardRef((function(t,s){var e=t.components,i=t.mdxType,a=t.originalType,r=t.parentName,u=c(t,["components","mdxType","originalType","parentName"]),k=o(e),g=i,p=k["".concat(r,".").concat(g)]||k[g]||d[g]||a;return e?l.createElement(p,n(n({ref:s},u),{},{components:e})):l.createElement(p,n({ref:s},u))}));function g(t,s){var e=arguments,i=s&&s.mdxType;if("string"==typeof t||i){var a=e.length,n=new Array(a);n[0]=k;var c={};for(var r in s)hasOwnProperty.call(s,r)&&(c[r]=s[r]);c.originalType=t,c.mdxType="string"==typeof t?t:i,n[1]=c;for(var o=2;o<a;o++)n[o]=e[o];return l.createElement.apply(null,n)}return l.createElement.apply(null,e)}k.displayName="MDXCreateElement"},27903:(t,s,e)=>{e.r(s),e.d(s,{assets:()=>r,contentTitle:()=>n,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var l=e(83117),i=(e(67294),e(3905));const a={title:"lang::rascal::tests::basic::Lists"},n=void 0,c={unversionedId:"Library/lang/rascal/tests/basic/Lists",id:"Library/lang/rascal/tests/basic/Lists",title:"lang::rascal::tests::basic::Lists",description:"Usage",source:"@site/docs/Library/lang/rascal/tests/basic/Lists.md",sourceDirName:"Library/lang/rascal/tests/basic",slug:"/Library/lang/rascal/tests/basic/Lists",permalink:"/docs/Library/lang/rascal/tests/basic/Lists",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/lang/rascal/tests/basic/Lists.md",tags:[],version:"current",frontMatter:{title:"lang::rascal::tests::basic::Lists"},sidebar:"tutorialSidebar",previous:{title:"lang::rascal::tests::basic::ListRelations",permalink:"/docs/Library/lang/rascal/tests/basic/ListRelations"},next:{title:"lang::rascal::tests::basic::Locations",permalink:"/docs/Library/lang/rascal/tests/basic/Locations"}},r={},o=[{value:"Usage",id:"usage",level:4},{value:"function isConcat",id:"lang-rascal-tests-basic-Lists-isConcat",level:2},{value:"function concat1",id:"lang-rascal-tests-basic-Lists-concat1",level:2},{value:"function concat2",id:"lang-rascal-tests-basic-Lists-concat2",level:2},{value:"function concat3",id:"lang-rascal-tests-basic-Lists-concat3",level:2},{value:"function isElemProperlyRemoved",id:"lang-rascal-tests-basic-Lists-isElemProperlyRemoved",level:2},{value:"function isDiff",id:"lang-rascal-tests-basic-Lists-isDiff",level:2},{value:"function diff",id:"lang-rascal-tests-basic-Lists-diff",level:2},{value:"function isEqual",id:"lang-rascal-tests-basic-Lists-isEqual",level:2},{value:"function equal1",id:"lang-rascal-tests-basic-Lists-equal1",level:2},{value:"function equal2",id:"lang-rascal-tests-basic-Lists-equal2",level:2},{value:"function notEqual1",id:"lang-rascal-tests-basic-Lists-notEqual1",level:2},{value:"function notEqual2",id:"lang-rascal-tests-basic-Lists-notEqual2",level:2},{value:"function isIn",id:"lang-rascal-tests-basic-Lists-isIn",level:2},{value:"function freq",id:"lang-rascal-tests-basic-Lists-freq",level:2},{value:"function mergeOrdered",id:"lang-rascal-tests-basic-Lists-mergeOrdered",level:2},{value:"function mergeUnOrdered",id:"lang-rascal-tests-basic-Lists-mergeUnOrdered",level:2},{value:"function inList",id:"lang-rascal-tests-basic-Lists-inList",level:2},{value:"function notInList",id:"lang-rascal-tests-basic-Lists-notInList",level:2},{value:"function intersection",id:"lang-rascal-tests-basic-Lists-intersection",level:2},{value:"function lesseq",id:"lang-rascal-tests-basic-Lists-lesseq",level:2},{value:"function less",id:"lang-rascal-tests-basic-Lists-less",level:2},{value:"function greatereq",id:"lang-rascal-tests-basic-Lists-greatereq",level:2},{value:"function greater",id:"lang-rascal-tests-basic-Lists-greater",level:2},{value:"function splicing",id:"lang-rascal-tests-basic-Lists-splicing",level:2},{value:"function subscription",id:"lang-rascal-tests-basic-Lists-subscription",level:2},{value:"function subscriptionWrapped",id:"lang-rascal-tests-basic-Lists-subscriptionWrapped",level:2},{value:"function sliceFirst",id:"lang-rascal-tests-basic-Lists-sliceFirst",level:2},{value:"function sliceFirst2",id:"lang-rascal-tests-basic-Lists-sliceFirst2",level:2},{value:"function makeSlice",id:"lang-rascal-tests-basic-Lists-makeSlice",level:2},{value:"function sliceFirstSecond",id:"lang-rascal-tests-basic-Lists-sliceFirstSecond",level:2},{value:"function sliceEmpty",id:"lang-rascal-tests-basic-Lists-sliceEmpty",level:2},{value:"function sliceOverEnd",id:"lang-rascal-tests-basic-Lists-sliceOverEnd",level:2},{value:"function sliceEnd",id:"lang-rascal-tests-basic-Lists-sliceEnd",level:2},{value:"function sliceSecondEnd",id:"lang-rascal-tests-basic-Lists-sliceSecondEnd",level:2},{value:"function arbFirstEnd",id:"lang-rascal-tests-basic-Lists-arbFirstEnd",level:2},{value:"function sliceFirstSecondEnd",id:"lang-rascal-tests-basic-Lists-sliceFirstSecondEnd",level:2},{value:"function sliceFirstNegative",id:"lang-rascal-tests-basic-Lists-sliceFirstNegative",level:2},{value:"function sliceEndNegative",id:"lang-rascal-tests-basic-Lists-sliceEndNegative",level:2},{value:"function sliceFirstNegativeSecondNegative",id:"lang-rascal-tests-basic-Lists-sliceFirstNegativeSecondNegative",level:2},{value:"function sliceSecondNegative",id:"lang-rascal-tests-basic-Lists-sliceSecondNegative",level:2},{value:"function assignSlice1",id:"lang-rascal-tests-basic-Lists-assignSlice1",level:2},{value:"function assignSlice2",id:"lang-rascal-tests-basic-Lists-assignSlice2",level:2},{value:"function assignSlice3",id:"lang-rascal-tests-basic-Lists-assignSlice3",level:2},{value:"function assignSlice4",id:"lang-rascal-tests-basic-Lists-assignSlice4",level:2},{value:"function assignStep1",id:"lang-rascal-tests-basic-Lists-assignStep1",level:2},{value:"function assignStep2",id:"lang-rascal-tests-basic-Lists-assignStep2",level:2},{value:"function assignStep3",id:"lang-rascal-tests-basic-Lists-assignStep3",level:2},{value:"function assignStep4",id:"lang-rascal-tests-basic-Lists-assignStep4",level:2},{value:"function assignStep5",id:"lang-rascal-tests-basic-Lists-assignStep5",level:2},{value:"function assignStep6",id:"lang-rascal-tests-basic-Lists-assignStep6",level:2},{value:"function assignStep7",id:"lang-rascal-tests-basic-Lists-assignStep7",level:2},{value:"function assignStep8",id:"lang-rascal-tests-basic-Lists-assignStep8",level:2},{value:"function assignStep9",id:"lang-rascal-tests-basic-Lists-assignStep9",level:2},{value:"function assignStep10",id:"lang-rascal-tests-basic-Lists-assignStep10",level:2},{value:"function assignStep11",id:"lang-rascal-tests-basic-Lists-assignStep11",level:2},{value:"function assignStep12",id:"lang-rascal-tests-basic-Lists-assignStep12",level:2},{value:"function assignStep13",id:"lang-rascal-tests-basic-Lists-assignStep13",level:2},{value:"function assignAdd1",id:"lang-rascal-tests-basic-Lists-assignAdd1",level:2},{value:"function assignAdd2",id:"lang-rascal-tests-basic-Lists-assignAdd2",level:2},{value:"function assignAdd3",id:"lang-rascal-tests-basic-Lists-assignAdd3",level:2},{value:"function assignAdd4",id:"lang-rascal-tests-basic-Lists-assignAdd4",level:2},{value:"function assignSub1",id:"lang-rascal-tests-basic-Lists-assignSub1",level:2},{value:"function assignSub2",id:"lang-rascal-tests-basic-Lists-assignSub2",level:2},{value:"function assignSub3",id:"lang-rascal-tests-basic-Lists-assignSub3",level:2},{value:"function assignSub4",id:"lang-rascal-tests-basic-Lists-assignSub4",level:2},{value:"function assignProd1",id:"lang-rascal-tests-basic-Lists-assignProd1",level:2},{value:"function assignProd2",id:"lang-rascal-tests-basic-Lists-assignProd2",level:2},{value:"function assignProd3",id:"lang-rascal-tests-basic-Lists-assignProd3",level:2},{value:"function assignProd4",id:"lang-rascal-tests-basic-Lists-assignProd4",level:2},{value:"function AssignFromEnd1",id:"lang-rascal-tests-basic-Lists-AssignFromEnd1",level:2},{value:"function AssignFromEnd2",id:"lang-rascal-tests-basic-Lists-AssignFromEnd2",level:2},{value:"function AssignFromEnd3",id:"lang-rascal-tests-basic-Lists-AssignFromEnd3",level:2},{value:"function tstDelete",id:"lang-rascal-tests-basic-Lists-tstDelete",level:2},{value:"function tstDrop",id:"lang-rascal-tests-basic-Lists-tstDrop",level:2},{value:"function tstDup",id:"lang-rascal-tests-basic-Lists-tstDup",level:2},{value:"function tstGetOneFrom",id:"lang-rascal-tests-basic-Lists-tstGetOneFrom",level:2},{value:"function tstHead",id:"lang-rascal-tests-basic-Lists-tstHead",level:2},{value:"function tstHeadN",id:"lang-rascal-tests-basic-Lists-tstHeadN",level:2},{value:"function tstHeadTail",id:"lang-rascal-tests-basic-Lists-tstHeadTail",level:2},{value:"function tstIndex",id:"lang-rascal-tests-basic-Lists-tstIndex",level:2},{value:"function tstIndexOf",id:"lang-rascal-tests-basic-Lists-tstIndexOf",level:2},{value:"function tstInsertAt",id:"lang-rascal-tests-basic-Lists-tstInsertAt",level:2},{value:"function simplerIntercalateWithNegativeMatch",id:"lang-rascal-tests-basic-Lists-simplerIntercalateWithNegativeMatch",level:2},{value:"function tstIntercalate",id:"lang-rascal-tests-basic-Lists-tstIntercalate",level:2},{value:"function tstIsEmpty",id:"lang-rascal-tests-basic-Lists-tstIsEmpty",level:2},{value:"function tstLast",id:"lang-rascal-tests-basic-Lists-tstLast",level:2},{value:"function tstLastIndexOf",id:"lang-rascal-tests-basic-Lists-tstLastIndexOf",level:2},{value:"function tstMapper",id:"lang-rascal-tests-basic-Lists-tstMapper",level:2},{value:"function tstMax",id:"lang-rascal-tests-basic-Lists-tstMax",level:2},{value:"function tstMerge",id:"lang-rascal-tests-basic-Lists-tstMerge",level:2},{value:"function tstMin",id:"lang-rascal-tests-basic-Lists-tstMin",level:2},{value:"function tstMix",id:"lang-rascal-tests-basic-Lists-tstMix",level:2},{value:"function factorial",id:"lang-rascal-tests-basic-Lists-factorial",level:2},{value:"function tstPermutations",id:"lang-rascal-tests-basic-Lists-tstPermutations",level:2},{value:"function tstPop",id:"lang-rascal-tests-basic-Lists-tstPop",level:2},{value:"function tstPrefix",id:"lang-rascal-tests-basic-Lists-tstPrefix",level:2},{value:"function tstPush",id:"lang-rascal-tests-basic-Lists-tstPush",level:2},{value:"function tstReverse",id:"lang-rascal-tests-basic-Lists-tstReverse",level:2},{value:"function tstSize",id:"lang-rascal-tests-basic-Lists-tstSize",level:2},{value:"function tstSort",id:"lang-rascal-tests-basic-Lists-tstSort",level:2},{value:"function tstSplit",id:"lang-rascal-tests-basic-Lists-tstSplit",level:2},{value:"function tstSum",id:"lang-rascal-tests-basic-Lists-tstSum",level:2},{value:"function tstTail",id:"lang-rascal-tests-basic-Lists-tstTail",level:2},{value:"function tstTailN",id:"lang-rascal-tests-basic-Lists-tstTailN",level:2},{value:"function tstTake",id:"lang-rascal-tests-basic-Lists-tstTake",level:2},{value:"function tstTakeOneFrom",id:"lang-rascal-tests-basic-Lists-tstTakeOneFrom",level:2},{value:"function isEven",id:"lang-rascal-tests-basic-Lists-isEven",level:2},{value:"function takeEven",id:"lang-rascal-tests-basic-Lists-takeEven",level:2},{value:"function tstTakeWhile",id:"lang-rascal-tests-basic-Lists-tstTakeWhile",level:2},{value:"function tstToMapUnique",id:"lang-rascal-tests-basic-Lists-tstToMapUnique",level:2},{value:"function tstTop",id:"lang-rascal-tests-basic-Lists-tstTop",level:2},{value:"function tstToRel",id:"lang-rascal-tests-basic-Lists-tstToRel",level:2},{value:"function tstToSet",id:"lang-rascal-tests-basic-Lists-tstToSet",level:2},{value:"function tstToString",id:"lang-rascal-tests-basic-Lists-tstToString",level:2},{value:"function tstUnzip2",id:"lang-rascal-tests-basic-Lists-tstUnzip2",level:2},{value:"function tstUnzip3",id:"lang-rascal-tests-basic-Lists-tstUnzip3",level:2},{value:"function tstUpTill",id:"lang-rascal-tests-basic-Lists-tstUpTill",level:2},{value:"function tstZip",id:"lang-rascal-tests-basic-Lists-tstZip",level:2},{value:"function dtstSlice",id:"lang-rascal-tests-basic-Lists-dtstSlice",level:2},{value:"function dtstDelete",id:"lang-rascal-tests-basic-Lists-dtstDelete",level:2},{value:"function dtstDrop",id:"lang-rascal-tests-basic-Lists-dtstDrop",level:2},{value:"function dtstHead",id:"lang-rascal-tests-basic-Lists-dtstHead",level:2},{value:"function dtstTail",id:"lang-rascal-tests-basic-Lists-dtstTail",level:2},{value:"function dtstPrefix",id:"lang-rascal-tests-basic-Lists-dtstPrefix",level:2},{value:"function dtstDifference",id:"lang-rascal-tests-basic-Lists-dtstDifference",level:2},{value:"function dtstIntersection",id:"lang-rascal-tests-basic-Lists-dtstIntersection",level:2}],u={toc:o};function d(t){let{components:s,...e}=t;return(0,i.kt)("wrapper",(0,l.Z)({},u,e,{components:s,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"import lang::rascal::tests::basic::Lists;")),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-isConcat"},"function isConcat"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isConcat(list[&T] A, list[&T] B, list[&T] C)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-concat1"},"function concat1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool concat1(list[&T] A, list[&T] B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-concat2"},"function concat2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool concat2(     &T  A, list[&T] B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-concat3"},"function concat3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool concat3(list[&T] A,      &T  B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-isElemProperlyRemoved"},"function isElemProperlyRemoved"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isElemProperlyRemoved(&T x, list[&T] A, list[&T] B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-isDiff"},"function isDiff"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isDiff(list[&T] A, list[&T] B, list[&T] C)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-diff"},"function diff"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool diff(list[&T] A, list[&T] B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-isEqual"},"function isEqual"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isEqual(list[&T] A, list[&T] B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-equal1"},"function equal1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool equal1(list[&T] A)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-equal2"},"function equal2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool equal2(list[&T] A, list[&T] B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-notEqual1"},"function notEqual1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool notEqual1(list[&T] A)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-notEqual2"},"function notEqual2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool notEqual2(list[&T] A, list[&T] B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-isIn"},"function isIn"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isIn(&T x, list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-freq"},"function freq"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int freq(&T x, list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-mergeOrdered"},"function mergeOrdered"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[&T] mergeOrdered(list[&T] A, list[&T] B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-mergeUnOrdered"},"function mergeUnOrdered"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[&T] mergeUnOrdered(list[&T] A, list[&T] B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-inList"},"function inList"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool inList(list[&T] A, list[&T] B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-notInList"},"function notInList"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool notInList(list[&T] A, &T x)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-intersection"},"function intersection"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool intersection(list[&T] A, list[&T] B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-lesseq"},"function lesseq"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool lesseq(list[int] A, list[int] B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-less"},"function less"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool less(list[int] A, list[int] B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-greatereq"},"function greatereq"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool greatereq(list[int] A, list[int] B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-greater"},"function greater"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool greater(list[int] A, list[int] B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-splicing"},"function splicing"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool splicing(list[&T] A, list[&T] B)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-subscription"},"function subscription"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool subscription(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-subscriptionWrapped"},"function subscriptionWrapped"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool subscriptionWrapped(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-sliceFirst"},"function sliceFirst"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool sliceFirst(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-sliceFirst2"},"function sliceFirst2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool sliceFirst2(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-makeSlice"},"function makeSlice"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[int] makeSlice(list[int] L, int f, int s, int e)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-sliceFirstSecond"},"function sliceFirstSecond"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool sliceFirstSecond(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-sliceEmpty"},"function sliceEmpty"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool sliceEmpty(int from, int to)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-sliceOverEnd"},"function sliceOverEnd"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool sliceOverEnd()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-sliceEnd"},"function sliceEnd"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool sliceEnd(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-sliceSecondEnd"},"function sliceSecondEnd"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool sliceSecondEnd(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-arbFirstEnd"},"function arbFirstEnd"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tuple[int,int] arbFirstEnd(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-sliceFirstSecondEnd"},"function sliceFirstSecondEnd"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool sliceFirstSecondEnd(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-sliceFirstNegative"},"function sliceFirstNegative"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool sliceFirstNegative(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-sliceEndNegative"},"function sliceEndNegative"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool sliceEndNegative(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-sliceFirstNegativeSecondNegative"},"function sliceFirstNegativeSecondNegative"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool sliceFirstNegativeSecondNegative(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-sliceSecondNegative"},"function sliceSecondNegative"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool sliceSecondNegative(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignSlice1"},"function assignSlice1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignSlice1()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignSlice2"},"function assignSlice2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignSlice2()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignSlice3"},"function assignSlice3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignSlice3()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignSlice4"},"function assignSlice4"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignSlice4()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignStep1"},"function assignStep1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignStep1()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignStep2"},"function assignStep2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignStep2()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignStep3"},"function assignStep3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignStep3()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignStep4"},"function assignStep4"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignStep4()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignStep5"},"function assignStep5"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignStep5()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignStep6"},"function assignStep6"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignStep6()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignStep7"},"function assignStep7"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignStep7()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignStep8"},"function assignStep8"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignStep8()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignStep9"},"function assignStep9"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignStep9()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignStep10"},"function assignStep10"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignStep10()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignStep11"},"function assignStep11"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignStep11()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignStep12"},"function assignStep12"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignStep12()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignStep13"},"function assignStep13"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignStep13()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignAdd1"},"function assignAdd1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignAdd1()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignAdd2"},"function assignAdd2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignAdd2()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignAdd3"},"function assignAdd3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignAdd3()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignAdd4"},"function assignAdd4"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignAdd4()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignSub1"},"function assignSub1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignSub1()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignSub2"},"function assignSub2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignSub2()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignSub3"},"function assignSub3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignSub3()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignSub4"},"function assignSub4"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignSub4()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignProd1"},"function assignProd1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignProd1()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignProd2"},"function assignProd2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignProd2()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignProd3"},"function assignProd3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignProd3()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-assignProd4"},"function assignProd4"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool assignProd4()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-AssignFromEnd1"},"function AssignFromEnd1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool AssignFromEnd1()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-AssignFromEnd2"},"function AssignFromEnd2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool AssignFromEnd2()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-AssignFromEnd3"},"function AssignFromEnd3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool AssignFromEnd3()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstDelete"},"function tstDelete"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstDelete(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstDrop"},"function tstDrop"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstDrop(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstDup"},"function tstDup"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstDup(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstGetOneFrom"},"function tstGetOneFrom"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstGetOneFrom(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstHead"},"function tstHead"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstHead(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstHeadN"},"function tstHeadN"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstHeadN(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstHeadTail"},"function tstHeadTail"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstHeadTail(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstIndex"},"function tstIndex"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstIndex(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstIndexOf"},"function tstIndexOf"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstIndexOf(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstInsertAt"},"function tstInsertAt"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstInsertAt(list[&T] L, &T e)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-simplerIntercalateWithNegativeMatch"},"function simplerIntercalateWithNegativeMatch"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool simplerIntercalateWithNegativeMatch()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstIntercalate"},"function tstIntercalate"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstIntercalate(str sep, list[value] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstIsEmpty"},"function tstIsEmpty"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstIsEmpty(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstLast"},"function tstLast"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstLast(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstLastIndexOf"},"function tstLastIndexOf"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstLastIndexOf(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstMapper"},"function tstMapper"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstMapper(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstMax"},"function tstMax"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstMax(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstMerge"},"function tstMerge"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstMerge(list[int] L, list[int] R)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstMin"},"function tstMin"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstMin(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstMix"},"function tstMix"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstMix(list[&T] L, list[&U] R)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-factorial"},"function factorial"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"int factorial(int n)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstPermutations"},"function tstPermutations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstPermutations(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstPop"},"function tstPop"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstPop(list[value] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstPrefix"},"function tstPrefix"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstPrefix(list[value] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstPush"},"function tstPush"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstPush(value elem, list[value] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstReverse"},"function tstReverse"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstReverse(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstSize"},"function tstSize"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstSize(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstSort"},"function tstSort"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstSort(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstSplit"},"function tstSplit"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstSplit(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstSum"},"function tstSum"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstSum(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstTail"},"function tstTail"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstTail(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstTailN"},"function tstTailN"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstTailN(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstTake"},"function tstTake"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstTake(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstTakeOneFrom"},"function tstTakeOneFrom"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstTakeOneFrom(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-isEven"},"function isEven"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bool isEven(int a)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-takeEven"},"function takeEven"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list[int] takeEven(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstTakeWhile"},"function tstTakeWhile"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstTakeWhile(list[int] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstToMapUnique"},"function tstToMapUnique"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstToMapUnique(list[tuple[&A, &B]] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstTop"},"function tstTop"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstTop(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstToRel"},"function tstToRel"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstToRel(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstToSet"},"function tstToSet"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstToSet(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstToString"},"function tstToString"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstToString(list[value] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstUnzip2"},"function tstUnzip2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstUnzip2(list[tuple[&A, &B]] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstUnzip3"},"function tstUnzip3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstUnzip3(list[tuple[&A, &B, &C]] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstUpTill"},"function tstUpTill"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstUpTill(int n)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-tstZip"},"function tstZip"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool tstZip(list[&T] L)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-dtstSlice"},"function dtstSlice"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool dtstSlice(list[&T] lst)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-dtstDelete"},"function dtstDelete"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool dtstDelete(list[&T] lst)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-dtstDrop"},"function dtstDrop"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool dtstDrop(list[&T] lst)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-dtstHead"},"function dtstHead"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool dtstHead(list[&T] lst)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-dtstTail"},"function dtstTail"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool dtstTail(list[&T] lst)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-dtstPrefix"},"function dtstPrefix"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool dtstPrefix(list[&T] lst)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-dtstDifference"},"function dtstDifference"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool dtstDifference(list[&T] lst)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Lists-dtstIntersection"},"function dtstIntersection"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool dtstIntersection(list[&T] lst)"))))}d.isMDXComponent=!0}}]);