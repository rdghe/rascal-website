"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[34393],{3905:(e,t,l)=>{l.d(t,{Zo:()=>p,kt:()=>c});var i=l(67294);function a(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function n(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,i)}return l}function r(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?n(Object(l),!0).forEach((function(t){a(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):n(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function u(e,t){if(null==e)return{};var l,i,a=function(e,t){if(null==e)return{};var l,i,a={},n=Object.keys(e);for(i=0;i<n.length;i++)l=n[i],t.indexOf(l)>=0||(a[l]=e[l]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)l=n[i],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(a[l]=e[l])}return a}var o=i.createContext({}),s=function(e){var t=i.useContext(o),l=t;return e&&(l="function"==typeof e?e(t):r(r({},t),e)),l},p=function(e){var t=s(e.components);return i.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},y=i.forwardRef((function(e,t){var l=e.components,a=e.mdxType,n=e.originalType,o=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),y=s(l),c=a,f=y["".concat(o,".").concat(c)]||y[c]||d[c]||n;return l?i.createElement(f,r(r({ref:t},p),{},{components:l})):i.createElement(f,r({ref:t},p))}));function c(e,t){var l=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=l.length,r=new Array(n);r[0]=y;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u.mdxType="string"==typeof e?e:a,r[1]=u;for(var s=2;s<n;s++)r[s]=l[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,l)}y.displayName="MDXCreateElement"},64682:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>n,metadata:()=>u,toc:()=>s});var i=l(83117),a=(l(67294),l(3905));const n={title:"ValueIO"},r=void 0,u={unversionedId:"Library/ValueIO",id:"Library/ValueIO",title:"ValueIO",description:"Usage",source:"@site/docs/Library/ValueIO.md",sourceDirName:"Library",slug:"/Library/ValueIO",permalink:"/docs/Library/ValueIO",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/ValueIO.md",tags:[],version:"current",frontMatter:{title:"ValueIO"},sidebar:"tutorialSidebar",previous:{title:"Type",permalink:"/docs/Library/Type"},next:{title:"analysis",permalink:"/docs/Library/analysis/"}},o={},s=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"function readValueFile",id:"ValueIO-readValueFile",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"function getFileLength",id:"ValueIO-getFileLength",level:2},{value:"Synopsis",id:"synopsis-2",level:4},{value:"function readBinaryValueFile",id:"ValueIO-readBinaryValueFile",level:2},{value:"Synopsis",id:"synopsis-3",level:4},{value:"function readTextValueFile",id:"ValueIO-readTextValueFile",level:2},{value:"Synopsis",id:"synopsis-4",level:4},{value:"function readTextValueFileWithEmbeddedTypes",id:"ValueIO-readTextValueFileWithEmbeddedTypes",level:2},{value:"Synopsis",id:"synopsis-5",level:4},{value:"function readTextValueString",id:"ValueIO-readTextValueString",level:2},{value:"Synopsis",id:"synopsis-6",level:4},{value:"function writeBinaryValueFile",id:"ValueIO-writeBinaryValueFile",level:2},{value:"Synopsis",id:"synopsis-7",level:4},{value:"function writeTextValueFile",id:"ValueIO-writeTextValueFile",level:2},{value:"Synopsis",id:"synopsis-8",level:4}],p={toc:s};function d(e){let{components:t,...l}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"import ValueIO;")),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Library functions for reading and writing values in textual and binary format."),(0,a.kt)("h2",{id:"ValueIO-readValueFile"},"function readValueFile"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value readValueFile(loc file)"))),(0,a.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,a.kt)("p",null,"Read  a value from a binary file in PBF format."),(0,a.kt)("h2",{id:"ValueIO-getFileLength"},"function getFileLength"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int getFileLength(loc file)"))),(0,a.kt)("h4",{id:"synopsis-2"},"Synopsis"),(0,a.kt)("p",null,"Get length of a file in number of bytes."),(0,a.kt)("h2",{id:"ValueIO-readBinaryValueFile"},"function readBinaryValueFile"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"&T readBinaryValueFile(type[&T] result, loc file)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value readBinaryValueFile(loc file)"))),(0,a.kt)("h4",{id:"synopsis-3"},"Synopsis"),(0,a.kt)("p",null,"Read a typed value from a binary file."),(0,a.kt)("h2",{id:"ValueIO-readTextValueFile"},"function readTextValueFile"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"&T readTextValueFile(type[&T] result, loc file)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value readTextValueFile(loc file)"))),(0,a.kt)("h4",{id:"synopsis-4"},"Synopsis"),(0,a.kt)("p",null,"Read a typed value from a text file."),(0,a.kt)("h2",{id:"ValueIO-readTextValueFileWithEmbeddedTypes"},"function readTextValueFileWithEmbeddedTypes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"&T readTextValueFileWithEmbeddedTypes(type[&T] result, loc file)"))),(0,a.kt)("h4",{id:"synopsis-5"},"Synopsis"),(0,a.kt)("p",null,"If you have written a file containing reified types, then you can use this function\nto read them back.  "),(0,a.kt)("h2",{id:"ValueIO-readTextValueString"},"function readTextValueString"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value readTextValueString(str input)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"&T readTextValueString(type[&T] result, str input)"))),(0,a.kt)("h4",{id:"synopsis-6"},"Synopsis"),(0,a.kt)("p",null,"Parse a textual string representation of a value."),(0,a.kt)("h2",{id:"ValueIO-writeBinaryValueFile"},"function writeBinaryValueFile"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void writeBinaryValueFile(loc file, value val, bool compression = true)"))),(0,a.kt)("h4",{id:"synopsis-7"},"Synopsis"),(0,a.kt)("p",null,"Write a value to a file using an efficient binary file format."),(0,a.kt)("h2",{id:"ValueIO-writeTextValueFile"},"function writeTextValueFile"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void writeTextValueFile(loc file, value val)"))),(0,a.kt)("h4",{id:"synopsis-8"},"Synopsis"),(0,a.kt)("p",null,"Write a value to a file using a textual file format."))}d.isMDXComponent=!0}}]);