"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[30144],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),o=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=o(a),m=r,y=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return a?n.createElement(y,l(l({ref:t},c),{},{components:a})):n.createElement(y,l({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},51627:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var n=a(83117),r=(a(67294),a(3905));const i={title:"StaticTyping"},l=void 0,s={unversionedId:"Rascal/Declarations/StaticTyping/index",id:"Rascal/Declarations/StaticTyping/index",title:"StaticTyping",description:"Synopsis",source:"@site/docs/Rascal/Declarations/StaticTyping/index.md",sourceDirName:"Rascal/Declarations/StaticTyping",slug:"/Rascal/Declarations/StaticTyping/",permalink:"/docs/Rascal/Declarations/StaticTyping/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascal/Declarations/StaticTyping/index.md",tags:[],version:"current",frontMatter:{title:"StaticTyping"},sidebar:"tutorialSidebar",previous:{title:"Program",permalink:"/docs/Rascal/Declarations/Program/"},next:{title:"Reified Types",permalink:"/docs/Rascal/Declarations/StaticTyping/ReifiedTypes/"}},p={},o=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"The Type Lattice",id:"the-type-lattice",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Examples",id:"examples",level:4}],c={toc:o};function u(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"The static type system of Rascal."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"Rascal is based on static typing, this means that as many errors and inconsistencies as possible are spotted before\nthe program is executed. "),(0,r.kt)("h2",{id:"the-type-lattice"},"The Type Lattice"),(0,r.kt)("p",null,"The types are ordered in a so-called ",(0,r.kt)("em",{parentName:"p"},"type lattice")," shown in the following figure."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(97233).Z,width:"847",height:"951"})),(0,r.kt)("p",null,"The arrows describe a ",(0,r.kt)("em",{parentName:"p"},"subtype-of")," relation between types. The type ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," is the ",(0,r.kt)("em",{parentName:"p"},"smallest")," type and\nis included in all other types and the type ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," is the ",(0,r.kt)("em",{parentName:"p"},"largest")," type that includes all other types.\nWe also see that ",(0,r.kt)("inlineCode",{parentName:"p"},"rel")," is a subtype of ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," and that each ADT is a subtype of ",(0,r.kt)("inlineCode",{parentName:"p"},"node"),".\nA special role is played by the datatype ",(0,r.kt)("inlineCode",{parentName:"p"},"Tree")," that is the generic type of syntax trees.\nSyntax trees for specific languages are all subtypes of ",(0,r.kt)("inlineCode",{parentName:"p"},"Tree"),". As a result, syntax trees can be addressed at two levels: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"in a generic fashion as ",(0,r.kt)("inlineCode",{parentName:"li"},"Tree")," and,"),(0,r.kt)("li",{parentName:"ul"},"in a specific fashion as a more precisely typed syntax tree.\nFinally, each ",(0,r.kt)("inlineCode",{parentName:"li"},"alias")," is structurally equivalent to one or more specific other types.")),(0,r.kt)("p",null,"The fact that the types are ordered in a lattice makes it possible to define a ",(0,r.kt)("em",{parentName:"p"},"Least Upper Bound")," (lub) on types.\nGiven two types ",(0,r.kt)("em",{parentName:"p"},"T"),(0,r.kt)("sub",null,"1")," and ",(0,r.kt)("em",{parentName:"p"},"T"),(0,r.kt)("sub",null,"2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"lub(T<sub>1</sub>, T<sub>2</sub>)")," is defined as the nearest common super type of ",(0,r.kt)("em",{parentName:"p"},"T"),(0,r.kt)("sub",null,"1")," and ",(0,r.kt)("em",{parentName:"p"},"T"),(0,r.kt)("sub",null,"2"),"\nin the type lattice."),(0,r.kt)("h2",{id:"advanced-features"},"Advanced Features"),(0,r.kt)("p",null,"The Rascal type system has various advanced features that are described separately:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Types may be be ",(0,r.kt)("em",{parentName:"li"},"parameterized")," resulting in very general and reusable types, see ","[Type Parameters]","."),(0,r.kt)("li",{parentName:"ul"},"Declarations of ","[Function]","s and ","[AlgebraicDataType]","s may be parameterized and ","[Type Constraints]"," can be used to define\nconstraints on the actual type to be used."),(0,r.kt)("li",{parentName:"ul"},"The formal arguments of functions are bound to ",(0,r.kt)("em",{parentName:"li"},"values")," but in exceptional cases\na function may need a type as argument value, ",(0,r.kt)("a",{parentName:"li",href:"../../../Rascal/Expressions/Values/ReifiedTypes"},"Reified types")," make this possible.")),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Here are some simple examples of correct and incorrect typing:"),(0,r.kt)("p",null,"We can assign an integer value to an integer variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>int i = 3;\nint: 3\n")),(0,r.kt)("p",null,"But assigning a string value gives an error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>int j = "abc";\n|prompt:///|(4,9,<1,4>,<1,13>): Expected int, but got str\nAdvice: |http://tutor.rascal-mpl.org/Errors/Static/UnexpectedType/UnexpectedType.html|\nok\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"num")," type accepts integer and real values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>num n = i;\nnum: 3\nrascal>n = 3.14;\nnum: 3.14\n")),(0,r.kt)("p",null,"A variable of type ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," accepts all possible values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>value v = true;\nvalue: true\nrascal>v = "abc";\nvalue: "abc"\nrascal>v = [1, 2, 3];\nvalue: [1,2,3]\n')))}u.isMDXComponent=!0},97233:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/type-lattice-9a476acc338596237526acde1ad0c66b.png"}}]);