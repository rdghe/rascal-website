"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[91982],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,y=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(y,s(s({ref:t},c),{},{components:n})):a.createElement(y,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},95517:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(83117),r=(n(67294),n(3905));const i={title:"Syntax"},s=void 0,o={unversionedId:"Recipes/Languages/Lisra/Syntax/index",id:"Recipes/Languages/Lisra/Syntax/index",title:"Syntax",description:"Synopsis",source:"@site/docs/Recipes/Languages/Lisra/Syntax/index.md",sourceDirName:"Recipes/Languages/Lisra/Syntax",slug:"/Recipes/Languages/Lisra/Syntax/",permalink:"/docs/Recipes/Languages/Lisra/Syntax/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Recipes/Languages/Lisra/Syntax/index.md",tags:[],version:"current",frontMatter:{title:"Syntax"},sidebar:"tutorialSidebar",previous:{title:"Runtime",permalink:"/docs/Recipes/Languages/Lisra/Runtime/"},next:{title:"Test",permalink:"/docs/Recipes/Languages/Lisra/Test/"}},p={},l=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Usage",id:"usage",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],c={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"The textual syntax of Lisp."),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("h4",{id:"types"},"Types"),(0,r.kt)("h4",{id:"function"},"Function"),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"The first step in defining Lisp's textual format, we define a grammar for it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},'// tag::module[]\nmodule demo::lang::Lisra::Syntax\n\nlayout Whitespace      = [\\t-\\n\\r\\ ]*; \nlexical IntegerLiteral = [0-9]+ !>> [0-9];\nlexical AtomExp        = (![0-9()\\t-\\n\\r\\ ])+ !>>  ![0-9()\\t-\\n\\r\\ ];\n\nstart syntax LispExp            // TODO: remove constructor names (needed for compiler)\n      = int_lit: IntegerLiteral\n      | atom_exp: AtomExp\n      | par_exp: "(" LispExp* ")"\n      ;\n\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Whitespace")," defines the characters that can be ignored between tokens."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IntegerLiteral")," defines integer constants. In a first approximation ",(0,r.kt)("inlineCode",{parentName:"p"},"[0-9]")," is enough.\nHowever, to ensure that the longest possible sequence of digits is used, the ",(0,r.kt)("inlineCode",{parentName:"p"},"!>> [0-9]")," part\nensures that an integer cannot be followed by another digit."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AtomExp")," defines a Lisp symbol that may contain a wide range of characters (except layout and digits)."),(0,r.kt)("p",null,"The main syntactic concept is a ",(0,r.kt)("inlineCode",{parentName:"p"},"LispExp")," that may be an ",(0,r.kt)("inlineCode",{parentName:"p"},"IntegerLiteral"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"AtomExp")," or a list\nof ",(0,r.kt)("inlineCode",{parentName:"p"},"LispExp"),"s surrouned by parentheses."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"This grammar is demonstrated in ",(0,r.kt)("a",{parentName:"p",href:"/docs/Recipes/Languages/Lisra/Parse"},"Parse"),"."),(0,r.kt)("h4",{id:"benefits"},"Benefits"))}u.isMDXComponent=!0}}]);