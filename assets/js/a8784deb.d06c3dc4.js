"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[91956],{3905:(t,a,e)=>{e.d(a,{Zo:()=>o,kt:()=>y});var l=e(67294);function i(t,a,e){return a in t?Object.defineProperty(t,a,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[a]=e,t}function n(t,a){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);a&&(l=l.filter((function(a){return Object.getOwnPropertyDescriptor(t,a).enumerable}))),e.push.apply(e,l)}return e}function s(t){for(var a=1;a<arguments.length;a++){var e=null!=arguments[a]?arguments[a]:{};a%2?n(Object(e),!0).forEach((function(a){i(t,a,e[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):n(Object(e)).forEach((function(a){Object.defineProperty(t,a,Object.getOwnPropertyDescriptor(e,a))}))}return t}function r(t,a){if(null==t)return{};var e,l,i=function(t,a){if(null==t)return{};var e,l,i={},n=Object.keys(t);for(l=0;l<n.length;l++)e=n[l],a.indexOf(e)>=0||(i[e]=t[e]);return i}(t,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);for(l=0;l<n.length;l++)e=n[l],a.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(i[e]=t[e])}return i}var u=l.createContext({}),c=function(t){var a=l.useContext(u),e=a;return t&&(e="function"==typeof t?t(a):s(s({},a),t)),e},o=function(t){var a=c(t.components);return l.createElement(u.Provider,{value:a},t.children)},m={inlineCode:"code",wrapper:function(t){var a=t.children;return l.createElement(l.Fragment,{},a)}},E=l.forwardRef((function(t,a){var e=t.components,i=t.mdxType,n=t.originalType,u=t.parentName,o=r(t,["components","mdxType","originalType","parentName"]),E=c(e),y=i,d=E["".concat(u,".").concat(y)]||E[y]||m[y]||n;return e?l.createElement(d,s(s({ref:a},o),{},{components:e})):l.createElement(d,s({ref:a},o))}));function y(t,a){var e=arguments,i=a&&a.mdxType;if("string"==typeof t||i){var n=e.length,s=new Array(n);s[0]=E;var r={};for(var u in a)hasOwnProperty.call(a,u)&&(r[u]=a[u]);r.originalType=t,r.mdxType="string"==typeof t?t:i,s[1]=r;for(var c=2;c<n;c++)s[c]=e[c];return l.createElement.apply(null,s)}return l.createElement.apply(null,e)}E.displayName="MDXCreateElement"},71529:(t,a,e)=>{e.r(a),e.d(a,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>n,metadata:()=>r,toc:()=>c});var l=e(83117),i=(e(67294),e(3905));const n={title:"lang::rascal::tests::basic::Equality"},s=void 0,r={unversionedId:"Library/lang/rascal/tests/basic/Equality",id:"Library/lang/rascal/tests/basic/Equality",title:"lang::rascal::tests::basic::Equality",description:"Usage",source:"@site/docs/Library/lang/rascal/tests/basic/Equality.md",sourceDirName:"Library/lang/rascal/tests/basic",slug:"/Library/lang/rascal/tests/basic/Equality",permalink:"/docs/Library/lang/rascal/tests/basic/Equality",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/lang/rascal/tests/basic/Equality.md",tags:[],version:"current",frontMatter:{title:"lang::rascal::tests::basic::Equality"},sidebar:"tutorialSidebar",previous:{title:"lang::rascal::tests::basic::DynamicDispatch",permalink:"/docs/Library/lang/rascal/tests/basic/DynamicDispatch"},next:{title:"lang::rascal::tests::basic::EscapedNames",permalink:"/docs/Library/lang/rascal/tests/basic/EscapedNames"}},u={},c=[{value:"Usage",id:"usage",level:4},{value:"function canonicalTypes",id:"lang-rascal-tests-basic-Equality-canonicalTypes",level:2},{value:"function canonicalTypesRegression1",id:"lang-rascal-tests-basic-Equality-canonicalTypesRegression1",level:2},{value:"function canonicalTypesRegression2",id:"lang-rascal-tests-basic-Equality-canonicalTypesRegression2",level:2},{value:"function canonicalTypesRegression3",id:"lang-rascal-tests-basic-Equality-canonicalTypesRegression3",level:2},{value:"function reflexEq1",id:"lang-rascal-tests-basic-Equality-reflexEq1",level:2},{value:"function transEq1",id:"lang-rascal-tests-basic-Equality-transEq1",level:2},{value:"function commutativeEq1",id:"lang-rascal-tests-basic-Equality-commutativeEq1",level:2},{value:"function reflexEq2",id:"lang-rascal-tests-basic-Equality-reflexEq2",level:2},{value:"function transEq2",id:"lang-rascal-tests-basic-Equality-transEq2",level:2},{value:"function commutativeEq2",id:"lang-rascal-tests-basic-Equality-commutativeEq2",level:2},{value:"function allEqualValuesMatch",id:"lang-rascal-tests-basic-Equality-allEqualValuesMatch",level:2},{value:"function noMatchImpliesUnequal",id:"lang-rascal-tests-basic-Equality-noMatchImpliesUnequal",level:2},{value:"function matchIsEqualityModuloKeywordFields",id:"lang-rascal-tests-basic-Equality-matchIsEqualityModuloKeywordFields",level:2},{value:"function transEqSame",id:"lang-rascal-tests-basic-Equality-transEqSame",level:2},{value:"function commutativeEqSame",id:"lang-rascal-tests-basic-Equality-commutativeEqSame",level:2},{value:"function reflexLTE",id:"lang-rascal-tests-basic-Equality-reflexLTE",level:2},{value:"function antiSymmetricLTE",id:"lang-rascal-tests-basic-Equality-antiSymmetricLTE",level:2},{value:"function transLTE",id:"lang-rascal-tests-basic-Equality-transLTE",level:2},{value:"function antiSymmetricLTESame",id:"lang-rascal-tests-basic-Equality-antiSymmetricLTESame",level:2},{value:"function transLTESame",id:"lang-rascal-tests-basic-Equality-transLTESame",level:2},{value:"function antiSymmetricLTEWithKeywordParamsLt1",id:"lang-rascal-tests-basic-Equality-antiSymmetricLTEWithKeywordParamsLt1",level:2},{value:"function antiSymmetricLTEWithKeywordParamsLt2",id:"lang-rascal-tests-basic-Equality-antiSymmetricLTEWithKeywordParamsLt2",level:2},{value:"function antiSymmetricLTEWithKeywordParamsEq",id:"lang-rascal-tests-basic-Equality-antiSymmetricLTEWithKeywordParamsEq",level:2},{value:"function numTotalLTE1",id:"lang-rascal-tests-basic-Equality-numTotalLTE1",level:2},{value:"function numAntiSymmetricLTE",id:"lang-rascal-tests-basic-Equality-numAntiSymmetricLTE",level:2},{value:"function numTransLTE",id:"lang-rascal-tests-basic-Equality-numTransLTE",level:2},{value:"function numValueReflex",id:"lang-rascal-tests-basic-Equality-numValueReflex",level:2},{value:"function intTotalLTE",id:"lang-rascal-tests-basic-Equality-intTotalLTE",level:2},{value:"function intAntiSymmetricLTE",id:"lang-rascal-tests-basic-Equality-intAntiSymmetricLTE",level:2},{value:"function intTransLTE",id:"lang-rascal-tests-basic-Equality-intTransLTE",level:2},{value:"function intValueReflex",id:"lang-rascal-tests-basic-Equality-intValueReflex",level:2},{value:"function realTotalLTE",id:"lang-rascal-tests-basic-Equality-realTotalLTE",level:2},{value:"function realAntiSymmetricLTE",id:"lang-rascal-tests-basic-Equality-realAntiSymmetricLTE",level:2},{value:"function realTransLTE",id:"lang-rascal-tests-basic-Equality-realTransLTE",level:2},{value:"function realValueReflex",id:"lang-rascal-tests-basic-Equality-realValueReflex",level:2},{value:"function ratTotalLTE",id:"lang-rascal-tests-basic-Equality-ratTotalLTE",level:2},{value:"function ratAntiSymmetricLTE",id:"lang-rascal-tests-basic-Equality-ratAntiSymmetricLTE",level:2},{value:"function ratTransLTE",id:"lang-rascal-tests-basic-Equality-ratTransLTE",level:2},{value:"function ratValueReflex",id:"lang-rascal-tests-basic-Equality-ratValueReflex",level:2},{value:"function numTotalLTE2",id:"lang-rascal-tests-basic-Equality-numTotalLTE2",level:2},{value:"function strAntiSymmetricLTE",id:"lang-rascal-tests-basic-Equality-strAntiSymmetricLTE",level:2},{value:"function strTransLTE",id:"lang-rascal-tests-basic-Equality-strTransLTE",level:2},{value:"function strValueReflex",id:"lang-rascal-tests-basic-Equality-strValueReflex",level:2},{value:"function listReflexLTE",id:"lang-rascal-tests-basic-Equality-listReflexLTE",level:2},{value:"function listAntiSymmetricLTE",id:"lang-rascal-tests-basic-Equality-listAntiSymmetricLTE",level:2},{value:"function listTransLTE",id:"lang-rascal-tests-basic-Equality-listTransLTE",level:2},{value:"function subsetOrdering1",id:"lang-rascal-tests-basic-Equality-subsetOrdering1",level:2},{value:"function subsetOrdering2",id:"lang-rascal-tests-basic-Equality-subsetOrdering2",level:2},{value:"function setReflexLTE1",id:"lang-rascal-tests-basic-Equality-setReflexLTE1",level:2},{value:"function setAntiSymmetricLTE1",id:"lang-rascal-tests-basic-Equality-setAntiSymmetricLTE1",level:2},{value:"function setTransLTE1",id:"lang-rascal-tests-basic-Equality-setTransLTE1",level:2},{value:"function submapOrdering1",id:"lang-rascal-tests-basic-Equality-submapOrdering1",level:2},{value:"function submapOrdering2",id:"lang-rascal-tests-basic-Equality-submapOrdering2",level:2},{value:"function setReflexLTE2",id:"lang-rascal-tests-basic-Equality-setReflexLTE2",level:2},{value:"function setAntiSymmetricLTE2",id:"lang-rascal-tests-basic-Equality-setAntiSymmetricLTE2",level:2},{value:"function setTransLTE2",id:"lang-rascal-tests-basic-Equality-setTransLTE2",level:2},{value:"function locReflexLTE",id:"lang-rascal-tests-basic-Equality-locReflexLTE",level:2},{value:"function locAntiSymmetricLTE",id:"lang-rascal-tests-basic-Equality-locAntiSymmetricLTE",level:2},{value:"function locTransLTE",id:"lang-rascal-tests-basic-Equality-locTransLTE",level:2},{value:"function intToReal1",id:"lang-rascal-tests-basic-Equality-intToReal1",level:2},{value:"function ratToReal1",id:"lang-rascal-tests-basic-Equality-ratToReal1",level:2},{value:"function intToReal2",id:"lang-rascal-tests-basic-Equality-intToReal2",level:2},{value:"function ratToReal2",id:"lang-rascal-tests-basic-Equality-ratToReal2",level:2},{value:"function intToReal3",id:"lang-rascal-tests-basic-Equality-intToReal3",level:2},{value:"function ratToReal3",id:"lang-rascal-tests-basic-Equality-ratToReal3",level:2},{value:"function lessIntReal",id:"lang-rascal-tests-basic-Equality-lessIntReal",level:2},{value:"function lessRatReal",id:"lang-rascal-tests-basic-Equality-lessRatReal",level:2},{value:"function differentElements",id:"lang-rascal-tests-basic-Equality-differentElements",level:2},{value:"function differentElement2",id:"lang-rascal-tests-basic-Equality-differentElement2",level:2},{value:"function differentElement3",id:"lang-rascal-tests-basic-Equality-differentElement3",level:2},{value:"function differentKeys1",id:"lang-rascal-tests-basic-Equality-differentKeys1",level:2},{value:"function differentKeys2",id:"lang-rascal-tests-basic-Equality-differentKeys2",level:2},{value:"function differentKeys3",id:"lang-rascal-tests-basic-Equality-differentKeys3",level:2},{value:"function eqImpliesEquals",id:"lang-rascal-tests-basic-Equality-eqImpliesEquals",level:2},{value:"function nonComparabilityImpliesNonEq",id:"lang-rascal-tests-basic-Equality-nonComparabilityImpliesNonEq",level:2},{value:"function comparabilityImpliesEquivalence",id:"lang-rascal-tests-basic-Equality-comparabilityImpliesEquivalence",level:2}],o={toc:c};function m(t){let{components:a,...e}=t;return(0,i.kt)("wrapper",(0,l.Z)({},o,e,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"import lang::rascal::tests::basic::Equality;")),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-canonicalTypes"},"function canonicalTypes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool canonicalTypes(&T x, &Y y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-canonicalTypesRegression1"},"function canonicalTypesRegression1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool canonicalTypesRegression1()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-canonicalTypesRegression2"},"function canonicalTypesRegression2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool canonicalTypesRegression2()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-canonicalTypesRegression3"},"function canonicalTypesRegression3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool canonicalTypesRegression3()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-reflexEq1"},"function reflexEq1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool reflexEq1(value x)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-transEq1"},"function transEq1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool transEq1(value x, value y, value z)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-commutativeEq1"},"function commutativeEq1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool commutativeEq1(value x, value y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-reflexEq2"},"function reflexEq2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool reflexEq2(value x)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-transEq2"},"function transEq2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool transEq2(value x, value y, value z)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-commutativeEq2"},"function commutativeEq2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool commutativeEq2(value x, value y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-allEqualValuesMatch"},"function allEqualValuesMatch"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool allEqualValuesMatch(node a, node b)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-noMatchImpliesUnequal"},"function noMatchImpliesUnequal"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool noMatchImpliesUnequal(node a, node b)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-matchIsEqualityModuloKeywordFields"},"function matchIsEqualityModuloKeywordFields"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool matchIsEqualityModuloKeywordFields(node x, node y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-transEqSame"},"function transEqSame"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool transEqSame(&Same x, &Same y, &Same z)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-commutativeEqSame"},"function commutativeEqSame"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool commutativeEqSame(&Same x, &Same y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-reflexLTE"},"function reflexLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool reflexLTE(value x)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-antiSymmetricLTE"},"function antiSymmetricLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool antiSymmetricLTE(value x, value y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-transLTE"},"function transLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool transLTE(value x, value y, value z)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-antiSymmetricLTESame"},"function antiSymmetricLTESame"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool antiSymmetricLTESame(&Same <: node x , &Same <: node y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-transLTESame"},"function transLTESame"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool transLTESame(&Same <: node x, &Same <: node y, &Same <: node z)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-antiSymmetricLTEWithKeywordParamsLt1"},"function antiSymmetricLTEWithKeywordParamsLt1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool antiSymmetricLTEWithKeywordParamsLt1()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-antiSymmetricLTEWithKeywordParamsLt2"},"function antiSymmetricLTEWithKeywordParamsLt2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool antiSymmetricLTEWithKeywordParamsLt2()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-antiSymmetricLTEWithKeywordParamsEq"},"function antiSymmetricLTEWithKeywordParamsEq"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool antiSymmetricLTEWithKeywordParamsEq()"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-numTotalLTE1"},"function numTotalLTE1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool numTotalLTE1(num x, num y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-numAntiSymmetricLTE"},"function numAntiSymmetricLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool numAntiSymmetricLTE(num x, num y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-numTransLTE"},"function numTransLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool numTransLTE(num x, num y, num z)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-numValueReflex"},"function numValueReflex"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool numValueReflex(num x)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-intTotalLTE"},"function intTotalLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool intTotalLTE(int x, int y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-intAntiSymmetricLTE"},"function intAntiSymmetricLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool intAntiSymmetricLTE(int x, int y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-intTransLTE"},"function intTransLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool intTransLTE(int x, int y, int z)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-intValueReflex"},"function intValueReflex"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool intValueReflex(int x)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-realTotalLTE"},"function realTotalLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool realTotalLTE(real x, real y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-realAntiSymmetricLTE"},"function realAntiSymmetricLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool realAntiSymmetricLTE(real x, real y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-realTransLTE"},"function realTransLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool realTransLTE(real x, real y, real z)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-realValueReflex"},"function realValueReflex"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool realValueReflex(real x)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-ratTotalLTE"},"function ratTotalLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool ratTotalLTE(rat x, rat y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-ratAntiSymmetricLTE"},"function ratAntiSymmetricLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool ratAntiSymmetricLTE(rat x, rat y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-ratTransLTE"},"function ratTransLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool ratTransLTE(rat x, rat y, rat z)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-ratValueReflex"},"function ratValueReflex"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool ratValueReflex(rat x)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-numTotalLTE2"},"function numTotalLTE2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool numTotalLTE2(str x, str y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-strAntiSymmetricLTE"},"function strAntiSymmetricLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool strAntiSymmetricLTE(str x, str y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-strTransLTE"},"function strTransLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool strTransLTE(str x, str y, str z)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-strValueReflex"},"function strValueReflex"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool strValueReflex(rat x)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-listReflexLTE"},"function listReflexLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool listReflexLTE(list[value] x)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-listAntiSymmetricLTE"},"function listAntiSymmetricLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool listAntiSymmetricLTE(list[value] x, list[value] y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-listTransLTE"},"function listTransLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool listTransLTE(list[value] x, list[value] y, list[value] z)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-subsetOrdering1"},"function subsetOrdering1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool subsetOrdering1(set[value] x, set[value] y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-subsetOrdering2"},"function subsetOrdering2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool subsetOrdering2(set[value] x, set[value] y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-setReflexLTE1"},"function setReflexLTE1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool setReflexLTE1(set[value] x)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-setAntiSymmetricLTE1"},"function setAntiSymmetricLTE1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool setAntiSymmetricLTE1(set[value] x, set[value] y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-setTransLTE1"},"function setTransLTE1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool setTransLTE1(set[value] x, set[value] y, set[value] z)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-submapOrdering1"},"function submapOrdering1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool submapOrdering1(map[value,value] x, map[value,value] y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-submapOrdering2"},"function submapOrdering2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool submapOrdering2(map[value,value]x, map[value,value] y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-setReflexLTE2"},"function setReflexLTE2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool setReflexLTE2(map[value,value] x)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-setAntiSymmetricLTE2"},"function setAntiSymmetricLTE2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool setAntiSymmetricLTE2(map[value,value] x, map[value,value] y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-setTransLTE2"},"function setTransLTE2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool setTransLTE2(map[value,value] x, map[value,value] y, map[value,value] z)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-locReflexLTE"},"function locReflexLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool locReflexLTE(loc x)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-locAntiSymmetricLTE"},"function locAntiSymmetricLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool locAntiSymmetricLTE(loc x, loc y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-locTransLTE"},"function locTransLTE"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool locTransLTE(loc x, loc y, loc z)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-intToReal1"},"function intToReal1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool intToReal1(int i)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-ratToReal1"},"function ratToReal1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool ratToReal1(rat r)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-intToReal2"},"function intToReal2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool intToReal2(int i)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-ratToReal2"},"function ratToReal2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool ratToReal2(rat r)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-intToReal3"},"function intToReal3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool intToReal3(int i)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-ratToReal3"},"function ratToReal3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool ratToReal3(rat r)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-lessIntReal"},"function lessIntReal"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool lessIntReal(int i)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-lessRatReal"},"function lessRatReal"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool lessRatReal(int i)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-differentElements"},"function differentElements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool differentElements(int i)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-differentElement2"},"function differentElement2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool differentElement2(int i, rat r)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-differentElement3"},"function differentElement3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool differentElement3(int i, real r)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-differentKeys1"},"function differentKeys1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool differentKeys1(int i,real r)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-differentKeys2"},"function differentKeys2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool differentKeys2(int i,rat r)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-differentKeys3"},"function differentKeys3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool differentKeys3(int i)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-eqImpliesEquals"},"function eqImpliesEquals"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool eqImpliesEquals(value x, value y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-nonComparabilityImpliesNonEq"},"function nonComparabilityImpliesNonEq"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool nonComparabilityImpliesNonEq(value x, value y)"))),(0,i.kt)("h2",{id:"lang-rascal-tests-basic-Equality-comparabilityImpliesEquivalence"},"function comparabilityImpliesEquivalence"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test bool comparabilityImpliesEquivalence(value x, value y)"))))}m.isMDXComponent=!0}}]);