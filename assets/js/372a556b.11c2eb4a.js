"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[74826],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=l,k=c["".concat(i,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(k,s(s({ref:t},u),{},{components:n})):a.createElement(k,s({ref:t},u))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,s=new Array(r);s[0]=c;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:l,s[1]=o;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},34132:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(83117),l=(n(67294),n(3905));const r={title:"Node",keywords:["(",")"]},s=void 0,o={unversionedId:"Rascal/Expressions/Values/Node/index",id:"Rascal/Expressions/Values/Node/index",title:"Node",description:"Synopsis",source:"@site/docs/Rascal/Expressions/Values/Node/index.md",sourceDirName:"Rascal/Expressions/Values/Node",slug:"/Rascal/Expressions/Values/Node/",permalink:"/docs/Rascal/Expressions/Values/Node/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascal/Expressions/Values/Node/index.md",tags:[],version:"current",frontMatter:{title:"Node",keywords:["(",")"]},sidebar:"tutorialSidebar",previous:{title:"Map notin",permalink:"/docs/Rascal/Expressions/Values/Map/notin/"},next:{title:"Node Equal",permalink:"/docs/Rascal/Expressions/Values/Node/Equal/"}},i={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4},{value:"Pitfalls",id:"pitfalls",level:4}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"synopsis"},"Synopsis"),(0,l.kt)("p",null,"Node values."),(0,l.kt)("h4",{id:"syntax"},"Syntax"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Exp<sub>0</sub> ( Exp<sub>1</sub>, Exp<sub>2</sub>, ..., FieldName<sub>1</sub> = Expr~1, _FieldName<sub>2</sub> = Expr~2, ... )")),(0,l.kt)("h4",{id:"types"},"Types"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"Exp<sub>0</sub>")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"Exp<sub>1</sub>")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"Exp<sub>2</sub>")),(0,l.kt)("th",{parentName:"tr",align:null},"..."),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"Exp<sub>0</sub> ( Exp<sub>1</sub>, Exp<sub>2</sub>, ... )")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"str")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"value")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"value")),(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"node"))))),(0,l.kt)("h4",{id:"description"},"Description"),(0,l.kt)("p",null,"Values of type ",(0,l.kt)("inlineCode",{parentName:"p"},"node")," represent untyped trees and are constructed as follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the string value of ",(0,l.kt)("em",{parentName:"li"},"Exp",(0,l.kt)("sub",null,"0"))," is the node name;"),(0,l.kt)("li",{parentName:"ul"},"zero or more expressions of type ",(0,l.kt)("inlineCode",{parentName:"li"},"value")," are the node\\'s children."),(0,l.kt)("li",{parentName:"ul"},"optionally, unordered named fields can be added as well.")),(0,l.kt)("p",null,"The following are provided for nodes:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Node))"),(0,l.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Node/Equal))"),(0,l.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Node/GreaterThan))"),(0,l.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Node/GreaterThanOrEqual))"),(0,l.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Node/LessThan))"),(0,l.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Node/LessThanOrEqual))"),(0,l.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Node/NotEqual))"),(0,l.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Node/Slice))"),(0,l.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Node/Subscription))")),(0,l.kt)("h4",{id:"examples"},"Examples"),(0,l.kt)("p",null,'A node with name "my_node" and three arguments:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>"my_node"(1, true, "abc");\nnode: "my_node"(1,true,"abc")\n')),(0,l.kt)("p",null,"A nested node structure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>"my_node1"(1, "my_node2"(3.5, ["a", "b", "c"]), true);\nnode: "my_node1"(\n  1,\n  "my_node2"(\n    3.5,\n    ["a","b","c"]),\n  true)\n')),(0,l.kt)("p",null,"A node with named fields:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>"my_node2"(1,2,size=2,age=24);\nnode: "my_node2"(1,2,\n  size=2,\n  age=24)\n')),(0,l.kt)("h4",{id:"benefits"},"Benefits"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"nodes are untyped and can be used to quickly import untyped data into Rascal"),(0,l.kt)("li",{parentName:"ul"},"pattern matching on nodes is quite expressive")),(0,l.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the lack of types at run-time makes pattern matching on node possibly inaccurate (you might match more than you think)")))}d.isMDXComponent=!0}}]);