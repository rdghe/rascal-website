"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[59384],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,o=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=u(n),m=s,f=d["".concat(o,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,l=new Array(i);l[0]=d;var a={};for(var o in t)hasOwnProperty.call(t,o)&&(a[o]=t[o]);a.originalType=e,a.mdxType="string"==typeof e?e:s,l[1]=a;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},39865:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>u});var r=n(83117),s=(n(67294),n(3905));const i={title:"module util::Test"},l=void 0,a={unversionedId:"Library/util/Test",id:"Library/util/Test",title:"module util::Test",description:"Usage",source:"@site/docs/Library/util/Test.md",sourceDirName:"Library/util",slug:"/Library/util/Test",permalink:"/docs/Library/util/Test",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/util/Test.md",tags:[],version:"current",frontMatter:{title:"module util::Test"},sidebar:"tutorialSidebar",previous:{title:"module util::SystemAPI",permalink:"/docs/Library/util/SystemAPI"},next:{title:"module util::UUID",permalink:"/docs/Library/util/UUID"}},o={},u=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"data TestResult",id:"util-Test-TestResult",level:2},{value:"function runTests",id:"util-Test-runTests",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Description",id:"description-1",level:4},{value:"function testTest",id:"util-Test-testTest",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h4",{id:"usage"},"Usage"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"import util::Test;")),(0,s.kt)("h4",{id:"synopsis"},"Synopsis"),(0,s.kt)("p",null,"Provides occasionally useful access to Rascal's testing framework"),(0,s.kt)("h4",{id:"description"},"Description"),(0,s.kt)("p",null,"Rascal's test framework can normally be accessed via UI and commandline interfaces:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Running as JUnit tests in IDEs"),(0,s.kt)("li",{parentName:"ul"},"Running as JUnit tests from Maven"),(0,s.kt)("li",{parentName:"ul"},"Executing the ",(0,s.kt)("inlineCode",{parentName:"li"},":test")," command in a Rascal REPL")),(0,s.kt)("p",null,"This module provides a programmatic interface, and reports the test results\nas values. It can be handy to construct more UI components which interact\nwith tests, but also to query larger volumes of failing tests. "),(0,s.kt)("h2",{id:"util-Test-TestResult"},"data TestResult"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rascal"},'data TestResult  \n     = \\testResult(str name, bool success, loc src, str message = "", list[value] exceptions = [])\n     ;\n')),(0,s.kt)("h2",{id:"util-Test-runTests"},"function runTests"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"list[TestResult] runTests(str moduleName)"))),(0,s.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,s.kt)("p",null,"Run all tests for the given module name"),(0,s.kt)("h4",{id:"description-1"},"Description"),(0,s.kt)("p",null,"This function works under the assumption that the named module is available in the current execution environment."),(0,s.kt)("h2",{id:"util-Test-testTest"},"function testTest"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"test bool testTest()"))))}p.isMDXComponent=!0}}]);