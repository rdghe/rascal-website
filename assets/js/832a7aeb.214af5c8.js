"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[95349],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),f=r,m=d["".concat(i,".").concat(f)]||d[f]||u[f]||o;return n?a.createElement(m,s(s({ref:t},p),{},{components:n})):a.createElement(m,s({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},31887:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(83117),r=(n(67294),n(3905));const o={title:"Code Models"},s=void 0,l={unversionedId:"RascalConcepts/CodeModels/index",id:"RascalConcepts/CodeModels/index",title:"Code Models",description:"Synopsis",source:"@site/docs/RascalConcepts/CodeModels/index.md",sourceDirName:"RascalConcepts/CodeModels",slug:"/RascalConcepts/CodeModels/",permalink:"/docs/RascalConcepts/CodeModels/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/RascalConcepts/CodeModels/index.md",tags:[],version:"current",frontMatter:{title:"Code Models"},sidebar:"tutorialSidebar",previous:{title:"Case Distinction",permalink:"/docs/RascalConcepts/CaseDistinction/"},next:{title:"Comprehensions",permalink:"/docs/RascalConcepts/Comprehensions/"}},i={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Code models are abstract representations of source code"),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"You can use any of Rascal's ",(0,r.kt)("a",{parentName:"p",href:"../../Rascal/Expressions/Values"},"Values")," to represent facts about source code.\nFor example, ",(0,r.kt)("a",{parentName:"p",href:"../../Rascal/Declarations/AlgebraicDataType"},"Algebraic Data Types")," can be used to define\nabstract syntax trees and ",(0,r.kt)("a",{parentName:"p",href:"../../Rascal/Expressions/Values/Relation"},"Relation")," are used to represent call graphs.\nWe consistently use ",(0,r.kt)("a",{parentName:"p",href:"../../Rascal/Expressions/Values/Location"},"Locations")," to refer to source code artifacts,\neither physically (",(0,r.kt)("inlineCode",{parentName:"p"},"|file:///tmp/HelloWorld.java|"),") or logically (",(0,r.kt)("inlineCode",{parentName:"p"},"|java+class://java/lang/Object|"),")."),(0,r.kt)("p",null,"Specifically we have standardized a set of models to represent source code which are ready\nfor computing metrics: #/Libraries#analysis-m3","[M3]",". This M3 model consists of: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"an open (extensible) set of ",(0,r.kt)("a",{parentName:"li",href:"../../Rascal/Expressions/Values/Relation"},"Relations")," between source code artifacts."),(0,r.kt)("li",{parentName:"ul"},"a number of extensible ",(0,r.kt)("a",{parentName:"li",href:"../../Rascal/Declarations/AlgebraicDataType"},"Algebraic Data Types"),"\nfor representing abstract syntax trees. ")),(0,r.kt)("p",null,"The core language independent model can be found here: ","[analysis::m3][m3]","(/docs/Library/analysis/m3/)."),(0,r.kt)("p",null,"Extensions for representing facts about specific languages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[lang::java::m3][m3]","(/docs/Library/lang/java/m3/).")))}u.isMDXComponent=!0}}]);