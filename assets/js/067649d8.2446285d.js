"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[33009],{3905:(e,a,r)=>{r.d(a,{Zo:()=>u,kt:()=>p});var t=r(67294);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function l(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?l(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function s(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var m=t.createContext({}),o=function(e){var a=t.useContext(m),r=a;return e&&(r="function"==typeof e?e(a):i(i({},a),e)),r},u=function(e){var a=o(e.components);return t.createElement(m.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},g=t.forwardRef((function(e,a){var r=e.components,n=e.mdxType,l=e.originalType,m=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),g=o(r),p=n,d=g["".concat(m,".").concat(p)]||g[p]||c[p]||l;return r?t.createElement(d,i(i({ref:a},u),{},{components:r})):t.createElement(d,i({ref:a},u))}));function p(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=g;var s={};for(var m in a)hasOwnProperty.call(a,m)&&(s[m]=a[m]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var o=2;o<l;o++)i[o]=r[o];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},3e3:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>m,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var t=r(83117),n=(r(67294),r(3905));const l={title:"module lang::rascal::grammar::ParserGenerator"},i=void 0,s={unversionedId:"Library/lang/rascal/grammar/ParserGenerator",id:"Library/lang/rascal/grammar/ParserGenerator",title:"module lang::rascal::grammar::ParserGenerator",description:"Usage",source:"@site/docs/Library/lang/rascal/grammar/ParserGenerator.md",sourceDirName:"Library/lang/rascal/grammar",slug:"/Library/lang/rascal/grammar/ParserGenerator",permalink:"/docs/Library/lang/rascal/grammar/ParserGenerator",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Library/lang/rascal/grammar/ParserGenerator.md",tags:[],version:"current",frontMatter:{title:"module lang::rascal::grammar::ParserGenerator"},sidebar:"tutorialSidebar",previous:{title:"module lang::rascal::grammar::Lookahead",permalink:"/docs/Library/lang/rascal/grammar/Lookahead"},next:{title:"module lang::rascal::grammar::SyntaxTreeGenerator",permalink:"/docs/Library/lang/rascal/grammar/SyntaxTreeGenerator"}},m={},o=[{value:"Usage",id:"usage",level:4},{value:"alias Items",id:"lang-rascal-grammar-ParserGenerator-Items",level:2},{value:"data Symbol",id:"lang-rascal-grammar-ParserGenerator-Symbol",level:2},{value:"function getParserMethodName",id:"lang-rascal-grammar-ParserGenerator-getParserMethodName",level:2},{value:"function newGenerate",id:"lang-rascal-grammar-ParserGenerator-newGenerate",level:2},{value:"function computeDontNests",id:"lang-rascal-grammar-ParserGenerator-computeDontNests",level:2},{value:"function getItemId",id:"lang-rascal-grammar-ParserGenerator-getItemId",level:2},{value:"function getType",id:"lang-rascal-grammar-ParserGenerator-getType",level:2},{value:"function generateNewItems",id:"lang-rascal-grammar-ParserGenerator-generateNewItems",level:2},{value:"function split",id:"lang-rascal-grammar-ParserGenerator-split",level:2},{value:"function isNonterminal",id:"lang-rascal-grammar-ParserGenerator-isNonterminal",level:2},{value:"function generateParseMethod",id:"lang-rascal-grammar-ParserGenerator-generateParseMethod",level:2},{value:"function generateClassConditional",id:"lang-rascal-grammar-ParserGenerator-generateClassConditional",level:2},{value:"function generateRangeConditional",id:"lang-rascal-grammar-ParserGenerator-generateRangeConditional",level:2},{value:"function generateSeparatorExpects",id:"lang-rascal-grammar-ParserGenerator-generateSeparatorExpects",level:2},{value:"function generateSequenceExpects",id:"lang-rascal-grammar-ParserGenerator-generateSequenceExpects",level:2},{value:"function generateAltExpects",id:"lang-rascal-grammar-ParserGenerator-generateAltExpects",level:2},{value:"function literals2ints",id:"lang-rascal-grammar-ParserGenerator-literals2ints",level:2},{value:"function ciliterals2ints",id:"lang-rascal-grammar-ParserGenerator-ciliterals2ints",level:2},{value:"function sym2newitem",id:"lang-rascal-grammar-ParserGenerator-sym2newitem",level:2},{value:"function generateCharClassArrays",id:"lang-rascal-grammar-ParserGenerator-generateCharClassArrays",level:2},{value:"function esc",id:"lang-rascal-grammar-ParserGenerator-esc",level:2},{value:"function escId",id:"lang-rascal-grammar-ParserGenerator-escId",level:2},{value:"function sym2name",id:"lang-rascal-grammar-ParserGenerator-sym2name",level:2},{value:"function value2id",id:"lang-rascal-grammar-ParserGenerator-value2id",level:2},{value:"function uu",id:"lang-rascal-grammar-ParserGenerator-uu",level:2},{value:"function v2i",id:"lang-rascal-grammar-ParserGenerator-v2i",level:2},{value:"function makeUnique",id:"lang-rascal-grammar-ParserGenerator-makeUnique",level:2}],u={toc:o};function c(e){let{components:a,...r}=e;return(0,n.kt)("wrapper",(0,t.Z)({},u,r,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"usage"},"Usage"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"import lang::rascal::grammar::ParserGenerator;")),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-Items"},"alias Items"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"map[Symbol,map[Item item, tuple[str new, int itemId] new]]"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-Symbol"},"data Symbol"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal"},'data Symbol (int id = 0, str prefix = "")\n')),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-getParserMethodName"},"function getParserMethodName"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str getParserMethodName(Sym sym)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str getParserMethodName(label(_,Symbol s))")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str getParserMethodName(conditional(Symbol s, _))")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"default str getParserMethodName(Symbol s)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-newGenerate"},"function newGenerate"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str newGenerate(str package, str name, Grammar gr)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-computeDontNests"},"function computeDontNests"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"rel[int,int] computeDontNests(Items items, Grammar grammar, Grammar uniqueGrammar)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-getItemId"},"function getItemId"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"int getItemId(Symbol s, int pos, prod(label(str l, Symbol _),list[Symbol] _, set[Attr] _))"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-getType"},"function getType"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Symbol getType(Production p)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Symbol getType(label(str _, Symbol s))")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Symbol getType(conditional(Symbol s, set[Condition] cs))")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"default Symbol getType(Symbol s)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-generateNewItems"},"function generateNewItems"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"map[Symbol,map[Item,tuple[str new, int itemId]]] generateNewItems(Grammar g)"))),(0,n.kt)("p",null,"This function generates Java code to allocate a new item for each position in the grammar.\nWe first collect these in a map, such that we can generate static fields. It's a simple matter of caching\nconstants to improve run-time efficiency of the generated parser"),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-split"},"function split"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str split(str x)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-isNonterminal"},"function isNonterminal"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"bool isNonterminal(Symbol s)"))),(0,n.kt)("p",null,"this function selects all symbols for which a parse method should be generated"),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-generateParseMethod"},"function generateParseMethod"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str generateParseMethod(Items _, Production p)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-generateClassConditional"},"function generateClassConditional"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str generateClassConditional(set[Symbol] classes)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-generateRangeConditional"},"function generateRangeConditional"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str generateRangeConditional(CharRange r)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-generateSeparatorExpects"},"function generateSeparatorExpects"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str generateSeparatorExpects(Grammar grammar, list[Symbol] seps)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-generateSequenceExpects"},"function generateSequenceExpects"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str generateSequenceExpects(Grammar grammar, list[Symbol] seps)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-generateAltExpects"},"function generateAltExpects"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str generateAltExpects(Grammar grammar, list[Symbol] seps)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-literals2ints"},"function literals2ints"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str literals2ints(list[Symbol] chars)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-ciliterals2ints"},"function ciliterals2ints"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str ciliterals2ints(list[Symbol] chars)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-sym2newitem"},"function sym2newitem"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"tuple[str new, int itemId] sym2newitem(Grammar grammar, Symbol sym, int dot)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-generateCharClassArrays"},"function generateCharClassArrays"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str generateCharClassArrays(list[CharRange] ranges)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-esc"},"function esc"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str esc(Symbol s)")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str esc(str s)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-escId"},"function escId"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str escId(str s)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-sym2name"},"function sym2name"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str sym2name(Symbol s)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-value2id"},"function value2id"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str value2id(value v)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-uu"},"function uu"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str uu(value s)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-v2i"},"function v2i"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"default str v2i(value v)"))),(0,n.kt)("h2",{id:"lang-rascal-grammar-ParserGenerator-makeUnique"},"function makeUnique"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Grammar makeUnique(Grammar gr)"))))}c.isMDXComponent=!0}}]);