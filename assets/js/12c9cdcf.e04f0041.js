"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[32540],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,f=d["".concat(i,".").concat(u)]||d[u]||m[u]||l;return n?a.createElement(f,s(s({ref:t},p),{},{components:n})):a.createElement(f,s({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<l;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},40676:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={title:"Commands",sidebar_position:3},s=void 0,o={unversionedId:"RascalShell/Commands/index",id:"RascalShell/Commands/index",title:"Commands",description:"Synopsis",source:"@site/docs/RascalShell/Commands/index.md",sourceDirName:"RascalShell/Commands",slug:"/RascalShell/Commands/",permalink:"/docs/RascalShell/Commands/",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Commands",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Command History",permalink:"/docs/RascalShell/History/"},next:{title:"Clear Command",permalink:"/docs/RascalShell/Commands/Clear/"}},i={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"RascalShell commands"),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"The RascalShell provides several built-in commands:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/RascalShell/Commands/Clear/"},"Clear")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/RascalShell/Commands/Edit/"},"Edit")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/RascalShell/Commands/Help/"},"Help")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/RascalShell/Commands/Quit/"},"Quit")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/RascalShell/Commands/Set/"},"Set")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/RascalShell/Commands/Test/"},"Test"))),(0,r.kt)("p",null,"Next to these commands, the shell accepts all toplevel module ",(0,r.kt)("a",{parentName:"p",href:"/docs/Rascal/Declarations/"},"Declarations"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/Rascal/Statements/"},"Statements")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/"},"Expressions"),"."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Here we just show some random shell commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>int a = 0; // statement\nint: 0\nrascal>int f(int i) = 2 * i; // function declaration\nint (int): function(|prompt:///|(0,21,<1,0>,<1,21>))\nrascal>syntax Exp = Exp "+" Exp; // syntax declaration\nok\nrascal>f(2) * f(2) // expression\nint: 16\nrascal>:help // builtin command\nWelcome to the Rascal command shell.\n\nShell commands:\n:help                      Prints this message\n:quit or EOF               Quits the shell\n:set <option> <expression> Sets an option\ne.g. profiling    true/false\n     tracing      true/false\n     errors       true/false\n:edit <modulename>         Opens an editor for that module\n:test                      Runs all unit tests currently loaded\n\nExample rascal statements and declarations:\n1 + 1;                     Expressions simply print their output and (static) type\nint a;                     Declarations allocate a name in the current scope\na = 1;                     Assignments store a value in a (optionally previously declared) variable\nint a = 1;                 Declaration with initialization\nimport IO;                 Importing a module makes its public members available\nprintln("Hello World")     Function calling\n\nPlease read the manual for further information\nok\n')))}m.isMDXComponent=!0}}]);