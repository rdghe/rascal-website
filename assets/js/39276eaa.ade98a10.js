"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[25369],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(r),d=o,y=u["".concat(s,".").concat(d)]||u[d]||m[d]||l;return r?n.createElement(y,a(a({ref:t},c),{},{components:r})):n.createElement(y,a({ref:t},c))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var p=2;p<l;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},74298:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=r(83117),o=(r(67294),r(3905));const l={title:"NonWellformedType"},a=void 0,i={unversionedId:"CompileTimeErrors/NonWellformedType/index",id:"CompileTimeErrors/NonWellformedType/index",title:"NonWellformedType",description:"Synopsis",source:"@site/docs/CompileTimeErrors/NonWellformedType/index.md",sourceDirName:"CompileTimeErrors/NonWellformedType",slug:"/CompileTimeErrors/NonWellformedType/",permalink:"/docs/CompileTimeErrors/NonWellformedType/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/CompileTimeErrors/NonWellformedType/index.md",tags:[],version:"current",frontMatter:{title:"NonWellformedType"},sidebar:"tutorialSidebar",previous:{title:"NonVoidTypeRequired",permalink:"/docs/CompileTimeErrors/NonVoidTypeRequired/"},next:{title:"NotEnumerable",permalink:"/docs/CompileTimeErrors/NotEnumerable/"}},s={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Usage",id:"usage",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],c={toc:p};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"synopsis"},"Synopsis"),(0,o.kt)("p",null,"A type in a declaration is not wellformed."),(0,o.kt)("h4",{id:"syntax"},"Syntax"),(0,o.kt)("h4",{id:"types"},"Types"),(0,o.kt)("h4",{id:"function"},"Function"),(0,o.kt)("h4",{id:"usage"},"Usage"),(0,o.kt)("h4",{id:"description"},"Description"),(0,o.kt)("p",null,"Types should respect some structural rules and this error signals a violation of these rules.\nExamples of violations are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a non-parametric type has parameters."),(0,o.kt)("li",{parentName:"ul"},"a parametric type has an incorrect number of parameters.")),(0,o.kt)("p",null,"Remedy: correct the type."),(0,o.kt)("h4",{id:"examples"},"Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>bool[int] x;\nok\nrascal>list[int,str] l;\n|prompt:///|(0,4,<1,0>,<1,4>): Non-well-formed type: list should have exactly one type argument, like list[value]\nAdvice: |http://tutor.rascal-mpl.org/Errors/Static/NonWellformedType/NonWellformedType.html|\nok\nrascal>map[str, int, int]  m;\n|prompt:///|(0,3,<1,0>,<1,3>): Non-well-formed type: map should have exactly two type arguments, like map[value,value]\nAdvice: |http://tutor.rascal-mpl.org/Errors/Static/NonWellformedType/NonWellformedType.html|\nok\nrascal>set[int,str] s;\n|prompt:///|(0,3,<1,0>,<1,3>): Non-well-formed type: set should have exactly one type argument, like set[value]\nAdvice: |http://tutor.rascal-mpl.org/Errors/Static/NonWellformedType/NonWellformedType.html|\nok\n")),(0,o.kt)("h4",{id:"benefits"},"Benefits"))}m.isMDXComponent=!0}}]);