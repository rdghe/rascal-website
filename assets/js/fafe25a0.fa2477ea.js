"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[87618],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,g=d["".concat(o,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(g,s(s({ref:t},u),{},{components:n})):a.createElement(g,s({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,s[1]=l;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},68464:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(83117),i=(n(67294),n(3905));const r={title:"Pico"},s=void 0,l={unversionedId:"Recipes/Languages/Pico/index",id:"Recipes/Languages/Pico/index",title:"Pico",description:"Synopsis",source:"@site/docs/Recipes/Languages/Pico/index.md",sourceDirName:"Recipes/Languages/Pico",slug:"/Recipes/Languages/Pico/",permalink:"/docs/Recipes/Languages/Pico/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Recipes/Languages/Pico/index.md",tags:[],version:"current",frontMatter:{title:"Pico"},sidebar:"tutorialSidebar",previous:{title:"Test",permalink:"/docs/Recipes/Languages/Lisra/Test/"},next:{title:"Abstract",permalink:"/docs/Recipes/Languages/Pico/Abstract/"}},o={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Usage",id:"usage",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h4",{id:"synopsis"},"Synopsis"),(0,i.kt)("p",null,"The classical toy language, including a specialized IDE."),(0,i.kt)("h4",{id:"syntax"},"Syntax"),(0,i.kt)("h4",{id:"types"},"Types"),(0,i.kt)("h4",{id:"function"},"Function"),(0,i.kt)("h4",{id:"usage"},"Usage"),(0,i.kt)("h4",{id:"description"},"Description"),(0,i.kt)("p",null,"Pico is a toy language that has been used as example over the years in many projects and disguishes,\nPico has a single purpose in life: being so simple that specifications of every possible language aspect are so simple that they fit on a few pages. It can be summarized as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"There are two types: natural numbers and strings.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Variables have to be declared.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Statements are assignment, if-then-else and while-do.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Expressions may contain naturals, strings, variables, addition (",(0,i.kt)("inlineCode",{parentName:"p"},"+"),"), subtraction (",(0,i.kt)("inlineCode",{parentName:"p"},"-"),") and concatenation (",(0,i.kt)("inlineCode",{parentName:"p"},"||"),").")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The operators ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"-")," have operands of type natural and their result is natural.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The operator ",(0,i.kt)("inlineCode",{parentName:"p"},"||")," has operands of type string and its results is also of type string.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Tests in if-then-else statement and while-statement should be of type natural."))),(0,i.kt)("p",null,"The following aspects of the Pico language will be discussed:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"((Recipes:Languages/Pico))"),(0,i.kt)("li",{parentName:"ul"},"((Recipes:Languages/Pico/Abstract))"),(0,i.kt)("li",{parentName:"ul"},"((Recipes:Languages/Pico/Assembly))"),(0,i.kt)("li",{parentName:"ul"},"((Recipes:Languages/Pico/Compile))"),(0,i.kt)("li",{parentName:"ul"},"((Recipes:Languages/Pico/ControlFlow))"),(0,i.kt)("li",{parentName:"ul"},"((Recipes:Languages/Pico/Evaluate))"),(0,i.kt)("li",{parentName:"ul"},"((Recipes:Languages/Pico/IDE))"),(0,i.kt)("li",{parentName:"ul"},"((Recipes:Languages/Pico/Load))"),(0,i.kt)("li",{parentName:"ul"},"((Recipes:Languages/Pico/Syntax))"),(0,i.kt)("li",{parentName:"ul"},"((Recipes:Languages/Pico/Typecheck))"),(0,i.kt)("li",{parentName:"ul"},"((Recipes:Languages/Pico/Uninit))"),(0,i.kt)("li",{parentName:"ul"},"((Recipes:Languages/Pico/UseDef))"),(0,i.kt)("li",{parentName:"ul"},"((Recipes:Languages/Pico/Visualize))")),(0,i.kt)("h4",{id:"examples"},"Examples"),(0,i.kt)("p",null,"Here is a -- not so simple -- Pico program that computes the factorial function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rascal"},"begin declare input : natural, // <1>\n              output : natural,           \n              repnr : natural,\n              rep : natural;\n      input := 14;\n      output := 1;\n      while input - 1 do // <2>\n          rep := output;\n          repnr := input;\n          while repnr - 1 do\n             output := output + rep;\n             repnr := repnr - 1\n          od;\n          input := input - 1\n      od\nend\n")),(0,i.kt)("p",null,"Notes:"),(0,i.kt)("p",null,"<1> Pico programs do not have input/output statements, so we use variables for that purpose.\n<2> Pico has no multiplication operator so we have to simulate it with repeated addition (yes, simplicity comes at a price!)."),(0,i.kt)("h4",{id:"benefits"},"Benefits"))}c.isMDXComponent=!0}}]);