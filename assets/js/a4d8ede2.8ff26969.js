"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[11781],{3905:(t,e,a)=>{a.d(e,{Zo:()=>s,kt:()=>c});var n=a(67294);function l(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){l(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,l=function(t,e){if(null==t)return{};var a,n,l={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(l[a]=t[a]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(l[a]=t[a])}return l}var u=n.createContext({}),m=function(t){var e=n.useContext(u),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},s=function(t){var e=m(t.components);return n.createElement(u.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var a=t.components,l=t.mdxType,r=t.originalType,u=t.parentName,s=i(t,["components","mdxType","originalType","parentName"]),d=m(a),c=l,M=d["".concat(u,".").concat(c)]||d[c]||p[c]||r;return a?n.createElement(M,o(o({ref:e},s),{},{components:a})):n.createElement(M,o({ref:e},s))}));function c(t,e){var a=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=a.length,o=new Array(r);o[0]=d;var i={};for(var u in e)hasOwnProperty.call(e,u)&&(i[u]=e[u]);i.originalType=t,i.mdxType="string"==typeof t?t:l,o[1]=i;for(var m=2;m<r;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},57026:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>m});var n=a(83117),l=(a(67294),a(3905));const r={title:"lang::rascal::mutation::ModuleMutator"},o=void 0,i={unversionedId:"Library/lang/rascal/mutation/ModuleMutator",id:"Library/lang/rascal/mutation/ModuleMutator",title:"lang::rascal::mutation::ModuleMutator",description:"Usage",source:"@site/docs/Library/lang/rascal/mutation/ModuleMutator.md",sourceDirName:"Library/lang/rascal/mutation",slug:"/Library/lang/rascal/mutation/ModuleMutator",permalink:"/docs/Library/lang/rascal/mutation/ModuleMutator",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/lang/rascal/mutation/ModuleMutator.md",tags:[],version:"current",frontMatter:{title:"lang::rascal::mutation::ModuleMutator"},sidebar:"tutorialSidebar",previous:{title:"lang::rascal::mutation",permalink:"/docs/Library/lang/rascal/mutation/"},next:{title:"lang::rascal::scaffold",permalink:"/docs/Library/lang/rascal/scaffold/"}},u={},m=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"function mutate",id:"lang-rascal-mutation-ModuleMutator-mutate",level:2},{value:"function muOperPatt",id:"lang-rascal-mutation-ModuleMutator-muOperPatt",level:2},{value:"function muOperStm",id:"lang-rascal-mutation-ModuleMutator-muOperStm",level:2},{value:"function mutationOp",id:"lang-rascal-mutation-ModuleMutator-mutationOp",level:2},{value:"function make",id:"lang-rascal-mutation-ModuleMutator-make",level:2},{value:"function rename",id:"lang-rascal-mutation-ModuleMutator-rename",level:2},{value:"function getModuleName",id:"lang-rascal-mutation-ModuleMutator-getModuleName",level:2},{value:"function renameTest1",id:"lang-rascal-mutation-ModuleMutator-renameTest1",level:2},{value:"function renameTest2",id:"lang-rascal-mutation-ModuleMutator-renameTest2",level:2},{value:"function renameTest3",id:"lang-rascal-mutation-ModuleMutator-renameTest3",level:2},{value:"function renameTest4",id:"lang-rascal-mutation-ModuleMutator-renameTest4",level:2}],s={toc:m};function p(t){let{components:e,...a}=t;return(0,l.kt)("wrapper",(0,n.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"usage"},"Usage"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import lang::rascal::mutation::ModuleMutator;")),(0,l.kt)("h4",{id:"synopsis"},"Synopsis"),(0,l.kt)("p",null,"Mutant Generator for Rascal modules"),(0,l.kt)("h4",{id:"description"},"Description"),(0,l.kt)("p",null,"  Rascal module. The use case is to test how good the tests are for such a module. The tests\nshould be able to find the bugs we introduce using the mutators."),(0,l.kt)("p",null,"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal"},"import lang::rascal::mutation::ModuleMutator;\nmutate(|project://rascal/src/org/rascalmpl/library/lang/rascal/format/Grammar.rsc|, mutations=5)\n")),(0,l.kt)("h2",{id:"lang-rascal-mutation-ModuleMutator-mutate"},"function mutate"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'list[str] mutate(loc input, int mutations = 5, str folder="mutants", str prefix="")')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'list[Module] mutate(Module input, int mutations = 5, str prefix="", str parentMod="")'))),(0,l.kt)("h2",{id:"lang-rascal-mutation-ModuleMutator-muOperPatt"},"function muOperPatt"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tuple[bool,PatternWithAction] muOperPatt(0, (PatternWithAction) `<Pattern p> =\\> <Replacement _>`)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tuple[bool,PatternWithAction] muOperPatt(1, (PatternWithAction) `<Pattern p> : <Statement _>`)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"default tuple[bool,PatternWithAction] muOperPatt(int opId, PatternWithAction pa)"))),(0,l.kt)("h2",{id:"lang-rascal-mutation-ModuleMutator-muOperStm"},"function muOperStm"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'tuple[bool,Statement] muOperStm(2, (Statement) `if (<{Expression ","}+ cond>) <Statement s>`)')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'tuple[bool,Statement] muOperStm(3, (Statement) `if (<{Expression ","}+ cond>) <Statement s> else <Statement t>`)')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'tuple[bool,Statement] muOperStm(4, (Statement) `if (<{Expression ","}+ cond>) <Statement s> else <Statement t>`)')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'tuple[bool,Statement] muOperStm(5, (Statement) `while (<{Expression ","}+ cond>) <Statement s>`)')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'tuple[bool,Statement] muOperStm(6, (Statement) `for (<{Expression ","}+ cond>) <Statement s>`)')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"default tuple[bool,Statement] muOperStm(int opId, Statement stm)"))),(0,l.kt)("h2",{id:"lang-rascal-mutation-ModuleMutator-mutationOp"},"function mutationOp"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list[Module] mutationOp(int opId, Module input)"))),(0,l.kt)("h2",{id:"lang-rascal-mutation-ModuleMutator-make"},"function make"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'list[Module] make(Module input, int opId, str prefix="", str parentMod="")'))),(0,l.kt)("h2",{id:"lang-rascal-mutation-ModuleMutator-rename"},"function rename"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'Module rename(int c, str prefix, "", (Module) `<Tags t> module <{Name "::"}+ p> :: <Name last> <Import* i> <Body b>`)')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'Module rename(int c, str prefix, str parentMod, (Module) `<Tags t> module <{Name "::"}+ p> :: <Name last> <Import* i> <Body b>`)')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'Module rename(int c, str prefix, "", (Module) `<Tags t> module <Name last> <Import* i> <Body b>`)')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Module rename(int c, str prefix, str parentMod, (Module) `<Tags t> module <Name last> <Import* i> <Body b>`)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"default str rename(Module x)"))),(0,l.kt)("h2",{id:"lang-rascal-mutation-ModuleMutator-getModuleName"},"function getModuleName"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'str getModuleName((Module) `<Tags _> module <{Name "::"}+ _> :: <Name last> <Import* _> <Body _>`)')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str getModuleName((Module) `<Tags _> module <Name last> <Import* _> <Body _>`)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"default str getModuleName(Module x)"))),(0,l.kt)("h2",{id:"lang-rascal-mutation-ModuleMutator-renameTest1"},"function renameTest1"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool renameTest1()"))),(0,l.kt)("h2",{id:"lang-rascal-mutation-ModuleMutator-renameTest2"},"function renameTest2"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool renameTest2()"))),(0,l.kt)("h2",{id:"lang-rascal-mutation-ModuleMutator-renameTest3"},"function renameTest3"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool renameTest3()"))),(0,l.kt)("h2",{id:"lang-rascal-mutation-ModuleMutator-renameTest4"},"function renameTest4"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool renameTest4()"))))}p.isMDXComponent=!0}}]);