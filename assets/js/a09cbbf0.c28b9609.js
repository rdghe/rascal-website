"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[81828],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var l=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),c=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return l.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},u=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?l.createElement(h,o(o({ref:t},p),{},{components:n})):l.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,o[1]=r;for(var c=2;c<i;c++)o[c]=n[c];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5370:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var l=n(83117),a=(n(67294),n(3905));const i={title:"Hello"},o=void 0,r={unversionedId:"Recipes/Basic/Hello/index",id:"Recipes/Basic/Hello/index",title:"Hello",description:"Synopsis",source:"@site/docs/Recipes/Basic/Hello/index.md",sourceDirName:"Recipes/Basic/Hello",slug:"/Recipes/Basic/Hello/",permalink:"/docs/Recipes/Basic/Hello/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Recipes/Basic/Hello/index.md",tags:[],version:"current",frontMatter:{title:"Hello"},sidebar:"tutorialSidebar",previous:{title:"FizzBuzz",permalink:"/docs/Recipes/Basic/FizzBuzz/"},next:{title:"Quine",permalink:"/docs/Recipes/Basic/Quine/"}},s={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"<code>hello</code> on command line",id:"hello-on-command-line",level:2},{value:"<code>hello</code> as function",id:"hello-as-function",level:2},{value:"<code>hello</code> as module",id:"hello-as-module",level:2},{value:"Benefits",id:"benefits",level:4}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Variations on the ubiquitous ",(0,a.kt)("em",{parentName:"p"},"Hello World")," example."),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("h4",{id:"types"},"Types"),(0,a.kt)("h4",{id:"function"},"Function"),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("h2",{id:"hello-on-command-line"},(0,a.kt)("inlineCode",{parentName:"h2"},"hello")," on command line"),(0,a.kt)("p",null,"We demonstrate hello via an interactive session with the Rascal system. First we get the prompt ",(0,a.kt)("inlineCode",{parentName:"p"},"rascal>")," that shows that Rascal is ready for our input.\nNext, we import the library module ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO"},"IO")," since hello world requires printing. Rascal responds with the feedback ",(0,a.kt)("inlineCode",{parentName:"p"},"ok")," so we know that all went well. Finally, we call ",(0,a.kt)("inlineCode",{parentName:"p"},"println")," and proudly observe our first Rascal output!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>println("Hello world, this is my first Rascal program");\nprintln("Hello world, this is my first Rascal program");\nHello world, this is my first Rascal program\nok\n')),(0,a.kt)("h2",{id:"hello-as-function"},(0,a.kt)("inlineCode",{parentName:"h2"},"hello")," as function"),(0,a.kt)("p",null,"A slightly more audacious approach is to wrap the print statement in a function and call it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>void hello() {\n>>>>>>>   println("Hello world, this is my first Rascal program");\n>>>>>>>}\nvoid (): function(|prompt:///|(0,76,<1,0>,<3,1>))\n')),(0,a.kt)("p",null,"When you type in a command and continue it on a new line\nthe Rascal systems prompts you with ",(0,a.kt)("inlineCode",{parentName:"p"},">>>>>>>")," to\nindicate that more input is needed. Don't get scared by\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"void (): void hello();")," that you get back\nwhen typing in the hello function. The first\n",(0,a.kt)("inlineCode",{parentName:"p"},"void ()")," part says the result is a function that\nreturns nothing, and the second part\n",(0,a.kt)("inlineCode",{parentName:"p"},"void hello()")," summarizes its value\n(or would you prefer a hex dump?).\nFinally, we call the ",(0,a.kt)("inlineCode",{parentName:"p"},"hello")," function and enjoy its output."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>hello();\nhello();\nHello world, this is my first Rascal program\nok\n")),(0,a.kt)("h2",{id:"hello-as-module"},(0,a.kt)("inlineCode",{parentName:"h2"},"hello")," as module"),(0,a.kt)("p",null,"The summit of hello-engineering can be reached by placing all the above in a separate module:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},'\nmodule demo::basic::Hello\n\nimport IO;\n\nvoid hello() {\n   println("Hello world, this is my first Rascal program");\n}\n\n')),(0,a.kt)("p",null,"This module should be placed in ",(0,a.kt)("inlineCode",{parentName:"p"},"<project dir>/src/demo/basic/Hello.rsc"),"."),(0,a.kt)("p",null,"Using this Hello module is now simple:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import demo::basic::Hello;\nok\nrascal>hello();\nhello();\nHello world, this is my first Rascal program\nok\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"hello")," function is by default visible outside the ",(0,a.kt)("inlineCode",{parentName:"p"},"Hello")," module.\nWe could stress this by adding writing ",(0,a.kt)("inlineCode",{parentName:"p"},"public void hello() { ... }"),".\nRestricting visibility to the module itself can be achieved by adding the keyword ",(0,a.kt)("inlineCode",{parentName:"p"},"private"),"\nto the definition of ",(0,a.kt)("inlineCode",{parentName:"p"},"hello"),"."),(0,a.kt)("h4",{id:"benefits"},"Benefits"))}d.isMDXComponent=!0}}]);