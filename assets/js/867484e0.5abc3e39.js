"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[36925],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var s=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},i=Object.keys(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var a=s.createContext({}),u=function(e){var t=s.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return s.createElement(a.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(n),b=r,d=m["".concat(a,".").concat(b)]||m[b]||p[b]||i;return n?s.createElement(d,o(o({ref:t},c),{},{components:n})):s.createElement(d,o({ref:t},c))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},99963:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var s=n(83117),r=(n(67294),n(3905));const i={title:"Bubble"},o=void 0,l={unversionedId:"Recipes/Basic/Bubble/index",id:"Recipes/Basic/Bubble/index",title:"Bubble",description:"Synopsis",source:"@site/docs/Recipes/Basic/Bubble/index.md",sourceDirName:"Recipes/Basic/Bubble",slug:"/Recipes/Basic/Bubble/",permalink:"/docs/Recipes/Basic/Bubble/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Recipes/Basic/Bubble/index.md",tags:[],version:"current",frontMatter:{title:"Bubble"},sidebar:"tutorialSidebar",previous:{title:"Bottles Of Beer",permalink:"/docs/Recipes/Basic/BottlesOfBeer/"},next:{title:"Even",permalink:"/docs/Recipes/Basic/Even/"}},a={},u=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Variout styles to write bubble sort."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Bubble_sort"},"Bubble sort")," is a classical (albeit not the most efficient) technique to sort lists of values.\nWe present here several styles to implement bubble sort.\nAlso see ",(0,r.kt)("a",{parentName:"p",href:"/docs/Library/List#List-sort"},"sort")," for a more efficient library function for sorting."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"\nmodule demo::basic::Bubble\n\nimport List;\n\n\nlist[int] sort1(list[int] numbers) { \n  if (size(numbers) > 0) {\n     for (int i <- [0 .. size(numbers)-1]) {\n       if (numbers[i] > numbers[i+1]) {\n         // interesting destructuring bind:\n         <numbers[i], numbers[i+1]> = <numbers[i+1], numbers[i]>;\n         return sort1(numbers);\n       }\n    }\n  }  \n  return numbers;\n}\n\n\nlist[int] sort2(list[int] numbers) {\n  switch(numbers){\n    case [*int nums1, int p, int q, *int nums2]:\n       if (p > q) {\n          return sort2(nums1 + [q, p] + nums2);\n       } else {\n          fail;\n       }\n     default: return numbers;\n   }\n}\n\n\nlist[int] sort3(list[int] numbers) {\n  while ([*int nums1, int p, *int nums2, int q, *int nums3] := numbers && p > q)\n        numbers = nums1 + [q] + nums2 + [p] + nums3;\n  return numbers;\n}\n\n\nlist[int] sort4(list[int] numbers) {\n  solve (numbers) {\n    if ([*int nums1, int p, *int nums2, int q, *int nums3] := numbers && p > q)\n      numbers = nums1 + [q] + nums2 + [p] + nums3;\n  }\n  return numbers;\n}\n\n\nlist[int] sort5([*int nums1, int p, *int nums2, int q, *int nums3]) {\n  if (p > q) \n    return sort5([*nums1, q, *nums2, p, *nums3]); \n  else \n    fail sort5;\n}\n\ndefault list[int] sort5(list[int] x) = x;\n\n\nlist[int] sort6([*int nums1, int p, *int nums2, int q, *int nums3]) \n  = sort5([*nums1, q, *nums2, p, *nums3])\n  when p > q; \n\ndefault list[int] sort6(list[int] x) = x;\n\n\nbool isSorted(list[int] lst) = !any(int i <- index(lst), int j <- index(lst), (i < j) && (lst[i] > lst[j]));\ntest bool sorted1b() = isSorted([10]);\ntest bool sorted1c() = isSorted([10, 20]);\ntest bool sorted1d() = isSorted([-10, 20, 30]);\ntest bool sorted1e() = !isSorted([10, 20, -30]);\n\ntest bool sorted2(list[int] lst) = isSorted(sort2(lst));\ntest bool sorted3(list[int] lst) = isSorted(sort3(lst));\ntest bool sorted4(list[int] lst) = isSorted(sort4(lst));\ntest bool sorted5(list[int] lst) = isSorted(sort5(lst));\ntest bool sorted6(list[int] lst) = isSorted(sort6(lst));\n\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sort1")," is a classic, imperative style, implementation of bubble sort: it iterates over consecutive pairs of elements and\nwhen a not-yet-sorted pair is encountered, the elements are exchanged, and ",(0,r.kt)("inlineCode",{parentName:"p"},"sort1")," is applied recursively to the whole list."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sort2")," uses list matching and consists of a switch with two cases:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a case matching a list with two consecutive elements that are unsorted. Observe that when the pattern of a case matches,\nthe case as a whole can still fail."),(0,r.kt)("li",{parentName:"ul"},"a default case.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sort3")," also uses list matching but in a more declarative style: as long as there are unsorted elements in the list (possibly with intervening elements), exchange them."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sort4")," is identical to ",(0,r.kt)("inlineCode",{parentName:"p"},"sort3"),", except that the shorter ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),"-notation for list variables is used and that the type declaration for the\nthe non-list variables has been omitted."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sort5")," uses tail recursion to reach a fixed point instead of a while loop. One alternative matches lists with out-of-order elements, while the default alternative returns the list if no out-of-order elements are found."),(0,r.kt)("p",null,"Let's put them to the test:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import demo::basic::Bubble;\nok\nrascal>L = [9,8,7,6,5,4,3,2,1];\nlist[int]: [9,8,7,6,5,4,3,2,1]\nrascal>sort1(L);\nlist[int]: [1,2,3,4,5,6,7,8,9]\nrascal>sort2(L);\nlist[int]: [1,2,3,4,5,6,7,8,9]\nrascal>sort3(L);\nlist[int]: [1,2,3,4,5,6,7,8,9]\nrascal>sort4(L);\nlist[int]: [1,2,3,4,5,6,7,8,9]\nrascal>sort5(L);\nlist[int]: [1,2,3,4,5,6,7,8,9]\n")))}p.isMDXComponent=!0}}]);