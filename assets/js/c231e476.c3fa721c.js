"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[55336],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>m});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||s;return r?t.createElement(f,i(i({ref:n},p),{},{components:r})):t.createElement(f,i({ref:n},p))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},16566:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var t=r(83117),a=(r(67294),r(3905));const s={title:"Parse"},i=void 0,o={unversionedId:"Recipes/Languages/Func/Parse/index",id:"Recipes/Languages/Func/Parse/index",title:"Parse",description:"Synopsis",source:"@site/docs/Recipes/Languages/Func/Parse/index.md",sourceDirName:"Recipes/Languages/Func/Parse",slug:"/Recipes/Languages/Func/Parse/",permalink:"/docs/Recipes/Languages/Func/Parse/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Recipes/Languages/Func/Parse/index.md",tags:[],version:"current",frontMatter:{title:"Parse"},sidebar:"tutorialSidebar",previous:{title:"Load AST",permalink:"/docs/Recipes/Languages/Func/LoadAST/"},next:{title:"Lisra",permalink:"/docs/Recipes/Languages/Lisra/"}},l={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],p={toc:c};function u(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Parse a Func program from a string or a file."),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("h4",{id:"types"},"Types"),(0,a.kt)("h4",{id:"function"},"Function"),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"Parsing uses the syntax rules for a given start non-terminnal to parse a string and turn it into a parse tree.\nThe work horse is the ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/ParseTree#ParseTree-parse"},"parse")," function that is available in the\n",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/ParseTree"},"ParseTree")," library."),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Here is how to parse Func programs from a string or file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"// tag::module[]\nmodule demo::lang::Func::Parse\n\nimport demo::lang::Func::Func;\nimport ParseTree;\n\nProg parse(loc l) = parse(#Prog, l);\nProg parse(str s) = parse(#Prog, s);\n// end::module[]\n\n")),(0,a.kt)("p",null,"Let's try this on example ",(0,a.kt)("inlineCode",{parentName:"p"},"F0.func"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"fact(n) = if n <= 1 then\n             1 \n          else \n             n * fact(n-1)\n          end\n")),(0,a.kt)("p",null,"First, we try the version with a string argument:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import demo::lang::Func::Parse;\nok\nrascal>import demo::lang::Func::programs::F0;\nok\nrascal>parse(F0);\nProg: (Prog) `fact(n) = if n <= 1 then\n             1 \n          else \n             n * fact(n-1)\n          end`\n")),(0,a.kt)("p",null,"This must be defined as success: we get the original program and its parse tree back.\nNext, we try the same from a file. We use the scheme ",(0,a.kt)("inlineCode",{parentName:"p"},"std")," that refers to files that reside in the Rascal library.\nSee ","[$Rascal:Expressions/Values/Location]"," for further details on other schemes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>parse(|std:///demo/lang/Func/programs/F0.func|);\nProg: (Prog) `fact(n) = if n <= 1 then\n             1 \n          else \n             n * fact(n-1)\n          end`\n")),(0,a.kt)("h4",{id:"benefits"},"Benefits"))}u.isMDXComponent=!0}}]);