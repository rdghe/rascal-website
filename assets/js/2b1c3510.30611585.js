"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[49319],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),k=a,h=p["".concat(s,".").concat(k)]||p[k]||m[k]||l;return n?i.createElement(h,r(r({ref:t},c),{},{components:n})):i.createElement(h,r({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var u=2;u<l;u++)r[u]=n[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},29140:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var i=n(83117),a=(n(67294),n(3905));const l={title:"module util::Benchmark"},r=void 0,o={unversionedId:"Library/util/Benchmark",id:"Library/util/Benchmark",title:"module util::Benchmark",description:"Usage",source:"@site/docs/Library/util/Benchmark.md",sourceDirName:"Library/util",slug:"/Library/util/Benchmark",permalink:"/docs/Library/util/Benchmark",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/util/Benchmark.md",tags:[],version:"current",frontMatter:{title:"module util::Benchmark"},sidebar:"tutorialSidebar",previous:{title:"util",permalink:"/docs/Library/util/"},next:{title:"module util::Eval",permalink:"/docs/Library/util/Eval"}},s={},u=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"function heapDump",id:"util-Benchmark-heapDump",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Description",id:"description-1",level:4},{value:"function getFreeMemory",id:"util-Benchmark-getFreeMemory",level:2},{value:"Synopsis",id:"synopsis-2",level:4},{value:"Description",id:"description-2",level:4},{value:"function getTotalMemory",id:"util-Benchmark-getTotalMemory",level:2},{value:"Synopsis",id:"synopsis-3",level:4},{value:"Description",id:"description-3",level:4},{value:"function getMaxMemory",id:"util-Benchmark-getMaxMemory",level:2},{value:"Synopsis",id:"synopsis-4",level:4},{value:"function getUsedMemory",id:"util-Benchmark-getUsedMemory",level:2},{value:"Synopsis",id:"synopsis-5",level:4},{value:"function getMaxFreeMemory",id:"util-Benchmark-getMaxFreeMemory",level:2},{value:"Synopsis",id:"synopsis-6",level:4},{value:"function cpuTimeNow",id:"util-Benchmark-cpuTimeNow",level:2},{value:"Synopsis",id:"synopsis-7",level:4},{value:"Description",id:"description-4",level:4},{value:"Examples",id:"examples",level:4},{value:"Pitfalls",id:"pitfalls",level:4},{value:"function realTimeNow",id:"util-Benchmark-realTimeNow",level:2},{value:"Synopsis",id:"synopsis-8",level:4},{value:"Description",id:"description-5",level:4},{value:"Pitfalls",id:"pitfalls-1",level:4},{value:"function getNanoTimeNow",id:"util-Benchmark-getNanoTimeNow",level:2},{value:"Synopsis",id:"synopsis-9",level:4},{value:"Description",id:"description-6",level:4},{value:"function getMilliTimeNow",id:"util-Benchmark-getMilliTimeNow",level:2},{value:"Synopsis",id:"synopsis-10",level:4},{value:"function cpuTimeOf",id:"util-Benchmark-cpuTimeOf",level:2},{value:"Synopsis",id:"synopsis-11",level:4},{value:"function systemTimeNow",id:"util-Benchmark-systemTimeNow",level:2},{value:"Synopsis",id:"synopsis-12",level:4},{value:"Description",id:"description-7",level:4},{value:"Examples",id:"examples-1",level:4},{value:"function systemTimeOf",id:"util-Benchmark-systemTimeOf",level:2},{value:"Synopsis",id:"synopsis-13",level:4},{value:"Examples",id:"examples-2",level:4},{value:"function userTimeNow",id:"util-Benchmark-userTimeNow",level:2},{value:"Synopsis",id:"synopsis-14",level:4},{value:"Description",id:"description-8",level:4},{value:"Examples",id:"examples-3",level:4},{value:"function userTimeOf",id:"util-Benchmark-userTimeOf",level:2},{value:"Synopsis",id:"synopsis-15",level:4},{value:"function realTimeOf",id:"util-Benchmark-realTimeOf",level:2},{value:"Synopsis",id:"synopsis-16",level:4},{value:"Pitfalls",id:"pitfalls-2",level:4},{value:"function benchmark",id:"util-Benchmark-benchmark",level:2},{value:"Synopsis",id:"synopsis-17",level:4},{value:"Description",id:"description-9",level:4},{value:"Examples",id:"examples-4",level:4},{value:"function gc",id:"util-Benchmark-gc",level:2},{value:"Description",id:"description-10",level:4},{value:"Benefits",id:"benefits",level:4},{value:"Pitfalls",id:"pitfalls-3",level:4}],c={toc:u};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"import util::Benchmark;")),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Functions for time measurement and benchmarking."),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Benchmark")," library provides the following functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-benchmark"},"Library:function:util::Benchmark::benchmark")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-cpuTimeNow"},"Library:function:util::Benchmark::cpu time now")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-cpuTimeOf"},"Library:function:util::Benchmark::cpu time of")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-gc"},"Library:function:util::Benchmark::gc")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-getFreeMemory"},"Library:function:util::Benchmark::get free memory")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-getMaxFreeMemory"},"Library:function:util::Benchmark::get max free memory")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-getMaxMemory"},"Library:function:util::Benchmark::get max memory")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-getMilliTimeNow"},"Library:function:util::Benchmark::get milli time now")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-getNanoTimeNow"},"Library:function:util::Benchmark::get nano time now")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-getTotalMemory"},"Library:function:util::Benchmark::get total memory")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-getUsedMemory"},"Library:function:util::Benchmark::get used memory")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-heapDump"},"Library:function:util::Benchmark::heap dump")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-realTimeNow"},"Library:function:util::Benchmark::real time now")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-realTimeOf"},"Library:function:util::Benchmark::real time of")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-systemTimeNow"},"Library:function:util::Benchmark::system time now")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-systemTimeOf"},"Library:function:util::Benchmark::system time of")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-userTimeNow"},"Library:function:util::Benchmark::user time now")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-userTimeOf"},"Library:function:util::Benchmark::user time of"))),(0,a.kt)("h2",{id:"util-Benchmark-heapDump"},"function heapDump"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void heapDump(loc file, bool live=true)"))),(0,a.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,a.kt)("p",null,"Write a JVM heap dump to a file."),(0,a.kt)("h4",{id:"description-1"},"Description"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The file parameter has to be of the ",(0,a.kt)("inlineCode",{parentName:"li"},"file")," scheme."),(0,a.kt)("li",{parentName:"ul"},"The live parameter restricts the dump to only live objects.")),(0,a.kt)("h2",{id:"util-Benchmark-getFreeMemory"},"function getFreeMemory"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int getFreeMemory()"))),(0,a.kt)("h4",{id:"synopsis-2"},"Synopsis"),(0,a.kt)("p",null,"Returns the free memory of the current JVM"),(0,a.kt)("h4",{id:"description-2"},"Description"),(0,a.kt)("p",null,"This returns the number of bytes that can be allocated\nstill against the current result of ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/util/Benchmark#util::Benchmark-getTotalMemory"},"get total memory"),"."),(0,a.kt)("h2",{id:"util-Benchmark-getTotalMemory"},"function getTotalMemory"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int getTotalMemory()"))),(0,a.kt)("h4",{id:"synopsis-3"},"Synopsis"),(0,a.kt)("p",null,"Returns the current total memory allocated by the current JVM"),(0,a.kt)("h4",{id:"description-3"},"Description"),(0,a.kt)("p",null,"This returns the number of bytes currently allocated for use by the JVM.\nThe number can change over time but it's never higher than ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/util/Benchmark#util::Benchmark-getMaxMemory"},"get max memory"),"`"),(0,a.kt)("h2",{id:"util-Benchmark-getMaxMemory"},"function getMaxMemory"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int getMaxMemory()"))),(0,a.kt)("h4",{id:"synopsis-4"},"Synopsis"),(0,a.kt)("p",null,"Returns the maximum amount of memory that is available to the current JVM"),(0,a.kt)("h2",{id:"util-Benchmark-getUsedMemory"},"function getUsedMemory"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int getUsedMemory()"))),(0,a.kt)("h4",{id:"synopsis-5"},"Synopsis"),(0,a.kt)("p",null,"Returns the amount of memory that is currently in use by the programs running on this JVM"),(0,a.kt)("h2",{id:"util-Benchmark-getMaxFreeMemory"},"function getMaxFreeMemory"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int getMaxFreeMemory()"))),(0,a.kt)("h4",{id:"synopsis-6"},"Synopsis"),(0,a.kt)("p",null,"Returns the amount of memory that is yet available, in principle, on the current JVM"),(0,a.kt)("h2",{id:"util-Benchmark-cpuTimeNow"},"function cpuTimeNow"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int cpuTimeNow()"))),(0,a.kt)("h4",{id:"synopsis-7"},"Synopsis"),(0,a.kt)("p",null,"CPU time in nanoseconds (10^-9^ sec)"),(0,a.kt)("h4",{id:"description-4"},"Description"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Current cpu time in ",(0,a.kt)("strong",{parentName:"li"},"nanoseconds")," (10^-9^ sec) since the start of the thread that runs the code that calls this function."),(0,a.kt)("li",{parentName:"ul"},"This number has nanoseconds resolution, but not necessarily nanosecond accuracy.")),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"We use the ",(0,a.kt)("inlineCode",{parentName:"p"},"fac")," function described in ",(0,a.kt)("a",{parentName:"p",href:"../../Recipes/Basic/Factorial"},"Factorial")," as example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import util::Benchmark;\nok\nrascal>import demo::basic::Factorial;\nok\n")),(0,a.kt)("p",null,"Here we measure time by using separate calls to ",(0,a.kt)("inlineCode",{parentName:"p"},"cpuTime")," before and after a call to ",(0,a.kt)("inlineCode",{parentName:"p"},"fac"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>before = cpuTimeNow();\nint: 805656650000\nrascal>fac(50);\nint: 30414093201713378043612608166064768844377641568960512000000000000\nrascal>cpuTimeNow() - before;\nint: 3650000\n")),(0,a.kt)("p",null,"See also ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/util/Benchmark#util::Benchmark-cpuTimeOf"},"cpu time of")," for a more convenient way of measuring the time spent during a block of code."),(0,a.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The timings shown above may be significantly influenced by the documentation compilation process")),(0,a.kt)("h2",{id:"util-Benchmark-realTimeNow"},"function realTimeNow"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int realTimeNow()"))),(0,a.kt)("h4",{id:"synopsis-8"},"Synopsis"),(0,a.kt)("p",null,"Returns wall clock time in ",(0,a.kt)("em",{parentName:"p"},"milliseconds")," since the Unix epoch"),(0,a.kt)("h4",{id:"description-5"},"Description"),(0,a.kt)("p",null,"Returns the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC"),(0,a.kt)("h4",{id:"pitfalls-1"},"Pitfalls"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The actual accuracy of the time may be not as good as a millisecond. This depends on OS and hardware specifics."),(0,a.kt)("li",{parentName:"ul"},"Note that the resolution is ",(0,a.kt)("em",{parentName:"li"},"milliseconds")," here, while ",(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-cpuTimeNow"},"cpu time now")," produces nanosecond resolution.")),(0,a.kt)("h2",{id:"util-Benchmark-getNanoTimeNow"},"function getNanoTimeNow"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int getNanoTimeNow()"))),(0,a.kt)("h4",{id:"synopsis-9"},"Synopsis"),(0,a.kt)("p",null,"Return nanoseconds clock time of the JVM's high resolution clock."),(0,a.kt)("h4",{id:"description-6"},"Description"),(0,a.kt)("p",null,"   See ",(0,a.kt)("inlineCode",{parentName:"p"},"System.nanoTime")," Java documentation. An excerpt:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Returns the current value of the running Java Virtual Machine's\nhigh-resolution time source, in nanoseconds.\nThis method can only be used to measure elapsed time and is\nnot related to any other notion of system or wall-clock time.\nThe value returned represents nanoseconds since some fixed but\narbitrary ",(0,a.kt)("i",null,"origin")," time (perhaps in the future, so values\nmay be negative).  The same origin is used by all invocations of\nthis method in an instance of a Java virtual machine; other\nvirtual machine instances are likely to use a different origin.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This method provides nanosecond precision, but not necessarily\nnanosecond resolution (that is, how frequently the value changes).")),(0,a.kt)("h2",{id:"util-Benchmark-getMilliTimeNow"},"function getMilliTimeNow"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int getMilliTimeNow()"))),(0,a.kt)("h4",{id:"synopsis-10"},"Synopsis"),(0,a.kt)("p",null,"Synonym for ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/util/Benchmark#util::Benchmark-realTimeNow"},"real time now")),(0,a.kt)("h2",{id:"util-Benchmark-cpuTimeOf"},"function cpuTimeOf"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int cpuTimeOf(void () block)"))),(0,a.kt)("h4",{id:"synopsis-11"},"Synopsis"),(0,a.kt)("p",null,"Measure the exact running time of a block of code, using ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/util/Benchmark#util::Benchmark-cpuTimeNow"},"cpu time now"),"."),(0,a.kt)("h2",{id:"util-Benchmark-systemTimeNow"},"function systemTimeNow"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int systemTimeNow()"))),(0,a.kt)("h4",{id:"synopsis-12"},"Synopsis"),(0,a.kt)("p",null,"System time in nanoseconds (10^-9^ sec)."),(0,a.kt)("h4",{id:"description-7"},"Description"),(0,a.kt)("p",null,"Returns the CPU time that the current thread has executed in system mode in nanoseconds."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Current system time in nanoseconds (10^-9^ sec) since the start of the thread that runs the code that calls this function."),(0,a.kt)("li",{parentName:"ul"},"The returned value is of nanoseconds precision but not necessarily nanoseconds accuracy."),(0,a.kt)("li",{parentName:"ul"},"CPU time is the number of CPU cycles times the OS-registered clock speed."),(0,a.kt)("li",{parentName:"ul"},"The other ",(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-cpuTimeNow"},"CPU time"),", next to ",(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-systemTimeNow"},"System time")," is spent in ",(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-userTimeNow"},"User time"),".")),(0,a.kt)("h4",{id:"examples-1"},"Examples"),(0,a.kt)("p",null,"We use the ",(0,a.kt)("inlineCode",{parentName:"p"},"fac")," function described in ",(0,a.kt)("a",{parentName:"p",href:"../../Recipes/Basic/Factorial"},"Factorial")," as example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import util::Benchmark;\nok\nrascal>import demo::basic::Factorial;\nok\n")),(0,a.kt)("p",null,"Here we measure time by using separate calls to ",(0,a.kt)("inlineCode",{parentName:"p"},"sytemTime")," before and after a call to ",(0,a.kt)("inlineCode",{parentName:"p"},"fac"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>before = systemTimeNow();\nint: 35230952000\nrascal>fac(50);\nint: 30414093201713378043612608166064768844377641568960512000000000000\nrascal>systemTimeNow() - before;\nint: 80000\n")),(0,a.kt)("h2",{id:"util-Benchmark-systemTimeOf"},"function systemTimeOf"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int systemTimeOf(void () block)"))),(0,a.kt)("h4",{id:"synopsis-13"},"Synopsis"),(0,a.kt)("p",null,"Measure the exact running time of a block of code, using ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/util/Benchmark#util::Benchmark-systemTimeNow"},"system time now"),"."),(0,a.kt)("h4",{id:"examples-2"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import util::Benchmark;\nok\nrascal>import demo::basic::Factorial;\nok\nrascal>systemTimeOf(\n>>>>>>>   void() { \n>>>>>>>      fac(50); \n>>>>>>>   } \n>>>>>>>);\nint: 17000\n")),(0,a.kt)("h2",{id:"util-Benchmark-userTimeNow"},"function userTimeNow"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int userTimeNow()"))),(0,a.kt)("h4",{id:"synopsis-14"},"Synopsis"),(0,a.kt)("p",null,"User time in nanoseconds (10^-9^ sec)"),(0,a.kt)("h4",{id:"description-8"},"Description"),(0,a.kt)("p",null,"Returns the CPU time that the current thread has executed in user mode in nanoseconds."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The returned value is of nanoseconds precision but not necessarily nanoseconds accuracy."),(0,a.kt)("li",{parentName:"ul"},"As distinguished from ",(0,a.kt)("a",{parentName:"li",href:"/docs/Library/DateTime#DateTime-now"},"now")," which returns the wall clock time since the Unix epoch."),(0,a.kt)("li",{parentName:"ul"},"CPU time is the number of CPU cycles times the OS-registered clock speed."),(0,a.kt)("li",{parentName:"ul"},"The other ",(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-cpuTimeNow"},"CPU time"),", next to ",(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-userTimeNow"},"user time")," is spent in ",(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-systemTimeNow"},"system time"),".")),(0,a.kt)("h4",{id:"examples-3"},"Examples"),(0,a.kt)("p",null,"We use the ",(0,a.kt)("inlineCode",{parentName:"p"},"fac")," function described in ",(0,a.kt)("a",{parentName:"p",href:"../../Recipes/Basic/Factorial"},"Factorial")," as example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import util::Benchmark;\nok\nrascal>import demo::basic::Factorial;\nok\n")),(0,a.kt)("p",null,"Here we measure time by using separate calls to ",(0,a.kt)("inlineCode",{parentName:"p"},"userTime")," before and after a call to ",(0,a.kt)("inlineCode",{parentName:"p"},"fac"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>before = userTimeNow();\nint: 770567536000\nrascal>fac(50);\nint: 30414093201713378043612608166064768844377641568960512000000000000\nrascal>userTimeNow() - before;\nint: 3332000\n")),(0,a.kt)("h2",{id:"util-Benchmark-userTimeOf"},"function userTimeOf"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int userTimeOf(void () block)"))),(0,a.kt)("h4",{id:"synopsis-15"},"Synopsis"),(0,a.kt)("p",null,"Measure the exact running time of a block of code in nanoseconds, doc combined with previous function."),(0,a.kt)("h2",{id:"util-Benchmark-realTimeOf"},"function realTimeOf"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int realTimeOf(void () block)"))),(0,a.kt)("h4",{id:"synopsis-16"},"Synopsis"),(0,a.kt)("p",null,"Measure the exact running time of a block of code in milliseconds, doc included in previous function."),(0,a.kt)("h4",{id:"pitfalls-2"},"Pitfalls"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"watch out this is measured in milliseconds, not nanoseconds")),(0,a.kt)("h2",{id:"util-Benchmark-benchmark"},"function benchmark"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"map[str,num] benchmark(map[str, void()] Cases)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"map[str,num] benchmark(map[str, void()] Cases, int (void ()) duration)"))),(0,a.kt)("h4",{id:"synopsis-17"},"Synopsis"),(0,a.kt)("p",null,"Utility to measure and compare the execution time a set of code blocks"),(0,a.kt)("h4",{id:"description-9"},"Description"),(0,a.kt)("p",null,"Given is a map that maps strings (used as label to identify each case) to void-closures that execute the code to be benchmarked.\nAn optional ",(0,a.kt)("inlineCode",{parentName:"p"},"duration")," argument can be used to specify the function to perform the actual measurement. By default the function ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/util/Benchmark#util::Benchmark-realTimeOf"},"real time of")," is used. A map of labels and durations is returned."),(0,a.kt)("h4",{id:"examples-4"},"Examples"),(0,a.kt)("p",null,"We use the ",(0,a.kt)("inlineCode",{parentName:"p"},"fac")," function described in ",(0,a.kt)("a",{parentName:"p",href:"../../Recipes/Basic/Factorial"},"Factorial")," as example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import util::Benchmark;\nok\nrascal>import demo::basic::Factorial;\nok\n")),(0,a.kt)("p",null,"We measure two calls to the factorial function with arguments ",(0,a.kt)("inlineCode",{parentName:"p"},"100"),", respectively, ",(0,a.kt)("inlineCode",{parentName:"p"},"200"),"\n(using by default ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/util/Benchmark#util::Benchmark-realTimeNow"},"real time now")," that returns milliseconds):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>benchmark(\n>>>>>>>   ("fac100" : void() {\n>>>>>>>                  fac(100);\n>>>>>>>               }, \n>>>>>>>   "fac200" :  void() {\n>>>>>>>                  fac(200);\n>>>>>>>               }) \n>>>>>>>   );\nmap[str, num]: ("fac100":2,"fac200":4)\n')),(0,a.kt)("p",null,"We can do the same using ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/util/Benchmark#util::Benchmark-userTimeNow"},"user time now")," that returns nanoseconds:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>benchmark( \n>>>>>>>   ("fac100" : void() {\n>>>>>>>                  fac(100);\n>>>>>>>            }, \n>>>>>>>   "fac200" : void() {\n>>>>>>>                  fac(200);\n>>>>>>>            })\n>>>>>>>   , userTimeOf);\nmap[str, num]: ("fac100":1992000,"fac200":3896000)\n')),(0,a.kt)("h2",{id:"util-Benchmark-gc"},"function gc"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int gc()"))),(0,a.kt)("h4",{id:"description-10"},"Description"),(0,a.kt)("p",null,"This function tries to trigger a garbage collection. It may be useful to call this function\njust before measuring the efficiency of a code block, in order to factor out previous effects\non the heap."),(0,a.kt)("h4",{id:"benefits"},"Benefits"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"This helps avoiding to restart the JVM, and optionally warming it up, for each individual measurement."),(0,a.kt)("li",{parentName:"ul"},"Long running terminal ",(0,a.kt)("a",{parentName:"li",href:"../../RascalShell/REPL"},"REPL"),"s can be rejuvenated on demand by a call to ",(0,a.kt)("a",{parentName:"li",href:"/docs/Library/util/Benchmark#util::Benchmark-gc"},"gc"),".")),(0,a.kt)("h4",{id:"pitfalls-3"},"Pitfalls"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Although a GC cycle is triggered by this function, it guarantees nothing about the effect of this cycle in terms of completeness or precision in removing garbage from the heap."),(0,a.kt)("li",{parentName:"ul"},"GC only works for real garbage. So if there is an unrelated accidental memory leak somewhere, it may better to start a fresh JVM to measure the current functionality under scrutiny.")))}m.isMDXComponent=!0}}]);