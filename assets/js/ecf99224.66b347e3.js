"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[56784],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,h=m["".concat(o,".").concat(d)]||m[d]||u[d]||s;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<s;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},60231:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const s={title:"Enumerating",sidebar_position:3},l=void 0,i={unversionedId:"RascalConcepts/Enumerating/index",id:"RascalConcepts/Enumerating/index",title:"Enumerating",description:"Synopsis",source:"@site/docs/RascalConcepts/Enumerating/index.md",sourceDirName:"RascalConcepts/Enumerating",slug:"/RascalConcepts/Enumerating/",permalink:"/docs/RascalConcepts/Enumerating/",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Enumerating",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Immutable Values",permalink:"/docs/RascalConcepts/ImmutableValues/"},next:{title:"Pattern Matching",permalink:"/docs/RascalConcepts/PatternMatching/"}},o={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Pitfalls",id:"pitfalls",level:4}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Enumerating values."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"Enumerating regards the enumeration of the values in a given (finite) domain, be it the elements in a list, the substrings of a string,\nor all the nodes in a tree.\nEach value that is enumerated is first matched against a pattern before it can possibly contribute to the result of\nthe enumerator. An enumerator yields ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," as long as it has generated a new value, and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/Comprehensions/Enumerator/"},"Enumerator")," for details."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"int x <- { 1, 3, 5, 7, 11 }\nint x <- [ 1 .. 10 ]\n/asgStat(Id name, _) <- P\n")),(0,r.kt)("p",null,"The first two produce the integer elements of a set of integers, respectively, a range of integers.\nObserve that the left-hand side of an enumerator is a pattern, of which ",(0,r.kt)("inlineCode",{parentName:"p"},"int x")," is a specific instance.\nThe use of more general patterns is illustrated by the third enumerator that does a deep traversal\n(as denoted by the descendant operator ",(0,r.kt)("inlineCode",{parentName:"p"},"/"),") of the complete program ",(0,r.kt)("inlineCode",{parentName:"p"},"P")," (that is assumed to have a\n",(0,r.kt)("inlineCode",{parentName:"p"},"PROGRAM")," as value) and only yields statements that match the assignment pattern (",(0,r.kt)("inlineCode",{parentName:"p"},"asgStat"),").\nNote the use of an anonymous variable at the ",(0,r.kt)("inlineCode",{parentName:"p"},"EXP")," position in the pattern."),(0,r.kt)("p",null,"Let's practice some of these examples."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>int x <- {};\nbool: false\n")),(0,r.kt)("p",null,"The enumerator does not produce any value and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",error",",error":!0},"rascal>int x <- {1, 3, 5, 7, 11 };\nbool: true\nrascal>x;\n|prompt:///|(0,1,<1,0>,<1,1>): Undeclared variable: x\nAdvice: |http://tutor.rascal-mpl.org/Errors/Static/UndeclaredVariable/UndeclaredVariable.html|\nok\n")),(0,r.kt)("p",null,"Well, this is a disappointing experience. The generator returned ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," since it did produce a value.\nApparently, we cannot inspect the value of the variable ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," that was bound."),(0,r.kt)("p",null,"Another example that results in an error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",error",",error":!0},"rascal>str x <- {1, 3, 5, 7, 11 };\n|prompt:///|(22,2,<1,22>,<1,24>): Expected int, but got str\nAdvice: |http://tutor.rascal-mpl.org/Errors/Static/UnexpectedType/UnexpectedType.html|\nok\n")),(0,r.kt)("p",null,"Here, the enumerator produces its first integer value, an attempt is made to assign this to variable ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," that is declared as string,\nand an error results."),(0,r.kt)("p",null,"A more satisfying use is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>{ x * x | int x <- {1, 3, 5, 7, 11 }};\nset[int]: {121,1,9,49,25}\n")),(0,r.kt)("p",null,"When used inside ",(0,r.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/Comprehensions/"},"Comprehensions"),",\nor ",(0,r.kt)("a",{parentName:"p",href:"/docs/Rascal/Statements/For/"},"For"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/Rascal/Statements/Do/"},"Do"),", or ",(0,r.kt)("a",{parentName:"p",href:"/docs/Rascal/Statements/While/"},"While"),"\nstatement, all values of the generator will be produced and used.\nThe variables that are introduced by a enumerator are local to the construct in which the enumerator is used.\nHere is a similar example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>for(int x <- {1, 3, 5, 7, 11 })\n>>>>>>>    println("x = <x>");\nx = 5\nx = 7\nx = 1\nx = 3\nx = 11\nlist[void]: []\n')),(0,r.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,r.kt)("p",null,"The variables that are bound by an enumerator are local to the statement in which the enumerator is used."))}u.isMDXComponent=!0}}]);