"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[47529],{3905:(e,t,s)=>{s.d(t,{Zo:()=>d,kt:()=>g});var a=s(67294);function l(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function n(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,a)}return s}function i(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?n(Object(s),!0).forEach((function(t){l(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):n(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function o(e,t){if(null==e)return{};var s,a,l=function(e,t){if(null==e)return{};var s,a,l={},n=Object.keys(e);for(a=0;a<n.length;a++)s=n[a],t.indexOf(s)>=0||(l[s]=e[s]);return l}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)s=n[a],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(l[s]=e[s])}return l}var r=a.createContext({}),c=function(e){var t=a.useContext(r),s=t;return e&&(s="function"==typeof e?e(t):i(i({},t),e)),s},d=function(e){var t=c(e.components);return a.createElement(r.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},N=a.forwardRef((function(e,t){var s=e.components,l=e.mdxType,n=e.originalType,r=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),N=c(s),g=l,p=N["".concat(r,".").concat(g)]||N[g]||u[g]||n;return s?a.createElement(p,i(i({ref:t},d),{},{components:s})):a.createElement(p,i({ref:t},d))}));function g(e,t){var s=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var n=s.length,i=new Array(n);i[0]=N;var o={};for(var r in t)hasOwnProperty.call(t,r)&&(o[r]=t[r]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var c=2;c<n;c++)i[c]=s[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,s)}N.displayName="MDXCreateElement"},19181:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>u,frontMatter:()=>n,metadata:()=>o,toc:()=>c});var a=s(87462),l=(s(67294),s(3905));const n={title:"module lang::rascal::tests::basic::Nodes"},i=void 0,o={unversionedId:"Library/lang/rascal/tests/basic/Nodes",id:"Library/lang/rascal/tests/basic/Nodes",title:"module lang::rascal::tests::basic::Nodes",description:"Usage",source:"@site/docs/Library/lang/rascal/tests/basic/Nodes.md",sourceDirName:"Library/lang/rascal/tests/basic",slug:"/Library/lang/rascal/tests/basic/Nodes",permalink:"/docs/Library/lang/rascal/tests/basic/Nodes",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Library/lang/rascal/tests/basic/Nodes.md",tags:[],version:"current",frontMatter:{title:"module lang::rascal::tests::basic::Nodes"},sidebar:"tutorialSidebar",previous:{title:"module lang::rascal::tests::basic::Memoization",permalink:"/docs/Library/lang/rascal/tests/basic/Memoization"},next:{title:"module lang::rascal::tests::basic::Overloading",permalink:"/docs/Library/lang/rascal/tests/basic/Overloading"}},r={},c=[{value:"Usage",id:"usage",level:4},{value:"function visitNode",id:"lang-rascal-tests-basic-Nodes-visitNode",level:2},{value:"function subscription",id:"lang-rascal-tests-basic-Nodes-subscription",level:2},{value:"function subscriptionWrapped",id:"lang-rascal-tests-basic-Nodes-subscriptionWrapped",level:2},{value:"function makeSlice",id:"lang-rascal-tests-basic-Nodes-makeSlice",level:2},{value:"function sliceFirst1",id:"lang-rascal-tests-basic-Nodes-sliceFirst1",level:2},{value:"function sliceFirst2",id:"lang-rascal-tests-basic-Nodes-sliceFirst2",level:2},{value:"function sliceFirstSecond",id:"lang-rascal-tests-basic-Nodes-sliceFirstSecond",level:2},{value:"function sliceEnd",id:"lang-rascal-tests-basic-Nodes-sliceEnd",level:2},{value:"function sliceSecondEnd",id:"lang-rascal-tests-basic-Nodes-sliceSecondEnd",level:2},{value:"function arbFirstEnd",id:"lang-rascal-tests-basic-Nodes-arbFirstEnd",level:2},{value:"function sliceFirstSecondEnd",id:"lang-rascal-tests-basic-Nodes-sliceFirstSecondEnd",level:2},{value:"function sliceFirstNegative",id:"lang-rascal-tests-basic-Nodes-sliceFirstNegative",level:2},{value:"function sliceEndNegative",id:"lang-rascal-tests-basic-Nodes-sliceEndNegative",level:2},{value:"function sliceFirstNegativeSecondNegative",id:"lang-rascal-tests-basic-Nodes-sliceFirstNegativeSecondNegative",level:2},{value:"function sliceSecondNegative",id:"lang-rascal-tests-basic-Nodes-sliceSecondNegative",level:2},{value:"function assignSlice1",id:"lang-rascal-tests-basic-Nodes-assignSlice1",level:2},{value:"function assignSlice2",id:"lang-rascal-tests-basic-Nodes-assignSlice2",level:2},{value:"function assignSlice3",id:"lang-rascal-tests-basic-Nodes-assignSlice3",level:2},{value:"function assignSlice4",id:"lang-rascal-tests-basic-Nodes-assignSlice4",level:2},{value:"function assignStep1",id:"lang-rascal-tests-basic-Nodes-assignStep1",level:2},{value:"function assignStep2",id:"lang-rascal-tests-basic-Nodes-assignStep2",level:2},{value:"function assignStep3",id:"lang-rascal-tests-basic-Nodes-assignStep3",level:2},{value:"function assignStep4",id:"lang-rascal-tests-basic-Nodes-assignStep4",level:2},{value:"function assignStep5",id:"lang-rascal-tests-basic-Nodes-assignStep5",level:2},{value:"function assignStep6",id:"lang-rascal-tests-basic-Nodes-assignStep6",level:2},{value:"function assignStep7",id:"lang-rascal-tests-basic-Nodes-assignStep7",level:2},{value:"function assignStep8",id:"lang-rascal-tests-basic-Nodes-assignStep8",level:2},{value:"function assignStep9",id:"lang-rascal-tests-basic-Nodes-assignStep9",level:2},{value:"function assignStep10",id:"lang-rascal-tests-basic-Nodes-assignStep10",level:2},{value:"function assignStep11",id:"lang-rascal-tests-basic-Nodes-assignStep11",level:2},{value:"function assignStep12",id:"lang-rascal-tests-basic-Nodes-assignStep12",level:2},{value:"function assignStep13",id:"lang-rascal-tests-basic-Nodes-assignStep13",level:2},{value:"function tstNode1",id:"lang-rascal-tests-basic-Nodes-tstNode1",level:2},{value:"function tstNode2",id:"lang-rascal-tests-basic-Nodes-tstNode2",level:2},{value:"data D",id:"lang-rascal-tests-basic-Nodes-D",level:2},{value:"function testPositionalFieldOnNode",id:"lang-rascal-tests-basic-Nodes-testPositionalFieldOnNode",level:2},{value:"function testKeywordParameterOnNode",id:"lang-rascal-tests-basic-Nodes-testKeywordParameterOnNode",level:2},{value:"function testUnsetKeywordParameterOnNode",id:"lang-rascal-tests-basic-Nodes-testUnsetKeywordParameterOnNode",level:2},{value:"function testNonExistingFieldOnNode",id:"lang-rascal-tests-basic-Nodes-testNonExistingFieldOnNode",level:2},{value:"function testNodeHasPositionalParameter",id:"lang-rascal-tests-basic-Nodes-testNodeHasPositionalParameter",level:2},{value:"function testNodeHasKeywordParameter",id:"lang-rascal-tests-basic-Nodes-testNodeHasKeywordParameter",level:2},{value:"function testNodeHasDefaultKeywordParameter",id:"lang-rascal-tests-basic-Nodes-testNodeHasDefaultKeywordParameter",level:2},{value:"function testNodeIsPositionalParameterDefined",id:"lang-rascal-tests-basic-Nodes-testNodeIsPositionalParameterDefined",level:2},{value:"function testNodeIsKeywordParameterDefined",id:"lang-rascal-tests-basic-Nodes-testNodeIsKeywordParameterDefined",level:2},{value:"function testNodeDefaultKeywordParameterIsNotDefined",id:"lang-rascal-tests-basic-Nodes-testNodeDefaultKeywordParameterIsNotDefined",level:2},{value:"function testUnset",id:"lang-rascal-tests-basic-Nodes-testUnset",level:2},{value:"function testUnsetRecNode",id:"lang-rascal-tests-basic-Nodes-testUnsetRecNode",level:2},{value:"function testUnsetRecValue",id:"lang-rascal-tests-basic-Nodes-testUnsetRecValue",level:2},{value:"function testUnsetRecInsideTuple",id:"lang-rascal-tests-basic-Nodes-testUnsetRecInsideTuple",level:2}],d={toc:c};function u(e){let{components:t,...s}=e;return(0,l.kt)("wrapper",(0,a.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"usage"},"Usage"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import lang::rascal::tests::basic::Nodes;")),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-visitNode"},"function visitNode"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool visitNode()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-subscription"},"function subscription"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool subscription(node N)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-subscriptionWrapped"},"function subscriptionWrapped"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool subscriptionWrapped(node N)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-makeSlice"},"function makeSlice"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list[value] makeSlice(list[value] L, int f, int s, int e)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-sliceFirst1"},"function sliceFirst1"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool sliceFirst1(node N)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-sliceFirst2"},"function sliceFirst2"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool sliceFirst2(node N)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-sliceFirstSecond"},"function sliceFirstSecond"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool sliceFirstSecond(node N)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-sliceEnd"},"function sliceEnd"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool sliceEnd(node N)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-sliceSecondEnd"},"function sliceSecondEnd"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool sliceSecondEnd(node N)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-arbFirstEnd"},"function arbFirstEnd"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tuple[int,int] arbFirstEnd(list[value] L)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-sliceFirstSecondEnd"},"function sliceFirstSecondEnd"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool sliceFirstSecondEnd(node N)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-sliceFirstNegative"},"function sliceFirstNegative"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool sliceFirstNegative(node N)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-sliceEndNegative"},"function sliceEndNegative"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool sliceEndNegative(node N)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-sliceFirstNegativeSecondNegative"},"function sliceFirstNegativeSecondNegative"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool sliceFirstNegativeSecondNegative(node N)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-sliceSecondNegative"},"function sliceSecondNegative"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool sliceSecondNegative(node N)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignSlice1"},"function assignSlice1"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignSlice1()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignSlice2"},"function assignSlice2"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignSlice2()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignSlice3"},"function assignSlice3"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignSlice3()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignSlice4"},"function assignSlice4"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignSlice4()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignStep1"},"function assignStep1"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignStep1()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignStep2"},"function assignStep2"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignStep2()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignStep3"},"function assignStep3"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignStep3()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignStep4"},"function assignStep4"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignStep4()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignStep5"},"function assignStep5"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignStep5()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignStep6"},"function assignStep6"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignStep6()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignStep7"},"function assignStep7"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignStep7()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignStep8"},"function assignStep8"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignStep8()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignStep9"},"function assignStep9"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignStep9()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignStep10"},"function assignStep10"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignStep10()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignStep11"},"function assignStep11"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignStep11()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignStep12"},"function assignStep12"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignStep12()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-assignStep13"},"function assignStep13"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool assignStep13()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-tstNode1"},"function tstNode1"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool tstNode1(node N)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-tstNode2"},"function tstNode2"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool tstNode2(str name, list[value] children)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-D"},"data D"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal"},"data D  \n     = d(int i, int j = 0)\n     ;\n")),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-testPositionalFieldOnNode"},"function testPositionalFieldOnNode"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool testPositionalFieldOnNode()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-testKeywordParameterOnNode"},"function testKeywordParameterOnNode"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool testKeywordParameterOnNode()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-testUnsetKeywordParameterOnNode"},"function testUnsetKeywordParameterOnNode"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool testUnsetKeywordParameterOnNode()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-testNonExistingFieldOnNode"},"function testNonExistingFieldOnNode"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool testNonExistingFieldOnNode()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-testNodeHasPositionalParameter"},"function testNodeHasPositionalParameter"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool testNodeHasPositionalParameter()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-testNodeHasKeywordParameter"},"function testNodeHasKeywordParameter"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool testNodeHasKeywordParameter()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-testNodeHasDefaultKeywordParameter"},"function testNodeHasDefaultKeywordParameter"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool testNodeHasDefaultKeywordParameter()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-testNodeIsPositionalParameterDefined"},"function testNodeIsPositionalParameterDefined"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool testNodeIsPositionalParameterDefined()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-testNodeIsKeywordParameterDefined"},"function testNodeIsKeywordParameterDefined"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool testNodeIsKeywordParameterDefined()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-testNodeDefaultKeywordParameterIsNotDefined"},"function testNodeDefaultKeywordParameterIsNotDefined"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool testNodeDefaultKeywordParameterIsNotDefined()"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-testUnset"},"function testUnset"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool testUnset(node n)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-testUnsetRecNode"},"function testUnsetRecNode"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool testUnsetRecNode(node v)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-testUnsetRecValue"},"function testUnsetRecValue"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool testUnsetRecValue(value v)"))),(0,l.kt)("h2",{id:"lang-rascal-tests-basic-Nodes-testUnsetRecInsideTuple"},"function testUnsetRecInsideTuple"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test bool testUnsetRecInsideTuple()"))))}u.isMDXComponent=!0}}]);