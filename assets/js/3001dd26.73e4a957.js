"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[46458],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>y});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=n.createContext({}),c=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},p=function(e){var a=c(e.components);return n.createElement(o.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),y=r,m=d["".concat(o,".").concat(y)]||d[y]||u[y]||l;return t?n.createElement(m,i(i({ref:a},p),{},{components:t})):n.createElement(m,i({ref:a},p))}));function y(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=d;var s={};for(var o in a)hasOwnProperty.call(a,o)&&(s[o]=a[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<l;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},642:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var n=t(83117),r=(t(67294),t(3905));const l={title:"Alias Declaration",keywords:["alias"]},i=void 0,s={unversionedId:"Rascal/Declarations/Alias/index",id:"Rascal/Declarations/Alias/index",title:"Alias Declaration",description:"Synopsis",source:"@site/docs/Rascal/Declarations/Alias/index.md",sourceDirName:"Rascal/Declarations/Alias",slug:"/Rascal/Declarations/Alias/",permalink:"/docs/Rascal/Declarations/Alias/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Rascal/Declarations/Alias/index.md",tags:[],version:"current",frontMatter:{title:"Alias Declaration",keywords:["alias"]},sidebar:"tutorialSidebar",previous:{title:"Algebraic Data Type",permalink:"/docs/Rascal/Declarations/AlgebraicDataType/"},next:{title:"Annotation Declaration",permalink:"/docs/Rascal/Declarations/Annotation/"}},o={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],p={toc:c};function u(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Declare an alias for a type."),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"alias Name  = Type;")),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"Everything can be expressed using the elementary types and values that are provided by Rascal.\nHowever, for the purpose of documentation and readability it is sometimes better to use a descriptive name as type indication, rather than an elementary type.  The use of aliases is a good way to document your intentions. "),(0,r.kt)("p",null,"An alias declaration states that ",(0,r.kt)("em",{parentName:"p"},"Name")," can be used everywhere instead of the already defined type ",(0,r.kt)("em",{parentName:"p"},"Type"),".\nBoth types are thus structurally equivalent. "),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"")),(0,r.kt)("p",null,"Introduce two aliases ",(0,r.kt)("inlineCode",{parentName:"p"},"ModuleId")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Frequency")," for the type str."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal,continue"},"alias ModuleId = str;\nalias Frequency = int;\n")),(0,r.kt)("p",null,"Another example is an alias definition for a graph containing integer nodes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal,continue"},"alias IntGraph = rel[int,int];\n")),(0,r.kt)("p",null,"Note that the Rascal Standard Library provides a graph data type that is defined as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal,continue"},"alias Graph[&T] = rel[&T, &T];\n")),(0,r.kt)("p",null,"In other words the standard graph datatype can be parameterized with any element type."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"../../../Rascal/Declarations/StaticTyping/TypeParameters"},"Type Parameters")," for other examples parameterized alias declarations."))}u.isMDXComponent=!0}}]);