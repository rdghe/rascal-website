"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[80084],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,y=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(y,l(l({ref:t},c),{},{components:n})):r.createElement(y,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},89175:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=n(83117),a=(n(67294),n(3905));const i={title:"UnexpectedType"},l=void 0,o={unversionedId:"CompileTimeErrors/UnexpectedType/index",id:"CompileTimeErrors/UnexpectedType/index",title:"UnexpectedType",description:"Synopsis",source:"@site/docs/CompileTimeErrors/UnexpectedType/index.md",sourceDirName:"CompileTimeErrors/UnexpectedType",slug:"/CompileTimeErrors/UnexpectedType/",permalink:"/docs/CompileTimeErrors/UnexpectedType/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/CompileTimeErrors/UnexpectedType/index.md",tags:[],version:"current",frontMatter:{title:"UnexpectedType"},sidebar:"tutorialSidebar",previous:{title:"UnexpectedKeywordArgumentType",permalink:"/docs/CompileTimeErrors/UnexpectedKeywordArgumentType/"},next:{title:"UnguardedAppend",permalink:"/docs/CompileTimeErrors/UnguardedAppend/"}},p={},s=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Usage",id:"usage",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],c={toc:s};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"A value of a different type was expected."),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("h4",{id:"types"},"Types"),(0,a.kt)("h4",{id:"function"},"Function"),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"This error signals an incompatibility between expected type and actual type.\nSome of the situations in which this may occur are\n",(0,a.kt)("a",{parentName:"p",href:"/docs/Rascal/Statements/Assert"},"assert"),", ",(0,a.kt)("a",{parentName:"p",href:"/docs/Rascal/Declarations/Variable"},"variable"),",\n",(0,a.kt)("a",{parentName:"p",href:"/docs/Rascal/Statements/Solve"},"solve"),"."),(0,a.kt)("p",null,"Remedy: adjust the actual type to the expected type."),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Declaring variable ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," as ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," and assigning it a ",(0,a.kt)("inlineCode",{parentName:"p"},"str")," value gives an error:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>int n = "abc";\nok\n')),(0,a.kt)("p",null,"The solution is to assign an ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," value to ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>int n = 123;\nint: 123\n")),(0,a.kt)("p",null,"An ",(0,a.kt)("inlineCode",{parentName:"p"},"assert")," statement expects an argument of type ",(0,a.kt)("inlineCode",{parentName:"p"},"bool"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>assert 3;\nok\n")),(0,a.kt)("h4",{id:"benefits"},"Benefits"))}d.isMDXComponent=!0}}]);