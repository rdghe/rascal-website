"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[24198],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(n),d=r,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},41081:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var a=n(83117),r=(n(67294),n(3905));const o={title:"Load"},i=void 0,p={unversionedId:"Recipes/Languages/Pico/Load/index",id:"Recipes/Languages/Pico/Load/index",title:"Load",description:"Synopsis",source:"@site/docs/Recipes/Languages/Pico/Load/index.md",sourceDirName:"Recipes/Languages/Pico/Load",slug:"/Recipes/Languages/Pico/Load/",permalink:"/docs/Recipes/Languages/Pico/Load/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Recipes/Languages/Pico/Load/index.md",tags:[],version:"current",frontMatter:{title:"Load"},sidebar:"tutorialSidebar",previous:{title:"IDE",permalink:"/docs/Recipes/Languages/Pico/IDE/"},next:{title:"Syntax",permalink:"/docs/Recipes/Languages/Pico/Syntax/"}},s={},l=[{value:"Synopsis",id:"synopsis",level:4},{value:"Examples",id:"examples",level:4}],c={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Convert a Pico parse tree into a Pico abstract syntax tree."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"The mapping between parse tree and abstract sybtax tree is achieved as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"}," // tag::module[]\n module demo::lang::Pico::Load\n\nimport Prelude;\nimport demo::lang::Pico::Syntax;\nimport demo::lang::Pico::Abstract;\n\npublic PROGRAM  load(str txt) = implode(#PROGRAM, parse(#Program, txt));\n// end::module[]\n\n")),(0,r.kt)("p",null,"Notes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The function ",(0,r.kt)("inlineCode",{parentName:"p"},"load")," takes a string as argument (supposedly the source code of a Pico program) and returns a value of type ",(0,r.kt)("inlineCode",{parentName:"p"},"PROGRAM"),",\nthe abstract syntax tree of the input program. In case the input program is syntactically incorrect, a ",(0,r.kt)("inlineCode",{parentName:"p"},"ParseError")," exception will be thrown,\nsee ",(0,r.kt)("a",{parentName:"p",href:"/docs/Library/Exception"},"RuntimeException"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"parse(#Program, txt)"),": parse ",(0,r.kt)("inlineCode",{parentName:"p"},"txt")," according to the non-terminal ",(0,r.kt)("inlineCode",{parentName:"p"},"Program"),". Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"#Program")," is a ",(0,r.kt)("em",{parentName:"p"},"reified type"),", i.e., the type ",(0,r.kt)("inlineCode",{parentName:"p"},"Program")," is represented as an ordinary Rascal value and passed as argument to the ",(0,r.kt)("inlineCode",{parentName:"p"},"parse")," function,\nsee ",(0,r.kt)("a",{parentName:"p",href:"../../../../Rascal/Expressions/Values/ReifiedTypes"},"reified types"),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"parse")," function returns a parse tree of the input program.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"implode(#PROGRAM, parse(#Program, txt))"),": transform the parse returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"parse")," into an abstract syntax tree of type ",(0,r.kt)("inlineCode",{parentName:"p"},"PROGRAM"),". The ","[$Rascal:implode]"," function performs the automatic mapping between elements in the parse tree and their counterpart in the abstract syntax."))),(0,r.kt)("p",null,"The function ",(0,r.kt)("inlineCode",{parentName:"p"},"load")," can be used as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Pico::Load;\nok\nrascal>load("begin declare x : natural; x := 3 end");\nPROGRAM: program(\n  [decl(\n      "x",\n      natural(\n        location=|unknown:///|(18,7,<1,18>,<1,25>),\n        comments=()),\n      location=|unknown:///|(14,11,<1,14>,<1,25>),\n      comments=())],\n  [asgStat(\n      "x",\n      natCon(\n        3,\n        location=|unknown:///|(32,1,<1,32>,<1,33>),\n        comments=()),\n      location=|unknown:///|(27,6,<1,27>,<1,33>),\n      comments=())],\n  location=|unknown:///|(0,37,<1,0>,<1,37>),\n  comments=())\n')),(0,r.kt)("p",null,"Observe how the various parts of the abstract syntax tree are annotated with location attributes."))}u.isMDXComponent=!0}}]);