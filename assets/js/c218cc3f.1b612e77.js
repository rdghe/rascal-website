"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[21196],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>k});var n=i(67294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function l(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?l(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)i=l[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)i=l[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var o=n.createContext({}),p=function(e){var t=n.useContext(o),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},d=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(i),k=a,m=c["".concat(o,".").concat(k)]||c[k]||u[k]||l;return i?n.createElement(m,r(r({ref:t},d),{},{components:i})):n.createElement(m,r({ref:t},d))}));function k(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=i.length,r=new Array(l);r[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var p=2;p<l;p++)r[p]=i[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}c.displayName="MDXCreateElement"},25449:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var n=i(87462),a=(i(67294),i(3905));const l={title:"module IO"},r=void 0,s={unversionedId:"Library/IO",id:"Library/IO",title:"module IO",description:"Usage",source:"@site/docs/Library/IO.md",sourceDirName:"Library",slug:"/Library/IO",permalink:"/docs/Library/IO",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Library/IO.md",tags:[],version:"current",frontMatter:{title:"module IO"},sidebar:"tutorialSidebar",previous:{title:"module Grammar",permalink:"/docs/Library/Grammar"},next:{title:"module List",permalink:"/docs/Library/List"}},o={},p=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"function registerLocations",id:"IO-registerLocations",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Description",id:"description-1",level:4},{value:"Benefits",id:"benefits",level:4},{value:"Pitfalls",id:"pitfalls",level:4},{value:"function unregisterLocations",id:"IO-unregisterLocations",level:2},{value:"Synopsis",id:"synopsis-2",level:4},{value:"Description",id:"description-2",level:4},{value:"function resolveLocation",id:"IO-resolveLocation",level:2},{value:"function appendToFile",id:"IO-appendToFile",level:2},{value:"Synopsis",id:"synopsis-3",level:4},{value:"Description",id:"description-3",level:4},{value:"Encoding",id:"encoding",level:4},{value:"Pitfalls",id:"pitfalls-1",level:4},{value:"function appendToFileEnc",id:"IO-appendToFileEnc",level:2},{value:"Synopsis",id:"synopsis-4",level:4},{value:"Description",id:"description-4",level:4},{value:"function charsets",id:"IO-charsets",level:2},{value:"Synopsis",id:"synopsis-5",level:4},{value:"function canEncode",id:"IO-canEncode",level:2},{value:"Synopsis",id:"synopsis-6",level:4},{value:"function bprintln",id:"IO-bprintln",level:2},{value:"Synopsis",id:"synopsis-7",level:4},{value:"Description",id:"description-5",level:4},{value:"Examples",id:"examples",level:4},{value:"function exists",id:"IO-exists",level:2},{value:"Synopsis",id:"synopsis-8",level:4},{value:"Description",id:"description-6",level:4},{value:"Examples",id:"examples-1",level:4},{value:"function find",id:"IO-find",level:2},{value:"Synopsis",id:"synopsis-9",level:4},{value:"Examples",id:"examples-2",level:4},{value:"function isDirectory",id:"IO-isDirectory",level:2},{value:"Synopsis",id:"synopsis-10",level:4},{value:"Description",id:"description-7",level:4},{value:"function iprint",id:"IO-iprint",level:2},{value:"Synopsis",id:"synopsis-11",level:4},{value:"Description",id:"description-8",level:4},{value:"Examples",id:"examples-3",level:4},{value:"function iprintToFile",id:"IO-iprintToFile",level:2},{value:"Synopsis",id:"synopsis-12",level:4},{value:"Description",id:"description-9",level:4},{value:"Examples",id:"examples-4",level:4},{value:"function iprintToString",id:"IO-iprintToString",level:2},{value:"function iprintExp",id:"IO-iprintExp",level:2},{value:"Synopsis",id:"synopsis-13",level:4},{value:"Description",id:"description-10",level:4},{value:"Examples",id:"examples-5",level:4},{value:"function iprintlnExp",id:"IO-iprintlnExp",level:2},{value:"Synopsis",id:"synopsis-14",level:4},{value:"Description",id:"description-11",level:4},{value:"Examples",id:"examples-6",level:4},{value:"function iprintln",id:"IO-iprintln",level:2},{value:"Synopsis",id:"synopsis-15",level:4},{value:"Description",id:"description-12",level:4},{value:"Examples",id:"examples-7",level:4},{value:"function isFile",id:"IO-isFile",level:2},{value:"Synopsis",id:"synopsis-16",level:4},{value:"Description",id:"description-13",level:4},{value:"function lastModified",id:"IO-lastModified",level:2},{value:"Synopsis",id:"synopsis-17",level:4},{value:"Description",id:"description-14",level:4},{value:"Examples",id:"examples-8",level:4},{value:"function created",id:"IO-created",level:2},{value:"Synopsis",id:"synopsis-18",level:4},{value:"Description",id:"description-15",level:4},{value:"Examples",id:"examples-9",level:4},{value:"function touch",id:"IO-touch",level:2},{value:"Synopsis",id:"synopsis-19",level:4},{value:"function setLastModified",id:"IO-setLastModified",level:2},{value:"Synopsis",id:"synopsis-20",level:4},{value:"function listEntries",id:"IO-listEntries",level:2},{value:"Synopsis",id:"synopsis-21",level:4},{value:"Description",id:"description-16",level:4},{value:"Examples",id:"examples-10",level:4},{value:"function mkDirectory",id:"IO-mkDirectory",level:2},{value:"Synopsis",id:"synopsis-22",level:4},{value:"Description",id:"description-17",level:4},{value:"function print",id:"IO-print",level:2},{value:"Synopsis",id:"synopsis-23",level:4},{value:"Description",id:"description-18",level:4},{value:"Examples",id:"examples-11",level:4},{value:"function printExp",id:"IO-printExp",level:2},{value:"Synopsis",id:"synopsis-24",level:4},{value:"Examples",id:"examples-12",level:4},{value:"function println",id:"IO-println",level:2},{value:"Synopsis",id:"synopsis-25",level:4},{value:"Description",id:"description-19",level:4},{value:"Examples",id:"examples-13",level:4},{value:"function printlnExp",id:"IO-printlnExp",level:2},{value:"Synopsis",id:"synopsis-26",level:4},{value:"Examples",id:"examples-14",level:4},{value:"function rprint",id:"IO-rprint",level:2},{value:"Synopsis",id:"synopsis-27",level:4},{value:"Pitfalls",id:"pitfalls-2",level:4},{value:"function rprintln",id:"IO-rprintln",level:2},{value:"Synopsis",id:"synopsis-28",level:4},{value:"Pitfalls",id:"pitfalls-3",level:4},{value:"function readFile",id:"IO-readFile",level:2},{value:"Synopsis",id:"synopsis-29",level:4},{value:"Description",id:"description-20",level:4},{value:"Encoding",id:"encoding-1",level:4},{value:"Pitfalls",id:"pitfalls-4",level:4},{value:"function readFileEnc",id:"IO-readFileEnc",level:2},{value:"Synopsis",id:"synopsis-30",level:4},{value:"Description",id:"description-21",level:4},{value:"function readBase64",id:"IO-readBase64",level:2},{value:"function uuencode",id:"IO-uuencode",level:2},{value:"function writeBase64",id:"IO-writeBase64",level:2},{value:"function uudecode",id:"IO-uudecode",level:2},{value:"function readFileBytes",id:"IO-readFileBytes",level:2},{value:"Synopsis",id:"synopsis-31",level:4},{value:"function readFileLines",id:"IO-readFileLines",level:2},{value:"Synopsis",id:"synopsis-32",level:4},{value:"Description",id:"description-22",level:4},{value:"Encoding",id:"encoding-2",level:4},{value:"Pitfalls",id:"pitfalls-5",level:4},{value:"function writeFileLines",id:"IO-writeFileLines",level:2},{value:"Synopsis",id:"synopsis-33",level:4},{value:"Benefits",id:"benefits-1",level:4},{value:"Pitfalls",id:"pitfalls-6",level:4},{value:"function readFileLinesEnc",id:"IO-readFileLinesEnc",level:2},{value:"Synopsis",id:"synopsis-34",level:4},{value:"Description",id:"description-23",level:4},{value:"function remove",id:"IO-remove",level:2},{value:"function writeFile",id:"IO-writeFile",level:2},{value:"Synopsis",id:"synopsis-35",level:4},{value:"Description",id:"description-24",level:4},{value:"function writeFileBytes",id:"IO-writeFileBytes",level:2},{value:"Synopsis",id:"synopsis-36",level:4},{value:"function writeFileEnc",id:"IO-writeFileEnc",level:2},{value:"Synopsis",id:"synopsis-37",level:4},{value:"Description",id:"description-25",level:4},{value:"function md5HashFile",id:"IO-md5HashFile",level:2},{value:"Synopsis",id:"synopsis-38",level:4},{value:"Description",id:"description-26",level:4},{value:"function md5Hash",id:"IO-md5Hash",level:2},{value:"function createLink",id:"IO-createLink",level:2},{value:"function toBase64",id:"IO-toBase64",level:2},{value:"function copy",id:"IO-copy",level:2},{value:"function copyFile",id:"IO-copyFile",level:2},{value:"function copyDirectory",id:"IO-copyDirectory",level:2},{value:"function move",id:"IO-move",level:2},{value:"function arbLoc",id:"IO-arbLoc",level:2},{value:"data LocationChangeEvent",id:"IO-LocationChangeEvent",level:2},{value:"data LocationChangeType",id:"IO-LocationChangeType",level:2},{value:"data LocationType",id:"IO-LocationType",level:2},{value:"function watch",id:"IO-watch",level:2},{value:"function unwatch",id:"IO-unwatch",level:2}],d={toc:p};function u(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"import IO;")),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Library functions for input/output."),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"The following input/output functions are defined:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-changeEvent"},"changeEvent")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-created"},"created")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-deleted"},"deleted")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-directory"},"directory")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-file"},"file")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-modified"},"modified")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-LocationChangeEvent"},"LocationChangeEvent")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-LocationChangeType"},"LocationChangeType")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-LocationType"},"LocationType")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-appendToFile"},"appendToFile")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-appendToFileEnc"},"appendToFileEnc")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-arbLoc"},"arbLoc")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-bprintln"},"bprintln")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-canEncode"},"canEncode")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-charsets"},"charsets")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-copy"},"copy")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-copyDirectory"},"copyDirectory")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-copyFile"},"copyFile")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-createLink"},"createLink")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-created"},"created")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-exists"},"exists")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-find"},"find")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-iprint"},"iprint")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-iprintExp"},"iprintExp")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-iprintToFile"},"iprintToFile")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-iprintToString"},"iprintToString")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-iprintln"},"iprintln")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-iprintlnExp"},"iprintlnExp")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-isDirectory"},"isDirectory")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-isFile"},"isFile")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-lastModified"},"lastModified")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-listEntries"},"listEntries")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-md5Hash"},"md5Hash")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-md5HashFile"},"md5HashFile")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-mkDirectory"},"mkDirectory")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-move"},"move")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-print"},"print")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-printExp"},"printExp")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-println"},"println")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-printlnExp"},"printlnExp")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-readBase64"},"readBase64")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-readFile"},"readFile")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-readFileBytes"},"readFileBytes")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-readFileEnc"},"readFileEnc")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-readFileLines"},"readFileLines")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-readFileLinesEnc"},"readFileLinesEnc")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-registerLocations"},"registerLocations")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-remove"},"remove")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-resolveLocation"},"resolveLocation")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-rprint"},"rprint")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-rprintln"},"rprintln")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-setLastModified"},"setLastModified")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-toBase64"},"toBase64")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-touch"},"touch")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-unregisterLocations"},"unregisterLocations")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-unwatch"},"unwatch")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-uudecode"},"uudecode")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-uuencode"},"uuencode")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-watch"},"watch")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-writeBase64"},"writeBase64")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-writeFile"},"writeFile")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-writeFileBytes"},"writeFileBytes")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-writeFileEnc"},"writeFileEnc")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-writeFileLines"},"writeFileLines"))),(0,a.kt)("h2",{id:"IO-registerLocations"},"function registerLocations"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void registerLocations(str scheme, str authority, map[loc logical, loc physical] m)"))),(0,a.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,a.kt)("p",null,"register a logical file scheme including the resolution method via a table."),(0,a.kt)("h4",{id:"description-1"},"Description"),(0,a.kt)("p",null,"Logical source location schemes, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"|java+interface://JRE/java/util/List|")," are used for\nprecise qualified names of artifacts while abstracting from their physical location in a specific part\nof a file on disk or from some webserver or source repository location."),(0,a.kt)("p",null,"Using this function you can create your own schemes. The authority field is used for scoping the\nnames you wish to resolve to certain projects. This way one name can resolve to different locations\nin different projects."),(0,a.kt)("h4",{id:"benefits"},"Benefits"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Logical source locations are supported by IDE features such as hyperlinks"),(0,a.kt)("li",{parentName:"ul"},"Logical source locations are supported by all IO functions as well")),(0,a.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"repeated calls to registerLocations for the same ",(0,a.kt)("inlineCode",{parentName:"li"},"scheme")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"authority")," will overwrite the ",(0,a.kt)("inlineCode",{parentName:"li"},"m")," map."),(0,a.kt)("li",{parentName:"ul"},"the registry is an intentional memory leak; so make sure you use it wisely."),(0,a.kt)("li",{parentName:"ul"},"when the files references by the physical locations are being written to (edited, removed), then you\nmay expect problems. The registry is not automatically invalidated.")),(0,a.kt)("h2",{id:"IO-unregisterLocations"},"function unregisterLocations"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void unregisterLocations(str scheme, str authority)"))),(0,a.kt)("h4",{id:"synopsis-2"},"Synopsis"),(0,a.kt)("p",null,"undo the effect of ","[registerLocations]"),(0,a.kt)("h4",{id:"description-2"},"Description"),(0,a.kt)("p",null,"For debugging or for memory management you may wish to remove a lookup table."),(0,a.kt)("h2",{id:"IO-resolveLocation"},"function resolveLocation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"loc resolveLocation(loc l)"))),(0,a.kt)("h2",{id:"IO-appendToFile"},"function appendToFile"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void appendToFile(loc file, value V...) throws PathNotFound, IO"))),(0,a.kt)("h4",{id:"synopsis-3"},"Synopsis"),(0,a.kt)("p",null,"Append a value to a file."),(0,a.kt)("h4",{id:"description-3"},"Description"),(0,a.kt)("p",null,"Append a textual representation of some values to an existing or a newly created file:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If a value is a simple string, the quotes are removed and the contents are de-escaped."),(0,a.kt)("li",{parentName:"ul"},"If a value has a non-terminal type, the parse tree is unparsed to produce a value."),(0,a.kt)("li",{parentName:"ul"},"All other values are printed as-is."),(0,a.kt)("li",{parentName:"ul"},"Each value is terminated by a newline character.")),(0,a.kt)("h4",{id:"encoding"},"Encoding"),(0,a.kt)("p",null,"The existing file can be stored using any character set possible, if you know the character set, please use ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-appendToFileEnc"},"append to file enc"),".\nElse the same method of deciding the character set is used as in ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-readFile"},"read file"),"."),(0,a.kt)("h4",{id:"pitfalls-1"},"Pitfalls"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The same encoding pitfalls as the ",(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-readFile"},"read file")," function.")),(0,a.kt)("h2",{id:"IO-appendToFileEnc"},"function appendToFileEnc"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void appendToFileEnc(loc file, str charset, value V...) throws PathNotFound, IO"))),(0,a.kt)("h4",{id:"synopsis-4"},"Synopsis"),(0,a.kt)("p",null,"Append a value to a file."),(0,a.kt)("h4",{id:"description-4"},"Description"),(0,a.kt)("p",null,"Append a textual representation of some values to an existing or a newly created file:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If a value is a simple string, the quotes are removed and the contents are de-escaped."),(0,a.kt)("li",{parentName:"ul"},"If a value has a non-terminal type, the parse tree is unparsed to produce a value."),(0,a.kt)("li",{parentName:"ul"},"All other values are printed as-is."),(0,a.kt)("li",{parentName:"ul"},"Each value is terminated by a newline character.")),(0,a.kt)("p",null,"Files are encoded using the charset provided."),(0,a.kt)("h2",{id:"IO-charsets"},"function charsets"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"set[str] charsets()"))),(0,a.kt)("h4",{id:"synopsis-5"},"Synopsis"),(0,a.kt)("p",null,"Returns all available character sets."),(0,a.kt)("h2",{id:"IO-canEncode"},"function canEncode"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"set[str] canEncode(str charset)"))),(0,a.kt)("h4",{id:"synopsis-6"},"Synopsis"),(0,a.kt)("p",null,"Returns whether this charset can be used for encoding (use with ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-writeFile"},"write file"),")"),(0,a.kt)("h2",{id:"IO-bprintln"},"function bprintln"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool bprintln(value arg)"))),(0,a.kt)("h4",{id:"synopsis-7"},"Synopsis"),(0,a.kt)("p",null,"Print a value and return true."),(0,a.kt)("h4",{id:"description-5"},"Description"),(0,a.kt)("p",null,"Print a value and return ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". This is useful for debugging complex Boolean expressions or comprehensions.\nThe only difference between this function and ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-println"},"println")," is that its return type is ",(0,a.kt)("inlineCode",{parentName:"p"},"bool")," rather than ",(0,a.kt)("inlineCode",{parentName:"p"},"void"),"."),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>bprintln("Hello World");\nHello World\nbool: true\n')),(0,a.kt)("h2",{id:"IO-exists"},"function exists"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool exists(loc file)"))),(0,a.kt)("h4",{id:"synopsis-8"},"Synopsis"),(0,a.kt)("p",null,"Check whether a given location exists."),(0,a.kt)("h4",{id:"description-6"},"Description"),(0,a.kt)("p",null,"Check whether a certain location exists, i.e., whether an actual file is associated with it."),(0,a.kt)("h4",{id:"examples-1"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import IO;\nok\n")),(0,a.kt)("p",null,"Does the library file ",(0,a.kt)("inlineCode",{parentName:"p"},"IO.rsc")," exist?"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>exists(|std:///IO.rsc|);\nbool: true\n")),(0,a.kt)("h2",{id:"IO-find"},"function find"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"loc find(str name, list[loc] path) throws PathNotFound"))),(0,a.kt)("h4",{id:"synopsis-9"},"Synopsis"),(0,a.kt)("p",null,"Find a named file in a list of locations."),(0,a.kt)("h4",{id:"examples-2"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import IO;\nok\n")),(0,a.kt)("p",null,"Find the file ",(0,a.kt)("inlineCode",{parentName:"p"},"IO.rsc")," in the standard library:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},'rascal>find("IO.rsc", [|std:///|]);\nloc: |std:///IO.rsc|\n')),(0,a.kt)("h2",{id:"IO-isDirectory"},"function isDirectory"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isDirectory(loc file)"))),(0,a.kt)("h4",{id:"synopsis-10"},"Synopsis"),(0,a.kt)("p",null,"Check whether a given location is a directory."),(0,a.kt)("h4",{id:"description-7"},"Description"),(0,a.kt)("p",null,"Check whether the location ",(0,a.kt)("inlineCode",{parentName:"p"},"file")," is a directory."),(0,a.kt)("h2",{id:"IO-iprint"},"function iprint"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void iprint(value arg, int lineLimit = 1000)"))),(0,a.kt)("h4",{id:"synopsis-11"},"Synopsis"),(0,a.kt)("p",null,"Print an indented representation of a value."),(0,a.kt)("h4",{id:"description-8"},"Description"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-iprintExp"},"iprintExp")," for a version that returns its argument as result\nand ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-iprintln"},"iprintln")," for a version that adds a newline\nand ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-iprintToFile"},"iprintToFile")," for a version that prints to a file."),(0,a.kt)("h4",{id:"examples-3"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>iprint(["fruits", ("spider" : 8, "snake" : 0), [10, 20, 30]]);\n[\n  "fruits",\n  ("snake":0,"spider":8),\n  [10,20,30]\n]\nok\n')),(0,a.kt)("h2",{id:"IO-iprintToFile"},"function iprintToFile"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void iprintToFile(loc file, value arg)"))),(0,a.kt)("h4",{id:"synopsis-12"},"Synopsis"),(0,a.kt)("p",null,"Print an indented representation of a value to the specified location."),(0,a.kt)("h4",{id:"description-9"},"Description"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-iprint"},"iprint")," for a version that displays the result on the console\nand ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-iprintExp"},"iprintExp")," for a version that returns its argument as result\nand ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-iprintln"},"iprintln")," for a version that adds a newline."),(0,a.kt)("h4",{id:"examples-4"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>iprintToFile(|file:///tmp/fruits.txt|, ["fruits", ("spider" : 8, "snake" : 0), [10, 20, 30]]);\nok\n')),(0,a.kt)("h2",{id:"IO-iprintToString"},"function iprintToString"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"str iprintToString(value arg)"))),(0,a.kt)("h2",{id:"IO-iprintExp"},"function iprintExp"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"&T iprintExp(&T v)"))),(0,a.kt)("h4",{id:"synopsis-13"},"Synopsis"),(0,a.kt)("p",null,"Print an indented representation of a value and returns the value as result."),(0,a.kt)("h4",{id:"description-10"},"Description"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-iprintlnExp"},"iprintlnExp")," for a version that adds a newline."),(0,a.kt)("h4",{id:"examples-5"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>iprintExp(["fruits", ("spider" : 8, "snake" : 0), [10, 20, 30]]);\n[\n  "fruits",\n  ("snake":0,"spider":8),\n  [10,20,30]\n]\nlist[value]: [\n  "fruits",\n  ("snake":0,"spider":8),\n  [10,20,30]\n]\n')),(0,a.kt)("h2",{id:"IO-iprintlnExp"},"function iprintlnExp"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"&T iprintlnExp(&T v)"))),(0,a.kt)("h4",{id:"synopsis-14"},"Synopsis"),(0,a.kt)("p",null,"Print an indented representation of a value followed by a newline and returns the value as result."),(0,a.kt)("h4",{id:"description-11"},"Description"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-iprintExp"},"iprintExp")," for a version that does not add a newline."),(0,a.kt)("h4",{id:"examples-6"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>iprintlnExp(["fruits", ("spider" : 8, "snake" : 0), [10, 20, 30]]);\n[\n  "fruits",\n  ("snake":0,"spider":8),\n  [10,20,30]\n]\nlist[value]: [\n  "fruits",\n  ("snake":0,"spider":8),\n  [10,20,30]\n]\n')),(0,a.kt)("h2",{id:"IO-iprintln"},"function iprintln"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void iprintln(value arg, int lineLimit = 1000)"))),(0,a.kt)("h4",{id:"synopsis-15"},"Synopsis"),(0,a.kt)("p",null,"Print a indented representation of a value and add a newline at the end."),(0,a.kt)("h4",{id:"description-12"},"Description"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-iprintlnExp"},"iprintlnExp")," for a version that returns its argument as result\nand ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-iprint"},"iprint")," for a version that does not add a newline."),(0,a.kt)("p",null,"By default we only print the first 1000 lines, if you want to print larger values, either\nuse ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/ValueIO#ValueIO-writeTextValueFile"},"writeTextValueFile")," or change the limit with the lineLimit parameter."),(0,a.kt)("h4",{id:"examples-7"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>iprintln(["fruits", ("spider" : 8, "snake" : 0), [10, 20, 30]]);\n[\n  "fruits",\n  ("snake":0,"spider":8),\n  [10,20,30]\n]\nok\nrascal>iprintln([ {"hi"} | i <- [0..1000]], lineLimit = 10);\n[\n  {"hi"},\n  {"hi"},\n  {"hi"},\n  {"hi"},\n  {"hi"},\n  {"hi"},\n  {"hi"},\n  {"hi"},\n  {"hi"},\n...\nok\n')),(0,a.kt)("h2",{id:"IO-isFile"},"function isFile"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool isFile(loc file)"))),(0,a.kt)("h4",{id:"synopsis-16"},"Synopsis"),(0,a.kt)("p",null,"Check whether a given location is actually a file (and not a directory)."),(0,a.kt)("h4",{id:"description-13"},"Description"),(0,a.kt)("p",null,"Check whether location ",(0,a.kt)("inlineCode",{parentName:"p"},"file")," is actually a file."),(0,a.kt)("h2",{id:"IO-lastModified"},"function lastModified"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"datetime lastModified(loc file)"))),(0,a.kt)("h4",{id:"synopsis-17"},"Synopsis"),(0,a.kt)("p",null,"Last modification date of a location."),(0,a.kt)("h4",{id:"description-14"},"Description"),(0,a.kt)("p",null,"Returns last modification time of the file at location ",(0,a.kt)("inlineCode",{parentName:"p"},"file"),"."),(0,a.kt)("h4",{id:"examples-8"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import IO;\nok\n")),(0,a.kt)("p",null,"Determine the last modification date of the Rascal standard library:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>lastModified(|std:///IO.rsc|);\ndatetime: $2022-09-29T15:24:28.800+00:00$\n")),(0,a.kt)("h2",{id:"IO-created"},"function created"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"datetime created(loc file)"))),(0,a.kt)("h4",{id:"synopsis-18"},"Synopsis"),(0,a.kt)("p",null,"Creation datetime of a location."),(0,a.kt)("h4",{id:"description-15"},"Description"),(0,a.kt)("p",null,"Returns the creation time of the file at location ",(0,a.kt)("inlineCode",{parentName:"p"},"file"),"."),(0,a.kt)("h4",{id:"examples-9"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import IO;\nok\n")),(0,a.kt)("p",null,"Determine the last modification date of the Rascal standard library:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>created(|std:///IO.rsc|);\ndatetime: $2022-09-29T15:24:28.800+00:00$\n")),(0,a.kt)("h2",{id:"IO-touch"},"function touch"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void touch(loc file)"))),(0,a.kt)("h4",{id:"synopsis-19"},"Synopsis"),(0,a.kt)("p",null,"Set the modification date of a file to ",(0,a.kt)("inlineCode",{parentName:"p"},"now")," or create the file if it did not exist yet"),(0,a.kt)("h2",{id:"IO-setLastModified"},"function setLastModified"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void setLastModified(loc file, datetime timestamp)"))),(0,a.kt)("h4",{id:"synopsis-20"},"Synopsis"),(0,a.kt)("p",null,"Set the modification date of a file to the timestamp"),(0,a.kt)("h2",{id:"IO-listEntries"},"function listEntries"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list[str] listEntries(loc file)"))),(0,a.kt)("h4",{id:"synopsis-21"},"Synopsis"),(0,a.kt)("p",null,"List the entries in a directory."),(0,a.kt)("h4",{id:"description-16"},"Description"),(0,a.kt)("p",null,"List the entries in directory ",(0,a.kt)("inlineCode",{parentName:"p"},"file"),"."),(0,a.kt)("h4",{id:"examples-10"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",error",",error":!0},"rascal>import IO;\nok\n")),(0,a.kt)("p",null,"List all entries in the standard library:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue,error",",continue,error":!0},'rascal>listEntries(|std:///|);\nlist[str]: ["String.rsc","Location.rsc","demo","Prelude$Less.class","Prelude$ReleasableCallback.class","analysis","Set.rsc","util","Node.rsc","Exception.rsc","Type.class","Message.rsc","Prelude$ByteBufferBackedInputStream.class","Prelude$Sorting.class","Prelude.class","ValueIO.rsc","Prelude$NodeComparator.class","lang","Type.rsc","index.md","Prelude$3.class","Relation.rsc","Prelude$Distance.class","DateTime.rsc","Boolean.rsc","Prelude$1.class","ListRelation.rsc","List.rsc","resource","Content.rsc","Grammar.rsc","Prelude.rsc","Prelude$Backtrack.class","ParseTree.rsc","Prelude$2.class","IO.rsc","Map.rsc"]\n')),(0,a.kt)("h2",{id:"IO-mkDirectory"},"function mkDirectory"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void mkDirectory(loc file) throws PathNotFound, IO"))),(0,a.kt)("h4",{id:"synopsis-22"},"Synopsis"),(0,a.kt)("p",null,"Create a new directory."),(0,a.kt)("h4",{id:"description-17"},"Description"),(0,a.kt)("p",null,"Create a directory at location ",(0,a.kt)("inlineCode",{parentName:"p"},"file"),"."),(0,a.kt)("h2",{id:"IO-print"},"function print"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void print(value arg)"))),(0,a.kt)("h4",{id:"synopsis-23"},"Synopsis"),(0,a.kt)("p",null,"Print a value without subsequent newline."),(0,a.kt)("h4",{id:"description-18"},"Description"),(0,a.kt)("p",null,"Print a value on the output stream.\nSee ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-println"},"println")," for a version that adds a newline\nand ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-printExp"},"printExp")," for a version that returns its argument as value."),(0,a.kt)("h4",{id:"examples-11"},"Examples"),(0,a.kt)("p",null,"Note that the only difference with ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-println"},"println")," is that no newline is added after the value is printed"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>print("Hello World");\nHello World\nok\n')),(0,a.kt)("p",null,"NOTE: Since ",(0,a.kt)("inlineCode",{parentName:"p"},"print")," does not add a newline, the prompt ",(0,a.kt)("inlineCode",{parentName:"p"},"ok")," appears at a weird place, i.e.,\nglued to the output of ",(0,a.kt)("inlineCode",{parentName:"p"},"print"),"."),(0,a.kt)("h2",{id:"IO-printExp"},"function printExp"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"&T printExp(&T v)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"&T printExp(str msg, &T v)"))),(0,a.kt)("h4",{id:"synopsis-24"},"Synopsis"),(0,a.kt)("p",null,"Print a value and return it as result."),(0,a.kt)("h4",{id:"examples-12"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>printExp(3.14);\n3.14\nreal: 3.14\nrascal>printExp("The value of PI is approximately ", 3.14);\nThe value of PI is approximately 3.14\nreal: 3.14\n')),(0,a.kt)("h2",{id:"IO-println"},"function println"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void println(value arg)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void println()"))),(0,a.kt)("h4",{id:"synopsis-25"},"Synopsis"),(0,a.kt)("p",null,"Print a value to the output stream and add a newline."),(0,a.kt)("h4",{id:"description-19"},"Description"),(0,a.kt)("p",null,"Print a value on the output stream followed by a newline.\nSee ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-print"},"print")," for a version that does not add a newline\nand ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-printlnExp"},"printlnExp")," for a version that returns its argument as value."),(0,a.kt)("h4",{id:"examples-13"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>println("Hello World");\nHello World\nok\n')),(0,a.kt)("p",null,"Introduce variable S and print it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},'rascal>S = "Hello World";\nstr: "Hello World"\nrascal>println(S);\nHello World\nok\n')),(0,a.kt)("p",null,"Introduce variable L and print it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},'rascal>L = ["a", "b", "c"];\nlist[str]: ["a","b","c"]\nrascal>println(L);\n["a","b","c"]\nok\n')),(0,a.kt)("p",null,"Use a string template to print several values:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},'rascal>println("<S>: <L>");\nHello World: ["a","b","c"]\nok\n')),(0,a.kt)("p",null,"Just print a newline"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>println();\nok\n")),(0,a.kt)("h2",{id:"IO-printlnExp"},"function printlnExp"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"&T printlnExp(&T v)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"&T printlnExp(str msg, &T v)"))),(0,a.kt)("h4",{id:"synopsis-26"},"Synopsis"),(0,a.kt)("p",null,"Print a value followed by a newline and return it as result."),(0,a.kt)("h4",{id:"examples-14"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import IO;\nok\nrascal>printlnExp(3.14);\n3.14\nreal: 3.14\nrascal>printlnExp("The value of PI is approximately ", 3.14);\nThe value of PI is approximately 3.14\nreal: 3.14\n')),(0,a.kt)("p",null,"NOTE: Since ",(0,a.kt)("inlineCode",{parentName:"p"},"printExp")," does no produce a newline after its output, the result prompt ",(0,a.kt)("inlineCode",{parentName:"p"},"real: 3.14")," is glued to the\noutput of ",(0,a.kt)("inlineCode",{parentName:"p"},"printExp"),"."),(0,a.kt)("h2",{id:"IO-rprint"},"function rprint"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void rprint(value arg)"))),(0,a.kt)("h4",{id:"synopsis-27"},"Synopsis"),(0,a.kt)("p",null,"Raw print of a value."),(0,a.kt)("h4",{id:"pitfalls-2"},"Pitfalls"),(0,a.kt)("p",null,"This function is only available for internal use in the Rascal development team."),(0,a.kt)("h2",{id:"IO-rprintln"},"function rprintln"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void rprintln(value arg)"))),(0,a.kt)("h4",{id:"synopsis-28"},"Synopsis"),(0,a.kt)("p",null,"Raw print of a value followed by newline."),(0,a.kt)("h4",{id:"pitfalls-3"},"Pitfalls"),(0,a.kt)("p",null,"This function is only available for internal use in the Rascal development team."),(0,a.kt)("h2",{id:"IO-readFile"},"function readFile"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"str readFile(loc file) throws PathNotFound, IO"))),(0,a.kt)("h4",{id:"synopsis-29"},"Synopsis"),(0,a.kt)("p",null,"Read the contents of a location and return it as string value."),(0,a.kt)("h4",{id:"description-20"},"Description"),(0,a.kt)("p",null,"Return the contents of a file location as a single string.\nAlso see ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-readFileLines"},"read file lines"),"."),(0,a.kt)("h4",{id:"encoding-1"},"Encoding"),(0,a.kt)("p",null,"A text file can be encoded in many different character sets, most common are UTF8, ISO-8859-1, and ASCII.\nIf you know the encoding of the file, please use the ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-readFileEnc"},"read file enc")," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-readFileLinesEnc"},"read file lines enc")," overloads.\nIf you do not know, we try to detect this. This detection is explained below:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If the implementation of the used scheme in the ",(0,a.kt)("a",{parentName:"li",href:"/docs/Rascal/Expressions/Values/Location/"},"location"),"\n(e.g.,",(0,a.kt)("inlineCode",{parentName:"li"},"|project:///|"),") defines the charset of the file then this is used."),(0,a.kt)("li",{parentName:"ul"},"Otherwise if the file contains a UTF8/16/32 ",(0,a.kt)("a",{parentName:"li",href:"http://en.wikipedia.org/wiki/Byte_order_mark"},"BOM"),",\nthen this is used."),(0,a.kt)("li",{parentName:"ul"},"As a last resort the IO library uses heuristics to determine if UTF-8 or UTF-32 could work:\n",(0,a.kt)("strong",{parentName:"li"},"  Are the first 32 bytes valid UTF-8? Then use UTF-8.\n"),"  Are the first 32 bytes valid UTF-32? Then use UTF-32."),(0,a.kt)("li",{parentName:"ul"},"Finally, we fall back to the system default (as given by the Java Runtime Environment).")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"To summarize"),", we use UTF-8 by default, except if the ",(0,a.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/Values/Location/"},"location")," has available meta-data, the file contains a BOM, or\nthe first 32 bytes of the file are not valid UTF-8."),(0,a.kt)("h4",{id:"pitfalls-4"},"Pitfalls"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In case encoding is not known, we try to estimate as best as we can."),(0,a.kt)("li",{parentName:"ul"},"We default to UTF-8, if the file was not encoded in UTF-8 but the first characters were valid UTF-8,\nyou might get an decoding error or just strange looking characters.")),(0,a.kt)("h2",{id:"IO-readFileEnc"},"function readFileEnc"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"str readFileEnc(loc file, str charset) throws PathNotFound, IO"))),(0,a.kt)("h4",{id:"synopsis-30"},"Synopsis"),(0,a.kt)("p",null,"Read the contents of a location and return it as string value."),(0,a.kt)("h4",{id:"description-21"},"Description"),(0,a.kt)("p",null,"Return the contents (decoded using the Character set supplied) of a file location as a single string.\nAlso see ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-readFileLinesEnc"},"read file lines enc"),"."),(0,a.kt)("h2",{id:"IO-readBase64"},"function readBase64"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"str readBase64(loc file) throws PathNotFound, IO"))),(0,a.kt)("h2",{id:"IO-uuencode"},"function uuencode"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"str uuencode(loc file)"))),(0,a.kt)("h2",{id:"IO-writeBase64"},"function writeBase64"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void writeBase64(loc file, str content) throws PathNotFound, IO"))),(0,a.kt)("h2",{id:"IO-uudecode"},"function uudecode"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void uudecode(loc file, str content)"))),(0,a.kt)("h2",{id:"IO-readFileBytes"},"function readFileBytes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list[int] readFileBytes(loc file) throws PathNotFound, IO"))),(0,a.kt)("h4",{id:"synopsis-31"},"Synopsis"),(0,a.kt)("p",null,"Read the contents of a file and return it as a list of bytes."),(0,a.kt)("h2",{id:"IO-readFileLines"},"function readFileLines"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list[str] readFileLines(loc file) throws PathNotFound, IO"))),(0,a.kt)("h4",{id:"synopsis-32"},"Synopsis"),(0,a.kt)("p",null,"Read the contents of a file location and return it as a list of strings."),(0,a.kt)("h4",{id:"description-22"},"Description"),(0,a.kt)("p",null,"Return the contents of a file location as a list of lines.\nAlso see ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-readFile"},"read file"),"."),(0,a.kt)("h4",{id:"encoding-2"},"Encoding"),(0,a.kt)("p",null,"Look at ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-readFile"},"read file")," to understand how this function chooses the character set. If you know the character set used, please use ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-readFileLinesEnc"},"read file lines enc"),"."),(0,a.kt)("h4",{id:"pitfalls-5"},"Pitfalls"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In case encoding is not known, we try to estimate as best as we can (see ","[readFile]",")."),(0,a.kt)("li",{parentName:"ul"},"We default to UTF-8, if the file was not encoded in UTF-8 but the first characters were valid UTF-8,\nyou might get an decoding error or just strange looking characters (see ",(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-readFile"},"read file"),").")),(0,a.kt)("h2",{id:"IO-writeFileLines"},"function writeFileLines"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void writeFileLines(loc file, list[str] lines)"))),(0,a.kt)("h4",{id:"synopsis-33"},"Synopsis"),(0,a.kt)("p",null,"Writes a list of strings to a file, where each separate string is ended with a newline"),(0,a.kt)("h4",{id:"benefits-1"},"Benefits"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"mirrors ",(0,a.kt)("a",{parentName:"li",href:"/docs/Library/IO#IO-readFileLines"},"read file lines")," in its functionality")),(0,a.kt)("h4",{id:"pitfalls-6"},"Pitfalls"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"if the individual elements of the list also contain newlines, the output may have more lines than list elements")),(0,a.kt)("h2",{id:"IO-readFileLinesEnc"},"function readFileLinesEnc"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list[str] readFileLinesEnc(loc file, str charset) throws PathNotFound, IO"))),(0,a.kt)("h4",{id:"synopsis-34"},"Synopsis"),(0,a.kt)("p",null,"Read the contents of a file location and return it as a list of strings."),(0,a.kt)("h4",{id:"description-23"},"Description"),(0,a.kt)("p",null,"Return the contents (decoded using the Character set supplied) of a file location as a list of lines.\nAlso see ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-readFileLines"},"read file lines"),"."),(0,a.kt)("h2",{id:"IO-remove"},"function remove"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void remove(loc file, bool recursive=true) throws IO"))),(0,a.kt)("h2",{id:"IO-writeFile"},"function writeFile"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void writeFile(loc file, value V...) throws PathNotFound, IO"))),(0,a.kt)("h4",{id:"synopsis-35"},"Synopsis"),(0,a.kt)("p",null,"Write values to a file."),(0,a.kt)("h4",{id:"description-24"},"Description"),(0,a.kt)("p",null,"Write a textual representation of some values to a file:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If a value is a simple string, the quotes are removed and the contents are de-escaped."),(0,a.kt)("li",{parentName:"ul"},"If a value has a non-terminal type, the parse tree is unparsed to produce a value."),(0,a.kt)("li",{parentName:"ul"},"All other values are printed as-is."),(0,a.kt)("li",{parentName:"ul"},"Each value is terminated by a newline character.")),(0,a.kt)("p",null,"Files are encoded in UTF-8, in case this is not desired, use ",(0,a.kt)("a",{parentName:"p",href:"/docs/Library/IO#IO-writeFileEnc"},"write file enc"),"."),(0,a.kt)("h2",{id:"IO-writeFileBytes"},"function writeFileBytes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void writeFileBytes(loc file, list[int] bytes) throws PathNotFound, IO"))),(0,a.kt)("h4",{id:"synopsis-36"},"Synopsis"),(0,a.kt)("p",null,"Write a list of bytes to a file."),(0,a.kt)("h2",{id:"IO-writeFileEnc"},"function writeFileEnc"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void writeFileEnc(loc file, str charset, value V...) throws PathNotFound, IO"))),(0,a.kt)("h4",{id:"synopsis-37"},"Synopsis"),(0,a.kt)("p",null,"Write values to a file."),(0,a.kt)("h4",{id:"description-25"},"Description"),(0,a.kt)("p",null,"Write a textual representation of some values to a file:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If a value is a simple string, the quotes are removed and the contents are de-escaped."),(0,a.kt)("li",{parentName:"ul"},"If a value has a non-terminal type, the parse tree is unparsed to produce a value."),(0,a.kt)("li",{parentName:"ul"},"All other values are printed as-is."),(0,a.kt)("li",{parentName:"ul"},"Each value is terminated by a newline character.")),(0,a.kt)("p",null,"Files are encoded using the charset provided."),(0,a.kt)("h2",{id:"IO-md5HashFile"},"function md5HashFile"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"str md5HashFile(loc file) throws PathNotFound, IO"))),(0,a.kt)("h4",{id:"synopsis-38"},"Synopsis"),(0,a.kt)("p",null,"Read the contents of a location and return its MD5 hash."),(0,a.kt)("h4",{id:"description-26"},"Description"),(0,a.kt)("p",null,"MD5 hash the contents of a file location."),(0,a.kt)("h2",{id:"IO-md5Hash"},"function md5Hash"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"str md5Hash(value v)"))),(0,a.kt)("h2",{id:"IO-createLink"},"function createLink"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"str createLink(str title, str target)"))),(0,a.kt)("h2",{id:"IO-toBase64"},"function toBase64"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"str toBase64(loc file) throws PathNotFound, IO"))),(0,a.kt)("h2",{id:"IO-copy"},"function copy"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void copy(loc source, loc target, bool recursive=false, bool overwrite=true) throws IO"))),(0,a.kt)("h2",{id:"IO-copyFile"},"function copyFile"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void copyFile(loc source, loc target)"))),(0,a.kt)("h2",{id:"IO-copyDirectory"},"function copyDirectory"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void copyDirectory(loc source, loc target)"))),(0,a.kt)("h2",{id:"IO-move"},"function move"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void move(loc source, loc target, bool overwrite=true) throws IO"))),(0,a.kt)("h2",{id:"IO-arbLoc"},"function arbLoc"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"loc arbLoc()"))),(0,a.kt)("h2",{id:"IO-LocationChangeEvent"},"data LocationChangeEvent"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"data LocationChangeEvent  \n     = changeEvent(loc src, LocationChangeType changeType, LocationType \\type)\n     ;\n")),(0,a.kt)("h2",{id:"IO-LocationChangeType"},"data LocationChangeType"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"data LocationChangeType  \n     = created()\n     | deleted()\n     | modified()\n     ;\n")),(0,a.kt)("h2",{id:"IO-LocationType"},"data LocationType"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rascal"},"data LocationType  \n     = file()\n     | directory()\n     ;\n")),(0,a.kt)("h2",{id:"IO-watch"},"function watch"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void watch(loc src, bool recursive, void (LocationChangeEvent event) watcher)"))),(0,a.kt)("h2",{id:"IO-unwatch"},"function unwatch"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"void unwatch(loc src, bool recursive, void (LocationChangeEvent event) watcher)"))))}u.isMDXComponent=!0}}]);