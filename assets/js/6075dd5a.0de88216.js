"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[49030],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>b});var n=r(67294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(r),b=l,d=m["".concat(s,".").concat(b)]||m[b]||c[b]||a;return r?n.createElement(d,o(o({ref:t},p),{},{components:r})):n.createElement(d,o({ref:t},p))}));function b(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=r.length,o=new Array(a);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var u=2;u<a;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},86216:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var n=r(83117),l=(r(67294),r(3905));const a={title:"module lang::smtlib2::solve::Z3"},o=void 0,i={unversionedId:"Library/lang/smtlib2/solve/Z3",id:"Library/lang/smtlib2/solve/Z3",title:"module lang::smtlib2::\\solve::Z3",description:"Usage",source:"@site/docs/Library/lang/smtlib2/solve/Z3.md",sourceDirName:"Library/lang/smtlib2/solve",slug:"/Library/lang/smtlib2/solve/Z3",permalink:"/docs/Library/lang/smtlib2/solve/Z3",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Library/lang/smtlib2/solve/Z3.md",tags:[],version:"current",frontMatter:{title:"module lang::smtlib2::\\solve::Z3"},sidebar:"tutorialSidebar",previous:{title:"lang::smtlib2::solve",permalink:"/docs/Library/lang/smtlib2/solve/"},next:{title:"lang::smtlib2::theory",permalink:"/docs/Library/lang/smtlib2/theory/"}},s={},u=[{value:"Usage",id:"usage",level:4},{value:"function startZ3",id:"lang-smtlib2-solve-Z3-startZ3",level:2},{value:"function stopZ3",id:"lang-smtlib2-solve-Z3-stopZ3",level:2},{value:"function \run",id:"lang-smtlib2-solve-Z3-\run",level:2},{value:"function read",id:"lang-smtlib2-solve-Z3-read",level:2},{value:"function printIfDebug",id:"lang-smtlib2-solve-Z3-printIfDebug",level:2}],p={toc:u};function c(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"usage"},"Usage"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import lang::smtlib2::\\solve::Z3;")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Synopsis: Wrapper around the Microsoft Z3 solver. Lets you execute SMT statements (as SMTLIBv2 AST commands) and returns the found answer (if any). \n")),(0,l.kt)("h2",{id:"lang-smtlib2-\\solve-Z3-startZ3"},"function startZ3"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'PID startZ3(str pathToZ3 = getSystemProperty("solver.z3.path"))'))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Starts the Z3 solver.\nTo run the solver the path to Z3 needs to be configure either by adding the -Dsolver.z3.path=<local.path.to.z3> to your eclipse.ini configuration or by supplying it \nwhen you call the solver using the keyword parameter 'pathToZ3'\n")),(0,l.kt)("h2",{id:"lang-smtlib2-\\solve-Z3-stopZ3"},"function stopZ3"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"void stopZ3(PID z3)"))),(0,l.kt)("h2",{id:"lang-smtlib2-\\solve-Z3-\\run"},"function \\run"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Response \\run(PID z3, Script script, bool debug = false)"))),(0,l.kt)("h2",{id:"lang-smtlib2-\\solve-Z3-read"},"function read"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str read(PID z3)"))),(0,l.kt)("h2",{id:"lang-smtlib2-\\solve-Z3-printIfDebug"},"function printIfDebug"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"void printIfDebug(str line, bool debug)"))))}c.isMDXComponent=!0}}]);