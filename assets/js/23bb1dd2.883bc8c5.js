"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[28655],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),p=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(a),d=n,g=m["".concat(o,".").concat(d)]||m[d]||u[d]||i;return a?r.createElement(g,s(s({ref:t},c),{},{components:a})):r.createElement(g,s({ref:t},c))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,s[1]=l;for(var p=2;p<i;p++)s[p]=a[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},79015:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=a(87462),n=(a(67294),a(3905));const i={title:"Ambiguity"},s=void 0,l={unversionedId:"RunTimeErrors/RuntimeExceptions/Ambiguity/index",id:"RunTimeErrors/RuntimeExceptions/Ambiguity/index",title:"Ambiguity",description:"Synopsis",source:"@site/docs/RunTimeErrors/RuntimeExceptions/Ambiguity/index.md",sourceDirName:"RunTimeErrors/RuntimeExceptions/Ambiguity",slug:"/RunTimeErrors/RuntimeExceptions/Ambiguity/",permalink:"/docs/RunTimeErrors/RuntimeExceptions/Ambiguity/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/RunTimeErrors/RuntimeExceptions/Ambiguity/index.md",tags:[],version:"current",frontMatter:{title:"Ambiguity"},sidebar:"tutorialSidebar",previous:{title:"Runtime Exceptions",permalink:"/docs/RunTimeErrors/RuntimeExceptions/"},next:{title:"Arithmetic Exception",permalink:"/docs/RunTimeErrors/RuntimeExceptions/ArithmeticException/"}},o={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"synopsis"},"Synopsis"),(0,n.kt)("p",null,"Ambiguity found in parsed text. "),(0,n.kt)("h4",{id:"description"},"Description"),(0,n.kt)("p",null,"Rascal supports general context-free grammars and also provides\nvarious mechanisms to disambiguate them."),(0,n.kt)("p",null,"This exception is thrown when, given a grammar and a sentence,\nan ambiguity is found while parsing the sentence according to that grammar."),(0,n.kt)("h4",{id:"examples"},"Examples"),(0,n.kt)("p",null,"First declare a very simple expression language that should\nrecognize expressions like ",(0,n.kt)("inlineCode",{parentName:"p"},"a"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"a+a"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"a+(a+a)"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>syntax A = "a";\nok\nrascal>syntax E = A | "(" E ")" | E "+" E;\nok\n')),(0,n.kt)("p",null,"Next, import the ParseTree module that provides a ",(0,n.kt)("inlineCode",{parentName:"p"},"parse")," function that we will use:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},"rascal>import ParseTree;\nok\n")),(0,n.kt)("p",null,"Entering a first expression goes well, except that the parser generator already predicts future ambiguity. So it prints a warning."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:"-error,continue","-error,continue":!0},'rascal>parse(#E, "a+a");\nE: (E) `a+a`\n')),(0,n.kt)("p",null,"The following example triggers the predicted ambiguity indeed:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue,errors",",continue,errors":!0},'rascal>parse(#E, "a+a+a");\n|TODO:///|: Ambiguity(\n  |unknown:///|(0,5,<1,0>,<1,5>),\n  "E",\n  "a+a+a")\nok\n')),(0,n.kt)("p",null,"The conclusion is that there are two parses here: ",(0,n.kt)("inlineCode",{parentName:"p"},"a+(a+a)")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"(a+a)+a"),",\nbecause we did forget to define the associativity of the ",(0,n.kt)("inlineCode",{parentName:"p"},"+")," operator."),(0,n.kt)("p",null,"Let's fix this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",errors",",errors":!0},'rascal>syntax A = "a";\nok\nrascal>syntax E = A | "(" E ")" | left E "+" E;\nok\nrascal>import ParseTree;\nok\nrascal>parse(#E, "a+a+a");\nE: (E) `a+a+a`\n')),(0,n.kt)("p",null,"However, one can also deal with ambiguity differently. For example we could have the parser build a tree\nfor all ambiguous interpretations and inspect the resulting data-structure:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",errors",",errors":!0},'rascal>syntax A = "a";\nok\nrascal>syntax E = A | "(" E ")" | left E "+" E | left E "*" E;\nok\nrascal>import ParseTree;\nok\nrascal>t = parse(#E, "a+a*a", allowAmbiguity=true);\nE: (E) `a+a*a`\n')),(0,n.kt)("p",null,"Is the forest indeed ambiguous?"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>/amb(_) := t\nbool: true\n")),(0,n.kt)("p",null,"How many alternatives?"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import Set;\nok\nrascal>import IO;\nok\nrascal>/amb(a) := t ? size(a) : 0; \nint: 2\n")),(0,n.kt)("p",null,"Which rules are at the top of the alternatives?"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>if (/amb({a1, a2}) := t) \n>>>>>>>  println("alternative 1: <a1.prod>\n>>>>>>>          \'alternative 2: <a2.prod>");\nalternative 1: prod(sort("E"),[sort("E"),layouts("$default$"),lit("+"),layouts("$default$"),sort("E")],{assoc(left())})\nalternative 2: prod(sort("E"),[sort("E"),layouts("$default$"),lit("*"),layouts("$default$"),sort("E")],{assoc(left())})\nok\n')),(0,n.kt)("p",null,"Or, one could catch the ambiguity and report it like a ",(0,n.kt)("a",{parentName:"p",href:"/docs/RunTimeErrors/RuntimeExceptions/ParseError/"},"ParseError"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",continue",",continue":!0},'rascal>import IO;\nok\nrascal>try \n>>>>>>>  parse(#E, "a+a*a");\n>>>>>>>catch Ambiguity(loc l, str s, _): \n>>>>>>>  println("the input is ambiguous for <s> on line <l.begin.line>");\nthe input is ambiguous for E on line 1\nok\n')),(0,n.kt)("p",null,"Here are some pointers for further disambiguation help:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Rascal/Declarations/SyntaxDefinition/"},"Syntax Definitions"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/Rascal/Declarations/SyntaxDefinition/Disambiguation/"},"Disambiguation features"),".")))}u.isMDXComponent=!0}}]);