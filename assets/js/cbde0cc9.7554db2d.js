"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[26992],{3905:(e,a,n)=>{n.d(a,{Zo:()=>h,kt:()=>u});var s=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);a&&(s=s.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,s,r=function(e,a){if(null==e)return{};var n,s,r={},t=Object.keys(e);for(s=0;s<t.length;s++)n=t[s],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(s=0;s<t.length;s++)n=t[s],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=s.createContext({}),o=function(e){var a=s.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},h=function(e){var a=o(e.components);return s.createElement(p.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return s.createElement(s.Fragment,{},a)}},d=s.forwardRef((function(e,a){var n=e.components,r=e.mdxType,t=e.originalType,p=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),d=o(n),u=r,m=d["".concat(p,".").concat(u)]||d[u]||c[u]||t;return n?s.createElement(m,i(i({ref:a},h),{},{components:n})):s.createElement(m,i({ref:a},h))}));function u(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var t=n.length,i=new Array(t);i[0]=d;var l={};for(var p in a)hasOwnProperty.call(a,p)&&(l[p]=a[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var o=2;o<t;o++)i[o]=n[o];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},87376:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>t,metadata:()=>l,toc:()=>o});var s=n(83117),r=(n(67294),n(3905));const t={title:"module analysis::graphs::Graph"},i=void 0,l={unversionedId:"Library/analysis/graphs/Graph",id:"Library/analysis/graphs/Graph",title:"module analysis::graphs::Graph",description:"Usage",source:"@site/docs/Library/analysis/graphs/Graph.md",sourceDirName:"Library/analysis/graphs",slug:"/Library/analysis/graphs/Graph",permalink:"/docs/Library/analysis/graphs/Graph",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Library/analysis/graphs/Graph.md",tags:[],version:"current",frontMatter:{title:"module analysis::graphs::Graph"},sidebar:"tutorialSidebar",previous:{title:"analysis::graphs",permalink:"/docs/Library/analysis/graphs/"},next:{title:"module analysis::graphs::LabeledGraph",permalink:"/docs/Library/analysis/graphs/LabeledGraph"}},p={},o=[{value:"Usage",id:"usage",level:4},{value:"Synopsis",id:"synopsis",level:4},{value:"Types",id:"types",level:4},{value:"Description",id:"description",level:4},{value:"alias Graph&T {#analysis-graphs-Graph-Graph&T}",id:"analysis-graphs-Graph-Graph&T",level:2},{value:"function order",id:"analysis-graphs-Graph-order",level:2},{value:"Synopsis",id:"synopsis-1",level:4},{value:"Examples",id:"examples",level:4},{value:"function stronglyConnectedComponents",id:"analysis-graphs-Graph-stronglyConnectedComponents",level:2},{value:"Synopsis",id:"synopsis-2",level:4},{value:"Examples",id:"examples-1",level:4},{value:"function stronglyConnectedComponentsAndTopSort",id:"analysis-graphs-Graph-stronglyConnectedComponentsAndTopSort",level:2},{value:"function bottom",id:"analysis-graphs-Graph-bottom",level:2},{value:"Synopsis",id:"synopsis-3",level:4},{value:"Description",id:"description-1",level:4},{value:"Examples",id:"examples-2",level:4},{value:"function predecessors",id:"analysis-graphs-Graph-predecessors",level:2},{value:"Synopsis",id:"synopsis-4",level:4},{value:"Description",id:"description-2",level:4},{value:"Examples",id:"examples-3",level:4},{value:"function reach",id:"analysis-graphs-Graph-reach",level:2},{value:"Synopsis",id:"synopsis-5",level:4},{value:"Description",id:"description-3",level:4},{value:"function reachR",id:"analysis-graphs-Graph-reachR",level:2},{value:"Synopsis",id:"synopsis-6",level:4},{value:"Description",id:"description-4",level:4},{value:"Examples",id:"examples-4",level:4},{value:"function reachX",id:"analysis-graphs-Graph-reachX",level:2},{value:"Synopsis",id:"synopsis-7",level:4},{value:"Description",id:"description-5",level:4},{value:"Examples",id:"examples-5",level:4},{value:"function shortestPathPair",id:"analysis-graphs-Graph-shortestPathPair",level:2},{value:"Synopsis",id:"synopsis-8",level:4},{value:"Description",id:"description-6",level:4},{value:"function successors",id:"analysis-graphs-Graph-successors",level:2},{value:"Synopsis",id:"synopsis-9",level:4},{value:"Description",id:"description-7",level:4},{value:"Examples",id:"examples-6",level:4},{value:"function top",id:"analysis-graphs-Graph-top",level:2},{value:"Synopsis",id:"synopsis-10",level:4},{value:"Description",id:"description-8",level:4},{value:"Examples",id:"examples-7",level:4},{value:"function connectedComponents",id:"analysis-graphs-Graph-connectedComponents",level:2},{value:"Synopsis",id:"synopsis-11",level:4},{value:"Description",id:"description-9",level:4},{value:"Examples",id:"examples-8",level:4}],h={toc:o};function c(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,s.Z)({},h,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"import analysis::graphs::Graph;")),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Graph")," datatype with associated functions."),(0,r.kt)("h4",{id:"types"},"Types"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"alias Graph[&T] = rel[&T from, &T to];")),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"The Graph data type is a binary relation and all operators and functions defined\non ",(0,r.kt)("a",{parentName:"p",href:"../../../Rascal/Expressions/Values/Relation"},"relations")," are also defined on Graphs."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Graph")," library provides the following functions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"((Library:alias:analysis::graphs::Graph::Graph","[&T]","))"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Library/analysis/graphs/Graph#analysis::graphs::Graph-bottom"},"Library:function:analysis::graphs::Graph::bottom")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Library/analysis/graphs/Graph#analysis::graphs::Graph-connectedComponents"},"Library:function:analysis::graphs::Graph::connected components")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Library/analysis/graphs/Graph#analysis::graphs::Graph-order"},"Library:function:analysis::graphs::Graph::order")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Library/analysis/graphs/Graph#analysis::graphs::Graph-predecessors"},"Library:function:analysis::graphs::Graph::predecessors")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Library/analysis/graphs/Graph#analysis::graphs::Graph-reach"},"Library:function:analysis::graphs::Graph::reach")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Library/analysis/graphs/Graph#analysis::graphs::Graph-reachR"},"Library:function:analysis::graphs::Graph::reachR")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Library/analysis/graphs/Graph#analysis::graphs::Graph-reachX"},"Library:function:analysis::graphs::Graph::reachX")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Library/analysis/graphs/Graph#analysis::graphs::Graph-shortestPathPair"},"Library:function:analysis::graphs::Graph::shortest path pair")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Library/analysis/graphs/Graph#analysis::graphs::Graph-stronglyConnectedComponents"},"Library:function:analysis::graphs::Graph::strongly connected components")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Library/analysis/graphs/Graph#analysis::graphs::Graph-stronglyConnectedComponentsAndTopSort"},"Library:function:analysis::graphs::Graph::strongly connected components and top sort")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Library/analysis/graphs/Graph#analysis::graphs::Graph-successors"},"Library:function:analysis::graphs::Graph::successors")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Library/analysis/graphs/Graph#analysis::graphs::Graph-top"},"Library:function:analysis::graphs::Graph::top"))),(0,r.kt)("h2",{id:"analysis-graphs-Graph-Graph&T"},"alias Graph","[&T]"," {#analysis-graphs-Graph-Graph","[&T]","}"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rel[&T from, &T to]"))),(0,r.kt)("h2",{id:"analysis-graphs-Graph-order"},"function order"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"list[&T] order(Graph[&T] g)"))),(0,r.kt)("h4",{id:"synopsis-1"},"Synopsis"),(0,r.kt)("p",null,"Compute topological order of the nodes in a graph."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import  analysis::graphs::Graph;\nok\nrascal>order({<3,4>, <1,2>, <2,4>, <1,3>});\nlist[int]: [1,2,3,4]\n")),(0,r.kt)("h2",{id:"analysis-graphs-Graph-stronglyConnectedComponents"},"function stronglyConnectedComponents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set[set[&T]] stronglyConnectedComponents(Graph[&T] g)"))),(0,r.kt)("h4",{id:"synopsis-2"},"Synopsis"),(0,r.kt)("p",null,"Compute strongly connected components in a graph."),(0,r.kt)("h4",{id:"examples-1"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import  analysis::graphs::Graph;\nok\nrascal>stronglyConnectedComponents({<1, 2>, <2, 3>, <3, 2>, <2, 4>, <4, 2>, <3, 5>, <5, 3>, <4, 5>, <5, 3>});\nset[set[int]]: {\n  {1},\n  {5,3,2,4}\n}\n")),(0,r.kt)("h2",{id:"analysis-graphs-Graph-stronglyConnectedComponentsAndTopSort"},"function stronglyConnectedComponentsAndTopSort"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tuple[set[set[&T]], list[&T]]  stronglyConnectedComponentsAndTopSort(Graph[&T] ag)"))),(0,r.kt)("h2",{id:"analysis-graphs-Graph-bottom"},"function bottom"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set[&T] bottom(Graph[&T] G)"))),(0,r.kt)("h4",{id:"synopsis-3"},"Synopsis"),(0,r.kt)("p",null,"Determine the bottom nodes (leaves) of a graph."),(0,r.kt)("h4",{id:"description-1"},"Description"),(0,r.kt)("p",null,"Returns the bottom nodes of Graph ",(0,r.kt)("inlineCode",{parentName:"p"},"G"),", i.e., the leaf nodes that don't have any descendants."),(0,r.kt)("h4",{id:"examples-2"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import analysis::graphs::Graph;\nok\nrascal>bottom({<1,2>, <1,3>, <2,4>, <3,4>});\nset[int]: {4}\n")),(0,r.kt)("h2",{id:"analysis-graphs-Graph-predecessors"},"function predecessors"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set[&T] predecessors(Graph[&T] G, &T From)"))),(0,r.kt)("h4",{id:"synopsis-4"},"Synopsis"),(0,r.kt)("p",null,"Determine the direct predecessors of a graph node."),(0,r.kt)("h4",{id:"description-2"},"Description"),(0,r.kt)("p",null,"Returns the direct predecessors of node ",(0,r.kt)("inlineCode",{parentName:"p"},"From")," in Graph ",(0,r.kt)("inlineCode",{parentName:"p"},"G"),"."),(0,r.kt)("h4",{id:"examples-3"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import analysis::graphs::Graph;\nok\nrascal>predecessors({<1,2>, <1,3>, <2,4>, <3,4>}, 4);\nset[int]: {3,2}\n")),(0,r.kt)("h2",{id:"analysis-graphs-Graph-reach"},"function reach"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set[&T] reach(Graph[&T] G, set[&T] Start)"))),(0,r.kt)("h4",{id:"synopsis-5"},"Synopsis"),(0,r.kt)("p",null,"Determine the graph nodes reachable from a set of nodes."),(0,r.kt)("h4",{id:"description-3"},"Description"),(0,r.kt)("p",null,"Returns the set of nodes in Graph ",(0,r.kt)("inlineCode",{parentName:"p"},"G")," that are reachable from any of the nodes\nin the set ",(0,r.kt)("inlineCode",{parentName:"p"},"Start"),"."),(0,r.kt)("h2",{id:"analysis-graphs-Graph-reachR"},"function reachR"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set[&T] reachR(Graph[&T] G, set[&T] Start, set[&T] Restr)"))),(0,r.kt)("h4",{id:"synopsis-6"},"Synopsis"),(0,r.kt)("p",null,"Determine the graph nodes reachable from a set of nodes using a restricted set of intermediate nodes."),(0,r.kt)("h4",{id:"description-4"},"Description"),(0,r.kt)("p",null,"Returns the set of nodes in Graph ",(0,r.kt)("inlineCode",{parentName:"p"},"G")," that are reachable from any of the nodes\nin set ",(0,r.kt)("inlineCode",{parentName:"p"},"Start")," using path that only use nodes in the set ",(0,r.kt)("inlineCode",{parentName:"p"},"Restr"),"."),(0,r.kt)("h4",{id:"examples-4"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import analysis::graphs::Graph;\nok\nrascal>reachR({<1,2>, <1,3>, <2,4>, <3,4>}, {1}, {1, 2, 3});\nset[int]: {3,2}\n")),(0,r.kt)("h2",{id:"analysis-graphs-Graph-reachX"},"function reachX"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set[&T] reachX(Graph[&T] G, set[&T] Start, set[&T] Excl)"))),(0,r.kt)("h4",{id:"synopsis-7"},"Synopsis"),(0,r.kt)("p",null,"Determine the graph nodes reachable from a set of nodes excluding certain intermediate nodes."),(0,r.kt)("h4",{id:"description-5"},"Description"),(0,r.kt)("p",null,"Returns set of nodes in Graph ",(0,r.kt)("inlineCode",{parentName:"p"},"G")," that are reachable from any of the nodes\nin ",(0,r.kt)("inlineCode",{parentName:"p"},"Start")," via path that exclude nodes in ",(0,r.kt)("inlineCode",{parentName:"p"},"Excl"),"."),(0,r.kt)("h4",{id:"examples-5"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import analysis::graphs::Graph;\nok\nrascal>reachX({<1,2>, <1,3>, <2,4>, <3,4>}, {1}, {2});\nset[int]: {3,4}\n")),(0,r.kt)("h2",{id:"analysis-graphs-Graph-shortestPathPair"},"function shortestPathPair"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"list[&T] shortestPathPair(Graph[&T] G, &T From, &T To)"))),(0,r.kt)("h4",{id:"synopsis-8"},"Synopsis"),(0,r.kt)("p",null,"Determine the shortest path between two graph nodes."),(0,r.kt)("h4",{id:"description-6"},"Description"),(0,r.kt)("p",null,"Returns the shortest path between nodes ",(0,r.kt)("inlineCode",{parentName:"p"},"From")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"To")," in Graph ",(0,r.kt)("inlineCode",{parentName:"p"},"G"),"."),(0,r.kt)("h2",{id:"analysis-graphs-Graph-successors"},"function successors"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set[&T] successors(Graph[&T] G, &T From)"))),(0,r.kt)("h4",{id:"synopsis-9"},"Synopsis"),(0,r.kt)("p",null,"Determine the direct successors of a graph node."),(0,r.kt)("h4",{id:"description-7"},"Description"),(0,r.kt)("p",null,"Returns the direct successors of node ",(0,r.kt)("inlineCode",{parentName:"p"},"From")," in Graph ",(0,r.kt)("inlineCode",{parentName:"p"},"G"),"."),(0,r.kt)("h4",{id:"examples-6"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import analysis::graphs::Graph;\nok\nrascal>successors({<1,2>, <1,3>, <2,4>, <3,4>}, 1);\nset[int]: {3,2}\n")),(0,r.kt)("h2",{id:"analysis-graphs-Graph-top"},"function top"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set[&T] top(Graph[&T] G)"))),(0,r.kt)("h4",{id:"synopsis-10"},"Synopsis"),(0,r.kt)("p",null,"Determine the set of top nodes (roots) of a graph."),(0,r.kt)("h4",{id:"description-8"},"Description"),(0,r.kt)("p",null,"Returns the top nodes of Graph ",(0,r.kt)("inlineCode",{parentName:"p"},"G"),", i.e., the root nodes that do not have any predecessors."),(0,r.kt)("h4",{id:"examples-7"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import analysis::graphs::Graph;\nok\nrascal>top({<1,2>, <1,3>, <2,4>, <3,4>});\nset[int]: {1}\n")),(0,r.kt)("h2",{id:"analysis-graphs-Graph-connectedComponents"},"function connectedComponents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set[set[&T]] connectedComponents(Graph[&T] G)"))),(0,r.kt)("h4",{id:"synopsis-11"},"Synopsis"),(0,r.kt)("p",null,"Determine the connected components of a graph."),(0,r.kt)("h4",{id:"description-9"},"Description"),(0,r.kt)("p",null,"Returns the ",(0,r.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Connected_component_(graph_theory)%5Bconnected"},"http://en.wikipedia.org/wiki/Connected_component_(graph_theory)[connected")," components] of Graph ",(0,r.kt)("inlineCode",{parentName:"p"},"G"),", as sets of nodes. All nodes within one component are all reachable from one another, there are no paths between two nodes from different components. The graph is assumed to be undirected."),(0,r.kt)("h4",{id:"examples-8"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>import analysis::graphs::Graph;\nok\nrascal>connectedComponents({<1,2>, <1,3>, <4,5>, <5,6>});\nset[set[int]]: {\n  {5,4,6},\n  {1,3,2}\n}\n")))}c.isMDXComponent=!0}}]);