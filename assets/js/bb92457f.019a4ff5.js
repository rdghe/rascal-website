"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[57742],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>b});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=s(t),b=l,m=p["".concat(c,".").concat(b)]||p[b]||d[b]||r;return t?a.createElement(m,i(i({ref:n},u),{},{components:t})):a.createElement(m,i({ref:n},u))}));function b(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=p;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},83001:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=t(83117),l=(t(67294),t(3905));const r={title:"module resource::jdbc::JDBC"},i=void 0,o={unversionedId:"Library/resource/jdbc/JDBC",id:"Library/resource/jdbc/JDBC",title:"module resource::jdbc::JDBC",description:"Usage",source:"@site/docs/Library/resource/jdbc/JDBC.md",sourceDirName:"Library/resource/jdbc",slug:"/Library/resource/jdbc/",permalink:"/docs/Library/resource/jdbc/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Library/resource/jdbc/JDBC.md",tags:[],version:"current",frontMatter:{title:"module resource::jdbc::JDBC"},sidebar:"tutorialSidebar",previous:{title:"resource",permalink:"/docs/Library/resource/"},next:{title:"resource::jdbc",permalink:"/docs/Library/resource/jdbc/"}},c={},s=[{value:"Usage",id:"usage",level:4},{value:"function registerJDBCClass",id:"resource-jdbc-JDBC-registerJDBCClass",level:2},{value:"function mysqlConnectString",id:"resource-jdbc-JDBC-mysqlConnectString",level:2},{value:"data Connection",id:"resource-jdbc-JDBC-Connection",level:2},{value:"function createConnection",id:"resource-jdbc-JDBC-createConnection",level:2},{value:"function closeConnection",id:"resource-jdbc-JDBC-closeConnection",level:2},{value:"function getTableTypes",id:"resource-jdbc-JDBC-getTableTypes",level:2},{value:"data JDBCType",id:"resource-jdbc-JDBC-JDBCType",level:2},{value:"data Column",id:"resource-jdbc-JDBC-Column",level:2},{value:"data Table",id:"resource-jdbc-JDBC-Table",level:2},{value:"function getTableNames",id:"resource-jdbc-JDBC-getTableNames",level:2},{value:"function getTables",id:"resource-jdbc-JDBC-getTables",level:2},{value:"function getViews",id:"resource-jdbc-JDBC-getViews",level:2},{value:"function getTable",id:"resource-jdbc-JDBC-getTable",level:2},{value:"function getView",id:"resource-jdbc-JDBC-getView",level:2},{value:"data RuntimeException",id:"resource-jdbc-JDBC-RuntimeException",level:2},{value:"function jdbc2RascalType",id:"resource-jdbc-JDBC-jdbc2RascalType",level:2},{value:"data Nullable",id:"resource-jdbc-JDBC-Nullable",level:2},{value:"function loadTable",id:"resource-jdbc-JDBC-loadTable",level:2},{value:"function loadTableOrdered",id:"resource-jdbc-JDBC-loadTableOrdered",level:2},{value:"function allTableSchemas",id:"resource-jdbc-JDBC-allTableSchemas",level:2},{value:"function tableSchema",id:"resource-jdbc-JDBC-tableSchema",level:2}],u={toc:s};function d(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"usage"},"Usage"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"import resource::jdbc::JDBC;")),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-registerJDBCClass"},"function registerJDBCClass"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"void registerJDBCClass(str className)"))),(0,l.kt)("p",null,"Given the name of a JDBC driver class, register it so it can be used in connections."),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-mysqlConnectString"},"function mysqlConnectString"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str mysqlConnectString(map[str,str] properties)"))),(0,l.kt)("p",null,"Generate a MySQL connect string."),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-Connection"},"data Connection"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal"},"data Connection  \n     = jdbcConnection(int id)\n     ;\n")),(0,l.kt)("p",null,"JDBC Connection type"),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-createConnection"},"function createConnection"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Connection createConnection(str connectString)"))),(0,l.kt)("p",null,"Create a connection based on the given connection string."),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-closeConnection"},"function closeConnection"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"void closeConnection(Connection connection)"))),(0,l.kt)("p",null,"Close the given connection."),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-getTableTypes"},"function getTableTypes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list[str] getTableTypes(Connection connection)"))),(0,l.kt)("p",null,"Get the types of tables available through this connection."),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-JDBCType"},"data JDBCType"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal"},"data JDBCType  \n     = array()\n     | bigInt()\n     | binary()\n     | bit()\n     | blob()\n     | boolean()\n     | char()\n     | clob()\n     | dataLink()\n     | date()\n     | decimal()\n     | distinct()\n     | double()\n     | float()\n     | integer()\n     | javaObject()\n     | longNVarChar()\n     | longVarBinary()\n     | longVarChar()\n     | nChar()\n     | nClob()\n     | null()\n     | numeric()\n     | nVarChar()\n     | other()\n     | \\real()\n     | ref()\n     | rowId()\n     | smallInt()\n     | sqlXML()\n     | struct()\n     | time()\n     | timeStamp()\n     | tinyInt()\n     | varBinary()\n     | varChar()\n     ;\n")),(0,l.kt)("p",null,"The JDBC types that could be assigned to various columns."),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-Column"},"data Column"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal"},"data Column  \n     = column(str columnName, JDBCType columnType, bool nullable)\n     ;\n")),(0,l.kt)("p",null,"A column in a table or view"),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-Table"},"data Table"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal"},"data Table  \n     = table(str tableName, list[Column] columns)\n     ;\n")),(0,l.kt)("p",null,"A table in a database"),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-getTableNames"},"function getTableNames"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set[str] getTableNames(Connection connection)"))),(0,l.kt)("p",null,"Get the tables visible through this connection (just names)."),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-getTables"},"function getTables"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set[Table] getTables(Connection connection)"))),(0,l.kt)("p",null,"Get the tables visible through this connection (with column info)."),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-getViews"},"function getViews"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set[Table] getViews(Connection connection)"))),(0,l.kt)("p",null,"Get the tables visible through this connection (with column info)."),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-getTable"},"function getTable"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Table getTable(Connection connection, str tableName)"))),(0,l.kt)("p",null,"Get the Table metadata for a named table."),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-getView"},"function getView"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Table getView(Connection connection, str viewName)"))),(0,l.kt)("p",null,"Get the Table metadata for a named view."),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-RuntimeException"},"data RuntimeException"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal"},"data RuntimeException  \n     = unsupportedJDBCType(JDBCType jdbcType)\n     ;\n")),(0,l.kt)("p",null,"An exception thrown when we try to translate (or otherwise use) a JDBC type with no Rascal equivalent."),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-jdbc2RascalType"},"function jdbc2RascalType"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(array())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(bigInt())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(binary())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(bit())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(blob())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(boolean())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(char())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(clob())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(dataLink())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(date())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(decimal())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(distinct())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(double())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(float())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(integer())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(javaObject())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(longNVarChar())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(longVarBinary())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(longVarChar())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(nChar())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(nClob())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(JDBCType::null())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(numeric())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(nVarChar())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(other())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(JDBCType::\\real())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(ref())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(rowId())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(smallInt())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(sqlXML())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(struct())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(time())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(timeStamp())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(tinyInt())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(varBinary())")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Symbol jdbc2RascalType(varChar())"))),(0,l.kt)("p",null,"Get the Rascal type (as a symbol) for the given JDBC type"),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-Nullable"},"data Nullable"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal"},"data Nullable[&T]  \n     = null()\n     | notnull(&T item)\n     ;\n")),(0,l.kt)("p",null,"Represents values which may or may not be null."),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-loadTable"},"function loadTable"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set[&T] loadTable(type[&T] resType, Connection connection, str tableName)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set[value] loadTable(Connection connection, str tableName)"))),(0,l.kt)("p",null,"Load the contents of a table. This will turn the contents into a set, which by its nature will remove any\nduplicates and discard any order. To maintain duplicates, or the order inherent in the table,\nuse loadTableOrdered instead."),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-loadTableOrdered"},"function loadTableOrdered"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list[&T] loadTableOrdered(type[&T] resType, Connection connection, str tableName)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list[value] loadTableOrdered(Connection connection, str tableName)"))),(0,l.kt)("p",null,"Load the contents of a table. This maintains order and duplicates, but does not provide access to the\nrelational operations provided by loadTable."),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-allTableSchemas"},"function allTableSchemas"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str allTableSchemas(str moduleName, loc uri)"))),(0,l.kt)("p",null,"  The JDBC tables schema should be given as:\njdbctables+connect-string\nwhere connect-string is the database-specific information needed to connect,\nencoded as a URI, for instance:\njdbctables+mysql://localhost/bugs?user=my_user_name&password=my_password"),(0,l.kt)("h2",{id:"resource-jdbc-JDBC-tableSchema"},"function tableSchema"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str tableSchema(str moduleName, loc uri)"))))}d.isMDXComponent=!0}}]);