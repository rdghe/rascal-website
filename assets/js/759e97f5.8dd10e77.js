"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[16699],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),u=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(r),d=a,b=m["".concat(o,".").concat(d)]||m[d]||c[d]||s;return r?n.createElement(b,i(i({ref:t},p),{},{components:r})):n.createElement(b,i({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<s;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},14439:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var n=r(83117),a=(r(67294),r(3905));const s={title:"Number",keywords:["int","real","num"]},i=void 0,l={unversionedId:"Rascal/Expressions/Values/Number/index",id:"Rascal/Expressions/Values/Number/index",title:"Number",description:"Synopsis",source:"@site/docs/Rascal/Expressions/Values/Number/index.md",sourceDirName:"Rascal/Expressions/Values/Number",slug:"/Rascal/Expressions/Values/Number/",permalink:"/docs/Rascal/Expressions/Values/Number/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascal/Expressions/Values/Number/index.md",tags:[],version:"current",frontMatter:{title:"Number",keywords:["int","real","num"]},sidebar:"tutorialSidebar",previous:{title:"Node Subscription",permalink:"/docs/Rascal/Expressions/Values/Node/Subscription/"},next:{title:"Number Addition",permalink:"/docs/Rascal/Expressions/Values/Number/Addition/"}},o={},u=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Usage",id:"usage",level:4},{value:"Function",id:"function",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],p={toc:u};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"synopsis"},"Synopsis"),(0,a.kt)("p",null,"Numeric values."),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("h4",{id:"types"},"Types"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"real"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"num")),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("h4",{id:"function"},"Function"),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"Numbers include integers (values of type ",(0,a.kt)("inlineCode",{parentName:"p"},"int"),") and reals (values of type ",(0,a.kt)("inlineCode",{parentName:"p"},"real"),").\nIf both operands have the same type (",(0,a.kt)("inlineCode",{parentName:"p"},"int")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"real"),") then the operator is the corresponding operator on integers or reals. Otherwise, integer arguments are first converted to real and the real operator is applied."),(0,a.kt)("p",null,"The following operations are provided on numbers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/Addition))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/Conditional))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/Division))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/Equal))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/GreaterThan))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/GreaterThanOrEqual))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/LessThan))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/LessThanOrEqual))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/Multiplication))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/Negation))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/NotEqual))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/Remainder))"),(0,a.kt)("li",{parentName:"ul"},"((Rascal:Expressions/Values/Number/Subtraction))")),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("h4",{id:"benefits"},"Benefits"))}c.isMDXComponent=!0}}]);