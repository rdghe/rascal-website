"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[78652],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(a),d=l,b=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return a?n.createElement(b,i(i({ref:t},c),{},{components:a})):n.createElement(b,i({ref:t},c))}));function d(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},22992:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(83117),l=(a(67294),a(3905));const r={title:"Variable Declaration"},i=void 0,o={unversionedId:"Rascal/Declarations/Variable/index",id:"Rascal/Declarations/Variable/index",title:"Variable Declaration",description:"Synopsis",source:"@site/docs/Rascal/Declarations/Variable/index.md",sourceDirName:"Rascal/Declarations/Variable",slug:"/Rascal/Declarations/Variable/",permalink:"/docs/Rascal/Declarations/Variable/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascal/Declarations/Variable/index.md",tags:[],version:"current",frontMatter:{title:"Variable Declaration"},sidebar:"tutorialSidebar",previous:{title:"Tag Declaration",permalink:"/docs/Rascal/Declarations/Tag/"},next:{title:"Expressions",permalink:"/docs/Rascal/Expressions/"}},s={},p=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4},{value:"Pitfalls",id:"pitfalls",level:4}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"synopsis"},"Synopsis"),(0,l.kt)("p",null,"Declare a variable."),(0,l.kt)("h4",{id:"syntax"},"Syntax"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Type Name = Exp ;")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Type Name;"))),(0,l.kt)("h4",{id:"types"},"Types"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"Type")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"Exp")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"<: Type"))))),(0,l.kt)("h4",{id:"function"},"Function"),(0,l.kt)("h4",{id:"description"},"Description"),(0,l.kt)("p",null,"The effect of a variable declaration is to introduce a new variable ",(0,l.kt)("em",{parentName:"p"},"Name")," and\nto assign the value of expression ",(0,l.kt)("em",{parentName:"p"},"Exp")," to ",(0,l.kt)("em",{parentName:"p"},"Name"),". A mention of ",(0,l.kt)("em",{parentName:"p"},"Name")," later on in the same scope\nwill be replaced by this value, provided that ",(0,l.kt)("em",{parentName:"p"},"Name"),"\\'s value has not been changed by an intermediate assignment. "),(0,l.kt)("p",null,"When a variable is declared, it has as scope the nearest enclosing block, or the module when declared at the module level."),(0,l.kt)("p",null,"The following rules apply:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Double declarations in the same scope are not allowed.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"The type of ",(0,l.kt)("em",{parentName:"p"},"Exp")," should be compatible with ",(0,l.kt)("em",{parentName:"p"},"Type"),", i.e., it should be a subtype of ",(0,l.kt)("em",{parentName:"p"},"Type"),"."))),(0,l.kt)("p",null,"As a convenience, also declarations without an initialization expression are permitted inside functions (but not at the module level)\nand have the form"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal"},"_Type_ _Name_; \n")),(0,l.kt)("p",null,"and only introduce the variable ",(0,l.kt)("em",{parentName:"p"},"Name"),"."),(0,l.kt)("p",null,"Rascal provides local type inference, which allows the implicit declaration of variables that are used locally in functions. The following rules apply:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"An implicitly declared variable is declared at the level of the current scope, this may the whole function body or a block nested in it.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"An implicitly declared variable gets as type the type of the first value that is assignment to it.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"If a variable is implicitly declared in different execution path of a function, all these implicit declarations should result in the same type.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"All uses of an implicitly declared variable must be compatible with its implicit type."))),(0,l.kt)("h4",{id:"examples"},"Examples"),(0,l.kt)("p",null,"Two explicit variable declarations:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>int max = 100;\nint: 100\nrascal>min = 0;\nint: 0\n")),(0,l.kt)("p",null,"An implicit variable declaration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>day = {<"mon", 1>, <"tue", 2>, <"wed",3>, \n>>>>>>>       <"thu", 4>, <"fri", 5>, <"sat",6>, <"sun",7>};\nrel[str,int]: {\n  <"thu",4>,\n  <"tue",2>,\n  <"sat",6>,\n  <"wed",3>,\n  <"fri",5>,\n  <"sun",7>,\n  <"mon",1>\n}\n')),(0,l.kt)("p",null,"Variable declaration and assignment leading to type error"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>int month = 12;\nint: 12\nrascal>month ="December";\n|prompt:///|(7,10,<1,7>,<1,17>): Expected int, but got str\nAdvice: |http://tutor.rascal-mpl.org/Errors/Static/UnexpectedType/UnexpectedType.html|\nok\n')),(0,l.kt)("h4",{id:"benefits"},"Benefits"),(0,l.kt)("h4",{id:"pitfalls"},"Pitfalls"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Local type inference for variables always uses the smallest possible scope for a variable; this implies that\na variable introduced in an inner scope is not available outside that scope. Here is how things can go wrong:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>if( 4 > 3){ x = "abc"; } else { x = "def";}\nstr: "abc"\nrascal>x;\n|prompt:///|(0,1,<1,0>,<1,1>): Undeclared variable: x\nAdvice: |http://tutor.rascal-mpl.org/Errors/Static/UndeclaredVariable/UndeclaredVariable.html|\nok\n')))}u.isMDXComponent=!0}}]);