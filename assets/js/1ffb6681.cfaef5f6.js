"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[10250],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),c=r,k=d["".concat(p,".").concat(c)]||d[c]||m[c]||i;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},32491:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={title:"QuestionMarkup"},o=void 0,l={unversionedId:"Tutor/Markup/QuestionMarkup/index",id:"Tutor/Markup/QuestionMarkup/index",title:"QuestionMarkup",description:"Synopsis",source:"@site/docs/Tutor/Markup/QuestionMarkup/index.md",sourceDirName:"Tutor/Markup/QuestionMarkup",slug:"/Tutor/Markup/QuestionMarkup/",permalink:"/docs/Tutor/Markup/QuestionMarkup/",draft:!1,tags:[],version:"current",frontMatter:{title:"QuestionMarkup"},sidebar:"tutorialSidebar",previous:{title:"Variable",permalink:"/docs/Tutor/Markup/InlineMarkup/Variable/"},next:{title:"Choice",permalink:"/docs/Tutor/Markup/QuestionMarkup/Choice/"}},p={},s=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],u={toc:s};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Mark up for interactive questions."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"The specification of questions is being redesigned; The information provided here is outdated.")),(0,r.kt)("p",null,"The following types of questions are supported:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Text"),": a text question with a free format answer."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Choice"),": a multiple choice question."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Type"),": question about the ",(0,r.kt)("em",{parentName:"li"},"type")," of a Rascal expression."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Value"),": question about the ",(0,r.kt)("em",{parentName:"li"},"value")," of a Rascal expression.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/Tutor/Markup/QuestionMarkup/Text/"},"Text")," gives the question text and lists all possible good answers."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/Tutor/Markup/QuestionMarkup/Choice/"},"Choice")," is a straightforward listing of good and bad answers."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/Tutor/Markup/QuestionMarkup/Type/"},"./Type")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/Tutor/Markup/QuestionMarkup/Value/"},"./Value")," questions are based on a template that consists of an optional ",(0,r.kt)("em",{parentName:"p"},"listing")," and an ",(0,r.kt)("em",{parentName:"p"},"equality"),":"),(0,r.kt)("p",null,"![null][Question.png]","(/assets/Tutor/Markup/QuestionMarkup/Question.png)"),(0,r.kt)("p",null,"There should be exactly one ",(0,r.kt)("em",{parentName:"p"},"hole")," (indicated by ",(0,r.kt)("inlineCode",{parentName:"p"},"<?>"),") in this template that is to be filled in by the student; it may occur in the listing\nor in one of the sides of the equality. The general structure is therefore: ",(0,r.kt)("em",{parentName:"p"},"fill in the hole such that the equality holds"),".\nGiven that the listing is optional, this template represents 5 different question styles."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/Tutor/Markup/QuestionMarkup/Type/"},"./Type")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/Tutor/Markup/QuestionMarkup/Value/"},"./Value")," questions use ",(0,r.kt)("a",{parentName:"p",href:"/docs/Tutor/Markup/QuestionMarkup/TypeDescriptor/"},"type descriptor"),"s to describe desired values and share certain common steps (",(0,r.kt)("em",{parentName:"p"},"QSteps"),"):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prep: RascalCommand")," describes preparatory steps needed to execute the question. Typically, required\nimports can be listed here."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"make: Var = TypeDescriptor"),": makes a new value generated according to ",(0,r.kt)("em",{parentName:"li"},"TypeDescriptor")," and assigns it to a new variable ",(0,r.kt)("em",{parentName:"li"},"Var"),".\n",(0,r.kt)("em",{parentName:"li"},"Var")," can be used in later steps in the same question."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr: Var = Expr"),": introduces a new variable ",(0,r.kt)("em",{parentName:"li"},"Var")," and assigns to it the result of evaluating ",(0,r.kt)("em",{parentName:"li"},"Expr"),".\n",(0,r.kt)("em",{parentName:"li"},"Expr")," may contain references to previously introduced variables using ",(0,r.kt)("inlineCode",{parentName:"li"},"<"),"Var",(0,r.kt)("inlineCode",{parentName:"li"},">"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type: TypeDescriptor")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hint: Text"),": a hint to be given to the student in response to a wrong answer. ",(0,r.kt)("em",{parentName:"li"},"Text")," may contain references to previously introduced variables."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"test: Expr\u2081 == Expr\u2082"),": the equality that should hold. The expressions may contain references to variables. One side may contain a hole (",(0,r.kt)("inlineCode",{parentName:"li"},"<?>"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"list: Text"),": a listing that runs until the next question or the end of the concept. It may contain a hole.")),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prep: import List;")," imports the List module before executing the following steps."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"make: A = set[arb[int,str]]")," introduces ",(0,r.kt)("inlineCode",{parentName:"li"},"A")," and assigns it a value of the indicated type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"make: B = same[A]")," introduces ",(0,r.kt)("inlineCode",{parentName:"li"},"B")," and assigns it a value of the same type as ",(0,r.kt)("inlineCode",{parentName:"li"},"A"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expr: C = <A> + <B>"),": inserts the values of ",(0,r.kt)("inlineCode",{parentName:"li"},"A")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"B"),", performs the addition, and assigns the result to ",(0,r.kt)("inlineCode",{parentName:"li"},"C"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type: set[int]"),": the required type is ",(0,r.kt)("inlineCode",{parentName:"li"},"set[int]"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hint: One or more integers separated by comma's"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"test: <A> + <?> == <C>"),": the student has to replace ",(0,r.kt)("inlineCode",{parentName:"li"},"<?>")," by an answwer that makes the equality true.")))}m.isMDXComponent=!0}}]);