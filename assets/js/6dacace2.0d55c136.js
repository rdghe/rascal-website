"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[40023],{3905:(e,n,t)=>{t.d(n,{Zo:()=>o,kt:()=>d});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var v=a.createContext({}),s=function(e){var n=a.useContext(v),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},o=function(e){var n=s(e.components);return a.createElement(v.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,v=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),c=s(t),d=r,m=c["".concat(v,".").concat(d)]||c[d]||u[d]||l;return t?a.createElement(m,p(p({ref:n},o),{},{components:t})):a.createElement(m,p({ref:n},o))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,p=new Array(l);p[0]=c;var i={};for(var v in n)hasOwnProperty.call(n,v)&&(i[v]=n[v]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var s=2;s<l;s++)p[s]=t[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},58594:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>v,contentTitle:()=>p,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var a=t(87462),r=(t(67294),t(3905));const l={title:"Eval1"},p=void 0,i={unversionedId:"Recipes/Languages/Func/Eval1/index",id:"Recipes/Languages/Func/Eval1/index",title:"Eval1",description:"Synopsis",source:"@site/docs/Recipes/Languages/Func/Eval1/index.md",sourceDirName:"Recipes/Languages/Func/Eval1",slug:"/Recipes/Languages/Func/Eval1/",permalink:"/docs/Recipes/Languages/Func/Eval1/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/Recipes/Languages/Func/Eval1/index.md",tags:[],version:"current",frontMatter:{title:"Eval1"},sidebar:"tutorialSidebar",previous:{title:"Eval0",permalink:"/docs/Recipes/Languages/Func/Eval0/"},next:{title:"Eval2",permalink:"/docs/Recipes/Languages/Func/Eval2/"}},v={},s=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],o={toc:s};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Like Eval0 but with support for let-expressions."),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"Interpreter Eval1 supports the following features of Func: "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Feature"),(0,r.kt)("th",{parentName:"tr",align:null},"Eval1"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"function declaration"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"integer constant"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"variable"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"arithmetic operators"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"comparison operators"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"call"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"if"),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"let")),(0,r.kt)("td",{parentName:"tr",align:null},"y")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sequence"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"assignment"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"address operator"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dereference operator"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("p",null,"In particular, the let construct is supported and this requires the addition\nof an extra environment for <name, value> bindings."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"// tag::module[]\nmodule demo::lang::Func::Eval1\n\n// using env, allowing let\n\nimport demo::lang::Func::AST;\n\nimport List;\n\nalias Env = map[str, int];  // <1>\nalias PEnv = map[str, Func];\n\nint eval1(str main, list[int] args, Prog prog) {\n  penv = ( f.name: f | f <- prog.funcs );\n  f = penv[main];\n  env = ( f.formals[i] : args[i] | i <- index(f.formals) ); \n  return eval1(f.body, env, penv);\n}\n\n\nint eval1(nat(int nat), Env env, PEnv penv)  = nat;\n\nint eval1(var(str n), Env env, PEnv penv)  = env[n]; // <2>\n\nint eval1(mul(Exp lhs, Exp rhs), Env env, PEnv penv) = \n    eval1(lhs, env, penv) * eval1(rhs, env, penv);\n    \nint eval1(div(Exp lhs, Exp rhs), Env env, PEnv penv) = \n    eval1(lhs, env, penv) / eval1(rhs, env, penv);\n    \nint eval1(add(Exp lhs, Exp rhs), Env env, PEnv penv) = \n    eval1(lhs, env, penv) + eval1(rhs, env, penv);\n    \nint eval1(sub(Exp lhs, Exp rhs), Env env, PEnv penv) = \n    eval1(lhs, env, penv) - eval1(rhs, env, penv);\n    \nint eval1(gt(Exp lhs, Exp rhs), Env env, PEnv penv) = \n    eval1(lhs, env, penv) > eval1(rhs, env, penv) ? 1 : 0;\n    \nint eval1(lt(Exp lhs, Exp rhs), Env env, PEnv penv) = \n    eval1(lhs, env, penv) < eval1(rhs, env, penv) ? 1 : 0;\n    \nint eval1(geq(Exp lhs, Exp rhs), Env env, PEnv penv) = \n    eval1(lhs, env, penv) >= eval1(rhs, env, penv) ? 1 : 0;\n    \nint eval1(leq(Exp lhs, Exp rhs), Env env, PEnv penv) = \n    eval1(lhs, env, penv) <= eval1(rhs, env, penv) ? 1 : 0;\n  \nint eval1(cond(Exp cond, Exp then, Exp otherwise), Env env, PEnv penv) =             \n    (eval1(cond, env, penv) != 0) ? eval1(then, env, penv) : eval1(otherwise, env, penv);\n                 \nint eval1(call(str name, list[Exp] args), Env env, PEnv penv) {\n   f = penv[name];\n   env =  ( f.formals[i]: eval1(args[i], env, penv) | i <- index(f.formals) );\n   return eval1(f.body, env, penv);\n}\n         \nint eval1(let(list[Binding] bindings, Exp exp), Env env, PEnv penv) { // <3>\n   env += ( b.var : eval1(b.exp, env, penv) | b <- bindings );  \n   return eval1(exp, env, penv);  \n}\n// end::module[]\n\n")),(0,r.kt)("p",null,"<1> The alias ",(0,r.kt)("inlineCode",{parentName:"p"},"Env")," is introduced that maps strings to integers.\nAll evaluation functions get an extra Env argument.\n<2> The environment is used to retrieve a variable's value.\n<3> The environment is extended with new bindings."),(0,r.kt)("p",null,"Let's try this with F1:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal"},"fact(n) = let\n            x = n\n          in\n            if x <= 1 then \n               x \n            else \n               x * fact(x-1)\n            end\n          end\n")),(0,r.kt)("p",null,"The result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>import demo::lang::Func::Load;\nok\nrascal>import demo::lang::Func::Eval1;\nok\nrascal>import demo::lang::Func::programs::F1;\nok\nrascal>eval1("fact", [10], load(F1));\nint: 3628800\n')))}u.isMDXComponent=!0}}]);