"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[31193],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(i,".").concat(m)]||d[m]||p[m]||s;return n?a.createElement(f,l(l({ref:t},u),{},{components:n})):a.createElement(f,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<s;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},17329:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=n(83117),r=(n(67294),n(3905));const s={title:"Constructor"},l=void 0,o={unversionedId:"Rascal/Expressions/Values/Constructor/index",id:"Rascal/Expressions/Values/Constructor/index",title:"Constructor",description:"Synopsis",source:"@site/docs/Rascal/Expressions/Values/Constructor/index.md",sourceDirName:"Rascal/Expressions/Values/Constructor",slug:"/Rascal/Expressions/Values/Constructor/",permalink:"/docs/Rascal/Expressions/Values/Constructor/",draft:!1,editUrl:"https://github.com/usethesource/rascal-website/tree/website-v2/docs/docs/Rascal/Expressions/Values/Constructor/index.md",tags:[],version:"current",frontMatter:{title:"Constructor"},sidebar:"tutorialSidebar",previous:{title:"Boolean Or",permalink:"/docs/Rascal/Expressions/Values/Boolean/Or/"},next:{title:"DateTime",permalink:"/docs/Rascal/Expressions/Values/DateTime/"}},i={},c=[{value:"Synopsis",id:"synopsis",level:4},{value:"Syntax",id:"syntax",level:4},{value:"Types",id:"types",level:4},{value:"Function",id:"function",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4},{value:"Benefits",id:"benefits",level:4}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Constructors create values for user-defined datatypes (Algebraic Datatypes)."),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Name ( Exp<sub>1</sub>, Exp<sub>2</sub>, ... )")),(0,r.kt)("h4",{id:"types"},"Types"),(0,r.kt)("p",null,"//"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"Exp<sub>1</sub>")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"Exp<sub>2</sub>")),(0,r.kt)("th",{parentName:"tr",align:null},"..."),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"Name ( Exp<sub>1</sub>, Exp<sub>2</sub>, ... )")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"T<sub>1</sub>")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"T<sub>2</sub>")),(0,r.kt)("td",{parentName:"tr",align:null},"..."),(0,r.kt)("td",{parentName:"tr",align:null},"Depends on ADT declaration")))),(0,r.kt)("h4",{id:"function"},"Function"),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"In ordinary programming languages record types or classes exist to introduce a new type name for a collection of related,\nnamed, values and to provide access to the elements of such a collection through their name. "),(0,r.kt)("p",null,"In Rascal, algebraic data types provide this facility. They have to be declared, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/Rascal/Declarations/AlgebraicDataType"},"Algebraic Data Type"),", and\nthen values can be created using calls to the declared constructor functions.\nThe constructor ",(0,r.kt)("em",{parentName:"p"},"Name")," should correspond (regarding name, arity and argument types) to one of the alternatives\nin the ADT declaration."),(0,r.kt)("p",null,"First, the actual parameter expressions ",(0,r.kt)("em",{parentName:"p"},"Exp"),"~i~ are evaluated resulting in values ",(0,r.kt)("em",{parentName:"p"},"V"),"~i~.\nNext, a data value is constructed in accordance with the declared data type\nusing the values ",(0,r.kt)("em",{parentName:"p"},"V"),"~i~ as arguments for the constructor. This data value is used as value of the constructor.\nConstructors are functions that can be used in all contexts where functions can be used."),(0,r.kt)("p",null,"Observe that the syntax of a constructor is identical to the syntax of an function ",(0,r.kt)("a",{parentName:"p",href:"/docs/Rascal/Expressions/Call"},"Call"),"."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("p",null,"First, define a datatype ",(0,r.kt)("inlineCode",{parentName:"p"},"WF")," for word frequencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},"rascal>data WF = wf(str word, int freq);\nok\n")),(0,r.kt)("p",null,"Then construct a new ",(0,r.kt)("inlineCode",{parentName:"p"},"WF")," value by calling the constructor ",(0,r.kt)("inlineCode",{parentName:"p"},"wf")," with appropriate arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rascal-shell"},'rascal>wf("Rascal", 10000);\nWF: wf("Rascal",10000)\n')),(0,r.kt)("h4",{id:"benefits"},"Benefits"))}p.isMDXComponent=!0}}]);