"use strict";(self.webpackChunkrascal_website=self.webpackChunkrascal_website||[]).push([[25369],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>d});var o=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var p=o.createContext({}),s=function(e){var r=o.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},c=function(e){var r=s(e.components);return o.createElement(p.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},u=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(t),d=n,y=u["".concat(p,".").concat(d)]||u[d]||m[d]||l;return t?o.createElement(y,a(a({ref:r},c),{},{components:t})):o.createElement(y,a({ref:r},c))}));function d(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var l=t.length,a=new Array(l);a[0]=u;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i.mdxType="string"==typeof e?e:n,a[1]=i;for(var s=2;s<l;s++)a[s]=t[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},74298:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var o=t(87462),n=(t(67294),t(3905));const l={title:"NonWellformedType"},a=void 0,i={unversionedId:"CompileTimeErrors/NonWellformedType/index",id:"CompileTimeErrors/NonWellformedType/index",title:"NonWellformedType",description:"Synopsis",source:"@site/docs/CompileTimeErrors/NonWellformedType/index.md",sourceDirName:"CompileTimeErrors/NonWellformedType",slug:"/CompileTimeErrors/NonWellformedType/",permalink:"/docs/CompileTimeErrors/NonWellformedType/",draft:!1,editUrl:"https://github.com/usethesource/rascal/tree/main/src/org/rascalmpl/courses/docs/CompileTimeErrors/NonWellformedType/index.md",tags:[],version:"current",frontMatter:{title:"NonWellformedType"},sidebar:"tutorialSidebar",previous:{title:"NonVoidTypeRequired",permalink:"/docs/CompileTimeErrors/NonVoidTypeRequired/"},next:{title:"NotEnumerable",permalink:"/docs/CompileTimeErrors/NotEnumerable/"}},p={},s=[{value:"Synopsis",id:"synopsis",level:4},{value:"Description",id:"description",level:4},{value:"Examples",id:"examples",level:4}],c={toc:s};function m(e){let{components:r,...t}=e;return(0,n.kt)("wrapper",(0,o.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"synopsis"},"Synopsis"),(0,n.kt)("p",null,"A type in a declaration is not wellformed."),(0,n.kt)("h4",{id:"description"},"Description"),(0,n.kt)("p",null,"Types should respect some structural rules and this error signals a violation of these rules.\nExamples of violations are:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a non-parametric type has parameters."),(0,n.kt)("li",{parentName:"ul"},"a parametric type has an incorrect number of parameters.")),(0,n.kt)("p",null,"Remedy: correct the type."),(0,n.kt)("h4",{id:"examples"},"Examples"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rascal-shell",metastring:",error",",error":!0},"rascal>bool[int] x;\n|prompt:///|(0,4,<1,0>,<1,4>): Non-well-formed type: bool cannot have type arguments.\nAdvice: |http://tutor.rascal-mpl.org/Errors/Static/NonWellformedType/NonWellformedType.html|\nok\nrascal>list[int,str] l;\n|prompt:///|(0,4,<1,0>,<1,4>): Non-well-formed type: list should have exactly one type argument, like list[value]\nAdvice: |http://tutor.rascal-mpl.org/Errors/Static/NonWellformedType/NonWellformedType.html|\nok\nrascal>map[str, int, int]  m;\n|prompt:///|(0,3,<1,0>,<1,3>): Non-well-formed type: map should have exactly two type arguments, like map[value,value]\nAdvice: |http://tutor.rascal-mpl.org/Errors/Static/NonWellformedType/NonWellformedType.html|\nok\nrascal>set[int,str] s;\n|prompt:///|(0,3,<1,0>,<1,3>): Non-well-formed type: set should have exactly one type argument, like set[value]\nAdvice: |http://tutor.rascal-mpl.org/Errors/Static/NonWellformedType/NonWellformedType.html|\nok\n")))}m.isMDXComponent=!0}}]);